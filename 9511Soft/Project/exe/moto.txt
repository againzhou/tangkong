; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\moto.o --depend=.\exe\moto.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\moto.crf ..\Source\APP\moto.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  HOT_POS_Get PROC
;;;312    extern bool                COM_9511TangkongEnable[2];
;;;313    HOT_POS_TypeDef     HOT_POS_Get()
000000  48fa              LDR      r0,|L1.1004|
;;;314    {
;;;315    	 return HOT_Position;
000002  7800              LDRB     r0,[r0,#0]  ; HOT_Position
;;;316    }
000004  4770              BX       lr
;;;317    
                          ENDP

                  MOTO_Stop PROC
;;;611    
;;;612    static  void  MOTO_Stop  (BSP_ID_TypeDef    id,
000006  b570              PUSH     {r4-r6,lr}
;;;613                              u16               msTQDown)
;;;614    {
000008  4604              MOV      r4,r0
00000a  460d              MOV      r5,r1
;;;615        TIM_ITConfig(BSP_TMR_8M, MOTO_FlagCC[id], DISABLE);     /// 关闭中断
00000c  48f8              LDR      r0,|L1.1008|
00000e  f8301014          LDRH     r1,[r0,r4,LSL #1]
000012  2200              MOVS     r2,#0
000014  48f7              LDR      r0,|L1.1012|
000016  f7fffffe          BL       TIM_ITConfig
;;;616        BSP_MOTO_ClkSet(id, Bit_RESET);                         /// 设置脉冲电平为低
00001a  2100              MOVS     r1,#0
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       BSP_MOTO_ClkSet
;;;617        OSTimeDlyHMSM(0, 0, 0, msTQDown);                       /// 等待(ms)
000022  462b              MOV      r3,r5
000024  2200              MOVS     r2,#0
000026  4611              MOV      r1,r2
000028  4610              MOV      r0,r2
00002a  f7fffffe          BL       OSTimeDlyHMSM
;;;618       	BSP_MOTO_TQSet(id, BSP_MOT_TQ_50);
00002e  2102              MOVS     r1,#2
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       BSP_MOTO_TQSet
;;;619    }
000036  bd70              POP      {r4-r6,pc}
;;;620    
                          ENDP

                  MOTO_SetSpd PROC
;;;505    /// 对于针高电机, 最快定时频率为 8M / (1200 / 2) = 13.3 KHz,    最快脉冲频率为6.6K
;;;506    static  void  MOTO_SetSpd (BSP_ID_TypeDef id, MOTO_USE_TypeDef use, u32 SpdGear)
000038  b510              PUSH     {r4,lr}
;;;507    {
;;;508        /// cut motor speed table
;;;509        static  const  u16  MOTO_CutSpdTab[MOTO_CUT_SPD_MAX_ENGINE][MOTO_CUT_SPD_MAX_GEAR] = {
;;;510                                                                    /// 1.5 time
;;;511            7215,7213,6927,6642,6358,6078,5799,5523,5251,4983,
;;;512            4719,4461,4207,3961,3720,3486,3259,3040,2829,2626,
;;;513            2433,2248,2073,1908,1752,1606,1473,1348,1236,1135,
;;;514            1045, 967, 901, 847, 804, 774, 756, 750,
;;;515                                                                    /// 1.2 time
;;;516            5772,5770,5541,5313,5086,4862,4639,4418,4201,3986,
;;;517            3775,3568,3366,3169,2976,2788,2607,2432,2263,2101,
;;;518            1946,1798,1658,1526,1401,1285,1178,1078, 988, 908,
;;;519             836, 774, 721, 678, 643, 619, 604, 600,
;;;520                                                                    /// 1.0 time (old)
;;;521            4810,4809,4618,4428,4239,4052,3866,3682,3501,3322,
;;;522            3146,2974,2805,2641,2480,2324,2173,2027,1886,1751,
;;;523            1622,1499,1382,1272,1168,1071, 982, 899, 824, 757,
;;;524             697, 645, 601, 565, 536, 516, 504, 500,
;;;525                                                                    /// 0.8 time
;;;526            3848,3847,3694,3542,3391,3241,3092,2945,2800,2657,
;;;527            2516,2379,2244,2112,1984,1859,1738,1621,1508,1400,
;;;528            1297,1199,1105,1017, 934, 856, 785, 719, 659, 605,
;;;529             557, 516, 480, 452, 428, 412, 403, 400,
;;;530        };
;;;531        
;;;532        static  const  u16  MOTO_HghSpdTab[MOTO_HGH_SPD_MAX_ENGINE][MOTO_HGH_SPD_MAX_GEAR] = {
;;;533            40000, 40000, 20000, 16000, 12800, 10000,  7200,  5600,  4400,  4000,
;;;534            16000, 16000, 11200,  9200,  7200,  5600,  4000,  2800,  2000,  1600,
;;;535            13332, 13332,  7200,  5600,  4000,  2800,  2000,  1600,  1400,  1332,
;;;536            13332, 13332,  7200,  5600,  4000,  2800,  2000,  1520,  1360,  1200,
;;;537        };
;;;538        
;;;539        
;;;540        if (use == MOTO_USE_CUT) {                  /// 由于原剪线定时器时钟为4MHz, 所以剪线曲线不用除2 
00003a  2901              CMP      r1,#1
00003c  d12b              BNE      |L1.150|
;;;541            if (SpdGear < MOTO_CUT_SPD_MAX_GEAR) {
00003e  2a26              CMP      r2,#0x26
000040  d214              BCS      |L1.108|
;;;542                MOTO_Timing[id]     =   MOTO_CutSpdTab[MOTO_CutSpdEngine][SpdGear]*UpHeadSpeed/100;
000042  4bed              LDR      r3,|L1.1016|
000044  881b              LDRH     r3,[r3,#0]  ; MOTO_CutSpdEngine
000046  eb030443          ADD      r4,r3,r3,LSL #1
00004a  eb041303          ADD      r3,r4,r3,LSL #4
00004e  4ceb              LDR      r4,|L1.1020|
000050  eb040383          ADD      r3,r4,r3,LSL #2
000054  f8333012          LDRH     r3,[r3,r2,LSL #1]
000058  4ce9              LDR      r4,|L1.1024|
00005a  7824              LDRB     r4,[r4,#0]  ; UpHeadSpeed
00005c  4363              MULS     r3,r4,r3
00005e  2464              MOVS     r4,#0x64
000060  fb93f3f4          SDIV     r3,r3,r4
000064  4ce7              LDR      r4,|L1.1028|
000066  f8243010          STRH     r3,[r4,r0,LSL #1]
00006a  e037              B        |L1.220|
                  |L1.108|
;;;543            } else {
;;;544                MOTO_Timing[id]     =   MOTO_CutSpdTab[MOTO_CutSpdEngine][MOTO_CUT_SPD_MAX_GEAR - 1]*UpHeadSpeed/100;
00006c  4be2              LDR      r3,|L1.1016|
00006e  881b              LDRH     r3,[r3,#0]  ; MOTO_CutSpdEngine
000070  eb030443          ADD      r4,r3,r3,LSL #1
000074  eb041303          ADD      r3,r4,r3,LSL #4
000078  4ce0              LDR      r4,|L1.1020|
00007a  eb040383          ADD      r3,r4,r3,LSL #2
00007e  f8b3304a          LDRH     r3,[r3,#0x4a]
000082  4cdf              LDR      r4,|L1.1024|
000084  7824              LDRB     r4,[r4,#0]  ; UpHeadSpeed
000086  4363              MULS     r3,r4,r3
000088  2464              MOVS     r4,#0x64
00008a  fb93f3f4          SDIV     r3,r3,r4
00008e  4cdd              LDR      r4,|L1.1028|
000090  f8243010          STRH     r3,[r4,r0,LSL #1]
000094  e022              B        |L1.220|
                  |L1.150|
;;;545            }
;;;546        } else if (use == MOTO_USE_HGH) {           /// 由于原针高定时器时钟为8MHz, 所以针高曲线除2 
000096  bb09              CBNZ     r1,|L1.220|
;;;547            if (SpdGear < MOTO_HGH_SPD_MAX_GEAR) {
000098  2a0a              CMP      r2,#0xa
00009a  d20d              BCS      |L1.184|
;;;548                MOTO_Timing[id]     =   (MOTO_HghSpdTab[MOTO_HghSpdEngine][SpdGear] >> 1);
00009c  4bda              LDR      r3,|L1.1032|
00009e  881b              LDRH     r3,[r3,#0]  ; MOTO_HghSpdEngine
0000a0  eb030383          ADD      r3,r3,r3,LSL #2
0000a4  4cd9              LDR      r4,|L1.1036|
0000a6  eb040383          ADD      r3,r4,r3,LSL #2
0000aa  f8333012          LDRH     r3,[r3,r2,LSL #1]
0000ae  105b              ASRS     r3,r3,#1
0000b0  4cd4              LDR      r4,|L1.1028|
0000b2  f8243010          STRH     r3,[r4,r0,LSL #1]
0000b6  e011              B        |L1.220|
                  |L1.184|
;;;549            } else {
;;;550                MOTO_Timing[id]     =   (MOTO_HghSpdTab[MOTO_HghSpdEngine][MOTO_HGH_SPD_MAX_GEAR - 1] >> 1)*UpHeadSpeed/100;
0000b8  4bd3              LDR      r3,|L1.1032|
0000ba  881b              LDRH     r3,[r3,#0]  ; MOTO_HghSpdEngine
0000bc  eb030383          ADD      r3,r3,r3,LSL #2
0000c0  4cd2              LDR      r4,|L1.1036|
0000c2  eb040383          ADD      r3,r4,r3,LSL #2
0000c6  8a5b              LDRH     r3,[r3,#0x12]
0000c8  105b              ASRS     r3,r3,#1
0000ca  4ccd              LDR      r4,|L1.1024|
0000cc  7824              LDRB     r4,[r4,#0]  ; UpHeadSpeed
0000ce  4363              MULS     r3,r4,r3
0000d0  2464              MOVS     r4,#0x64
0000d2  fb93f3f4          SDIV     r3,r3,r4
0000d6  4ccb              LDR      r4,|L1.1028|
0000d8  f8243010          STRH     r3,[r4,r0,LSL #1]
                  |L1.220|
;;;551            }
;;;552        }
;;;553    }
0000dc  bd10              POP      {r4,pc}
;;;554    
                          ENDP

                  MOTO_Step PROC
;;;575    
;;;576    static  MOTO_ST_TypeDef  MOTO_Step (BSP_ID_TypeDef id, MOTO_USE_TypeDef use, u32 nStep)
0000de  e92d43f8          PUSH     {r3-r9,lr}
;;;577    {
0000e2  4604              MOV      r4,r0
0000e4  460f              MOV      r7,r1
0000e6  4690              MOV      r8,r2
;;;578        u32     i;
;;;579        u8      err;
;;;580        u8      acc;
;;;581        u32     SpdGear;
;;;582        
;;;583        
;;;584        /// 内部函数, 不检查参数范围
;;;585        if (use == MOTO_USE_CUT) {                              /// 取得降速加速度
0000e8  2f01              CMP      r7,#1
0000ea  d102              BNE      |L1.242|
;;;586            acc =   MOTO_CutDownAcc;
0000ec  48c8              LDR      r0,|L1.1040|
0000ee  7806              LDRB     r6,[r0,#0]  ; MOTO_CutDownAcc
0000f0  e004              B        |L1.252|
                  |L1.242|
;;;587        } else if (use == MOTO_USE_HGH) {
0000f2  b917              CBNZ     r7,|L1.250|
;;;588            acc =   MOTO_HghDownAcc;
0000f4  48c7              LDR      r0,|L1.1044|
0000f6  7806              LDRB     r6,[r0,#0]  ; MOTO_HghDownAcc
0000f8  e000              B        |L1.252|
                  |L1.250|
;;;589        } else {
;;;590            acc =   1;
0000fa  2601              MOVS     r6,#1
                  |L1.252|
;;;591        }
;;;592        
;;;593        for (i = nStep; i != 0; i--) {
0000fc  4645              MOV      r5,r8
0000fe  e028              B        |L1.338|
                  |L1.256|
;;;594            SpdGear =   ((i - 1) * acc)<<1;
000100  1e68              SUBS     r0,r5,#1
000102  4370              MULS     r0,r6,r0
000104  ea4f0940          LSL      r9,r0,#1
;;;595            OSSemPend(MOTO_SemIrqPtr[id], 0, &err);                 /// 等待脉冲下降沿到
000108  49c3              LDR      r1,|L1.1048|
00010a  f8510024          LDR      r0,[r1,r4,LSL #2]
00010e  466a              MOV      r2,sp
000110  2100              MOVS     r1,#0
000112  f7fffffe          BL       OSSemPend
;;;596            MOTO_ClkNum[id]++;                                      /// 步数增加1
000116  48c1              LDR      r0,|L1.1052|
000118  f8500024          LDR      r0,[r0,r4,LSL #2]
00011c  1c40              ADDS     r0,r0,#1
00011e  49bf              LDR      r1,|L1.1052|
000120  f8410024          STR      r0,[r1,r4,LSL #2]
;;;597    //        MOTO_SetSpd(id, use, MOTO_ClkNum[id]);                  /// 速度随位移增加, acc =  1
;;;598    //        MOTO_SetSpd(id, use, (i - 1) * acc);                    /// 到位减速
;;;599            if (SpdGear > MOTO_ClkNum[id]) {
000124  4608              MOV      r0,r1
000126  f8500024          LDR      r0,[r0,r4,LSL #2]
00012a  4548              CMP      r0,r9
00012c  d204              BCS      |L1.312|
;;;600                SpdGear = MOTO_ClkNum[id]<<2;
00012e  4608              MOV      r0,r1
000130  f8500024          LDR      r0,[r0,r4,LSL #2]
000134  ea4f0980          LSL      r9,r0,#2
                  |L1.312|
;;;601            }
;;;602            MOTO_SetSpd(id, use, SpdGear);
000138  464a              MOV      r2,r9
00013a  4639              MOV      r1,r7
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       MOTO_SetSpd
;;;603            
;;;604            if (BSP_MOTO_StatusGet(id) == BSP_MOT_ST_ERROR) {
000142  4620              MOV      r0,r4
000144  f7fffffe          BL       BSP_MOTO_StatusGet
000148  b910              CBNZ     r0,|L1.336|
;;;605                return  MOTO_ST_PRO;                                /// 电机故障 TB6560错误
00014a  2001              MOVS     r0,#1
                  |L1.332|
;;;606            }
;;;607        }
;;;608        
;;;609        return  MOTO_ST_OK;
;;;610    }
00014c  e8bd83f8          POP      {r3-r9,pc}
                  |L1.336|
000150  1e6d              SUBS     r5,r5,#1              ;593
                  |L1.338|
000152  2d00              CMP      r5,#0                 ;593
000154  d1d4              BNE      |L1.256|
000156  2005              MOVS     r0,#5                 ;609
000158  e7f8              B        |L1.332|
;;;611    
                          ENDP

                  MOTO_CutStepUntil PROC
;;;622    
;;;623    static  MOTO_ST_TypeDef  MOTO_CutStepUntil (BSP_ID_TypeDef id, u32 nStep, BSP_SWITCH_TypeDef swi)
00015a  b5f8              PUSH     {r3-r7,lr}
;;;624    {
00015c  4604              MOV      r4,r0
00015e  460d              MOV      r5,r1
000160  4616              MOV      r6,r2
;;;625        u32     i;
;;;626        u8      err;
;;;627        
;;;628        
;;;629        /// 内部函数, 不检查参数范围
;;;630        for (i = nStep; i != 0; i--) {
000162  462f              MOV      r7,r5
000164  e022              B        |L1.428|
                  |L1.358|
;;;631            OSSemPend(MOTO_SemIrqPtr[id], 0, &err);                 /// 等待脉冲下降沿到
000166  49ac              LDR      r1,|L1.1048|
000168  f8510024          LDR      r0,[r1,r4,LSL #2]
00016c  466a              MOV      r2,sp
00016e  2100              MOVS     r1,#0
000170  f7fffffe          BL       OSSemPend
;;;632            MOTO_ClkNum[id]++;                                      /// 步数增加1
000174  48a9              LDR      r0,|L1.1052|
000176  f8500024          LDR      r0,[r0,r4,LSL #2]
00017a  1c40              ADDS     r0,r0,#1
00017c  49a7              LDR      r1,|L1.1052|
00017e  f8410024          STR      r0,[r1,r4,LSL #2]
;;;633            MOTO_SetSpd(id, MOTO_USE_CUT, MOTO_ClkNum[id]);         /// 速度随位移增加, acc =  1
000182  4608              MOV      r0,r1
000184  f8502024          LDR      r2,[r0,r4,LSL #2]
000188  2101              MOVS     r1,#1
00018a  4620              MOV      r0,r4
00018c  f7fffffe          BL       MOTO_SetSpd
;;;634    //        MOTO_SetSpd(id, MOTO_USE_CUT, (i - 1) * 2);             /// 到位减速度      acc = -2
;;;635            
;;;636            if (BSP_MOTO_StatusGet(id) == BSP_MOT_ST_ERROR) {
000190  4620              MOV      r0,r4
000192  f7fffffe          BL       BSP_MOTO_StatusGet
000196  b908              CBNZ     r0,|L1.412|
;;;637                return  MOTO_ST_PRO;                                /// 电机故障 TB6560错误
000198  2001              MOVS     r0,#1
                  |L1.410|
;;;638            }
;;;639            if (BSP_SWI_FiGet(id) == swi) {                         /// 目标状态
;;;640                return  MOTO_ST_ACTING;
;;;641            }
;;;642        }
;;;643        
;;;644        return  MOTO_ST_OK;
;;;645    }
00019a  bdf8              POP      {r3-r7,pc}
                  |L1.412|
00019c  4620              MOV      r0,r4                 ;639
00019e  f7fffffe          BL       BSP_SWI_FiGet
0001a2  42b0              CMP      r0,r6                 ;639
0001a4  d101              BNE      |L1.426|
0001a6  2000              MOVS     r0,#0                 ;640
0001a8  e7f7              B        |L1.410|
                  |L1.426|
0001aa  1e7f              SUBS     r7,r7,#1              ;630
                  |L1.428|
0001ac  2f00              CMP      r7,#0                 ;630
0001ae  d1da              BNE      |L1.358|
0001b0  2005              MOVS     r0,#5                 ;644
0001b2  e7f2              B        |L1.410|
;;;646    
                          ENDP

                  MOTO_Start PROC
;;;554    
;;;555    static  void  MOTO_Start (BSP_ID_TypeDef        id,
0001b4  e92d41f0          PUSH     {r4-r8,lr}
;;;556                              MOTO_USE_TypeDef      use,
;;;557                              BSP_MOT_DIR_TypeDef   dir,
;;;558                              BSP_MOT_TQ_TypeDef    tq,
;;;559                              u16                   StartTiming)
;;;560    {
0001b8  4604              MOV      r4,r0
0001ba  460e              MOV      r6,r1
0001bc  4615              MOV      r5,r2
0001be  4698              MOV      r8,r3
0001c0  9f06              LDR      r7,[sp,#0x18]
;;;561        MOTO_ClkNum[id]     =   0;                              /// 脉冲累计数清零
0001c2  2000              MOVS     r0,#0
0001c4  4995              LDR      r1,|L1.1052|
0001c6  f8410024          STR      r0,[r1,r4,LSL #2]
;;;562        /// 初始化定时中断使用的变量 MOTO_StepState 和 MOTO_Timing
;;;563        MOTO_StepState[id]  =   Bit_RESET;                      /// 记录脉冲电平为低
0001ca  4995              LDR      r1,|L1.1056|
0001cc  5508              STRB     r0,[r1,r4]
;;;564        MOTO_SetSpd(id, use, 0);                                /// 设置初始速度为0档, 并初始化 MOTO_Timing
0001ce  2200              MOVS     r2,#0
0001d0  4631              MOV      r1,r6
0001d2  4620              MOV      r0,r4
0001d4  f7fffffe          BL       MOTO_SetSpd
;;;565        
;;;566        BSP_MOTO_ClkSet(id, Bit_RESET);                         /// 设置脉冲电平为低
0001d8  2100              MOVS     r1,#0
0001da  4620              MOV      r0,r4
0001dc  f7fffffe          BL       BSP_MOTO_ClkSet
;;;567        BSP_MOTO_DirSet(id, dir);                               /// 设置方向
0001e0  4629              MOV      r1,r5
0001e2  4620              MOV      r0,r4
0001e4  f7fffffe          BL       BSP_MOTO_DirSet
;;;568    	//    BSP_MOTO_TQSet(id, tq);                                 /// 设置电流
;;;569       //	BSP_MOTO_MSet((BSP_ID_TypeDef)id, BSP_MOT_M_5);
;;;570        BSP_MOTO_TQSet(id, BSP_MOT_TQ_75);
0001e8  2101              MOVS     r1,#1
0001ea  4620              MOV      r0,r4
0001ec  f7fffffe          BL       BSP_MOTO_TQSet
;;;571        *(MOTO_CCR[id]) =   BSP_TM8M_Get() + StartTiming;       /// 设置启动时机
0001f0  f7fffffe          BL       BSP_TM8M_Get
0001f4  4438              ADD      r0,r0,r7
0001f6  498b              LDR      r1,|L1.1060|
0001f8  f8511024          LDR      r1,[r1,r4,LSL #2]
0001fc  8008              STRH     r0,[r1,#0]
;;;572        TIM_ClearITPendingBit(BSP_TMR_8M, MOTO_FlagCC[id]);     /// 清中断
0001fe  487c              LDR      r0,|L1.1008|
000200  f8301014          LDRH     r1,[r0,r4,LSL #1]
000204  487b              LDR      r0,|L1.1012|
000206  f7fffffe          BL       TIM_ClearITPendingBit
;;;573        TIM_ITConfig(BSP_TMR_8M, MOTO_FlagCC[id], ENABLE);      /// 打开中断
00020a  4879              LDR      r0,|L1.1008|
00020c  f8301014          LDRH     r1,[r0,r4,LSL #1]
000210  2201              MOVS     r2,#1
000212  4878              LDR      r0,|L1.1012|
000214  f7fffffe          BL       TIM_ITConfig
;;;574    }
000218  e8bd81f0          POP      {r4-r8,pc}
;;;575    
                          ENDP

                  MOTO_CutOutD PROC
;;;877    }  
;;;878    static  MOTO_ST_TypeDef  MOTO_CutOutD (BSP_ID_TypeDef id, u32 nStep)
00021c  b5f8              PUSH     {r3-r7,lr}
;;;879    {
00021e  4605              MOV      r5,r0
000220  460e              MOV      r6,r1
;;;880         MOTO_ST_TypeDef     st;
;;;881    	if((COM_9511TangkongDir==FALSE)||(COM_9511TangkongEnable[id]==FALSE))
000222  4881              LDR      r0,|L1.1064|
000224  7800              LDRB     r0,[r0,#0]  ; COM_9511TangkongDir
000226  b110              CBZ      r0,|L1.558|
000228  4880              LDR      r0,|L1.1068|
00022a  5d40              LDRB     r0,[r0,r5]
00022c  bb70              CBNZ     r0,|L1.652|
                  |L1.558|
;;;882    	{
;;;883    	 if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) 
00022e  4628              MOV      r0,r5
000230  f7fffffe          BL       BSP_SWI_FiGet
000234  2801              CMP      r0,#1
000236  d02a              BEQ      |L1.654|
;;;884    	{                                 /// 如没有回位, 需回位
;;;885            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);        
000238  f44f53fa          MOV      r3,#0x1f40
00023c  487c              LDR      r0,|L1.1072|
00023e  9300              STR      r3,[sp,#0]
000240  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
000242  2201              MOVS     r2,#1
000244  4611              MOV      r1,r2
000246  4628              MOV      r0,r5
000248  f7fffffe          BL       MOTO_Start
;;;886            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
00024c  2201              MOVS     r2,#1
00024e  f24021ee          MOV      r1,#0x2ee
000252  4628              MOV      r0,r5
000254  f7fffffe          BL       MOTO_CutStepUntil
000258  4604              MOV      r4,r0
;;;887            switch (st) 
00025a  b12c              CBZ      r4,|L1.616|
00025c  2c01              CMP      r4,#1
00025e  d002              BEQ      |L1.614|
000260  2c05              CMP      r4,#5
000262  d105              BNE      |L1.624|
000264  e002              B        |L1.620|
                  |L1.614|
;;;888    		{
;;;889    	        case MOTO_ST_PRO:               /// TB6560错误
;;;890    	            break;
000266  e004              B        |L1.626|
                  |L1.616|
;;;891    	        case MOTO_ST_ACTING:            /// 离开接近开关
;;;892    	            st  =   MOTO_ST_OK;
000268  2405              MOVS     r4,#5
;;;893    	            break;
00026a  e002              B        |L1.626|
                  |L1.620|
;;;894    	        case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;895    	            st  =   MOTO_ST_OVTIME;
00026c  2402              MOVS     r4,#2
;;;896    	            break;
00026e  e000              B        |L1.626|
                  |L1.624|
;;;897    	        default:                        /// 其他
;;;898    	            break;
000270  bf00              NOP      
                  |L1.626|
000272  bf00              NOP                            ;890
;;;899            }
;;;900    		if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
000274  2c05              CMP      r4,#5
000276  d105              BNE      |L1.644|
;;;901                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);    
000278  220a              MOVS     r2,#0xa
00027a  2101              MOVS     r1,#1
00027c  4628              MOV      r0,r5
00027e  f7fffffe          BL       MOTO_Step
000282  4604              MOV      r4,r0
                  |L1.644|
;;;902            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
000284  2101              MOVS     r1,#1
000286  4628              MOV      r0,r5
000288  f7fffffe          BL       MOTO_Stop
                  |L1.652|
00028c  e000              B        |L1.656|
                  |L1.654|
;;;903        }
;;;904        else
;;;905    	{ 
;;;906    	   st  =   MOTO_ST_OK;
00028e  2405              MOVS     r4,#5
                  |L1.656|
;;;907    	  // return;
;;;908    	}
;;;909       }    
;;;910    /*    if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) 
;;;911    	{                                 /// 如没有回位, 需回位
;;;912            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);        
;;;913            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
;;;914            switch (st) 
;;;915    		{
;;;916    	        case MOTO_ST_PRO:               /// TB6560错误
;;;917    	            break;
;;;918    	        case MOTO_ST_ACTING:            /// 离开接近开关
;;;919    	            st  =   MOTO_ST_OK;
;;;920    	            break;
;;;921    	        case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;922    	            st  =   MOTO_ST_OVTIME;
;;;923    	            break;
;;;924    	        default:                        /// 其他
;;;925    	            break;
;;;926            }
;;;927    		if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
;;;928                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);    
;;;929            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
;;;930        }
;;;931        else 
;;;932    	{
;;;933    	   st  =   MOTO_ST_OK;
;;;934    	   return;
;;;935    	} */
;;;936       /* if (st == MOTO_ST_OVTIME) 
;;;937    	{
;;;938    		MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
;;;939            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
;;;940            switch (st) 
;;;941    		{
;;;942            case MOTO_ST_PRO:               /// TB6560错误
;;;943                break;
;;;944            case MOTO_ST_ACTING:            /// 离开接近开关
;;;945                st  =   MOTO_ST_OK;
;;;946                break;
;;;947            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;948                st  =   MOTO_ST_OVTIME;
;;;949                break;
;;;950            default:                        /// 其他
;;;951                break;
;;;952            }        
;;;953            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
;;;954               st  =   MOTO_Step(id, MOTO_USE_CUT, 10);            
;;;955            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
;;;956    	} */
;;;957       // if (st == MOTO_ST_OK) 
;;;958       if (BSP_SWI_FiGet(id) == MOTO_CUT_SWI_ON)
000290  4628              MOV      r0,r5
000292  f7fffffe          BL       BSP_SWI_FiGet
000296  2801              CMP      r0,#1
000298  d129              BNE      |L1.750|
;;;959    	{                                                                                /// 2/1000S后启动
;;;960            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
00029a  f44f53fa          MOV      r3,#0x1f40
00029e  4864              LDR      r0,|L1.1072|
0002a0  9300              STR      r3,[sp,#0]
0002a2  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
0002a4  2200              MOVS     r2,#0
0002a6  2101              MOVS     r1,#1
0002a8  4628              MOV      r0,r5
0002aa  f7fffffe          BL       MOTO_Start
;;;961            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_OFF);   /// 出刀, 直到离开接近开关
0002ae  2200              MOVS     r2,#0
0002b0  f24021ee          MOV      r1,#0x2ee
0002b4  4628              MOV      r0,r5
0002b6  f7fffffe          BL       MOTO_CutStepUntil
0002ba  4604              MOV      r4,r0
;;;962            switch (st) 
0002bc  b12c              CBZ      r4,|L1.714|
0002be  2c01              CMP      r4,#1
0002c0  d002              BEQ      |L1.712|
0002c2  2c05              CMP      r4,#5
0002c4  d105              BNE      |L1.722|
0002c6  e002              B        |L1.718|
                  |L1.712|
;;;963    		{
;;;964            case MOTO_ST_PRO:               /// TB6560错误
;;;965                break;
0002c8  e004              B        |L1.724|
                  |L1.714|
;;;966            case MOTO_ST_ACTING:            /// 离开接近开关
;;;967                st  =   MOTO_ST_OK;
0002ca  2405              MOVS     r4,#5
;;;968                break;
0002cc  e002              B        |L1.724|
                  |L1.718|
;;;969            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;970                st  =   MOTO_ST_OVTIME;
0002ce  2402              MOVS     r4,#2
;;;971                break;
0002d0  e000              B        |L1.724|
                  |L1.722|
;;;972            default:                        /// 其他
;;;973                break;
0002d2  bf00              NOP      
                  |L1.724|
0002d4  bf00              NOP                            ;965
;;;974            }
;;;975            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
0002d6  2c05              CMP      r4,#5
0002d8  d105              BNE      |L1.742|
;;;976                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);    
0002da  220a              MOVS     r2,#0xa
0002dc  2101              MOVS     r1,#1
0002de  4628              MOV      r0,r5
0002e0  f7fffffe          BL       MOTO_Step
0002e4  4604              MOV      r4,r0
                  |L1.742|
;;;977            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
0002e6  2101              MOVS     r1,#1
0002e8  4628              MOV      r0,r5
0002ea  f7fffffe          BL       MOTO_Stop
                  |L1.750|
;;;978    	}
;;;979       if (st == MOTO_ST_OVTIME) 
0002ee  2c02              CMP      r4,#2
0002f0  d129              BNE      |L1.838|
;;;980    	{                                                                                /// 2/1000S后启动
;;;981            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
0002f2  f44f53fa          MOV      r3,#0x1f40
0002f6  484e              LDR      r0,|L1.1072|
0002f8  9300              STR      r3,[sp,#0]
0002fa  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
0002fc  2200              MOVS     r2,#0
0002fe  2101              MOVS     r1,#1
000300  4628              MOV      r0,r5
000302  f7fffffe          BL       MOTO_Start
;;;982            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_OFF);   /// 出刀, 直到离开接近开关
000306  2200              MOVS     r2,#0
000308  f24021ee          MOV      r1,#0x2ee
00030c  4628              MOV      r0,r5
00030e  f7fffffe          BL       MOTO_CutStepUntil
000312  4604              MOV      r4,r0
;;;983            switch (st) 
000314  b12c              CBZ      r4,|L1.802|
000316  2c01              CMP      r4,#1
000318  d002              BEQ      |L1.800|
00031a  2c05              CMP      r4,#5
00031c  d105              BNE      |L1.810|
00031e  e002              B        |L1.806|
                  |L1.800|
;;;984    		{
;;;985            case MOTO_ST_PRO:               /// TB6560错误
;;;986                break;
000320  e004              B        |L1.812|
                  |L1.802|
;;;987            case MOTO_ST_ACTING:            /// 离开接近开关
;;;988                st  =   MOTO_ST_OK;
000322  2405              MOVS     r4,#5
;;;989                break;
000324  e002              B        |L1.812|
                  |L1.806|
;;;990            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;991                st  =   MOTO_ST_OVTIME;
000326  2402              MOVS     r4,#2
;;;992                break;
000328  e000              B        |L1.812|
                  |L1.810|
;;;993            default:                        /// 其他
;;;994                break;
00032a  bf00              NOP      
                  |L1.812|
00032c  bf00              NOP                            ;986
;;;995            }
;;;996            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
00032e  2c05              CMP      r4,#5
000330  d105              BNE      |L1.830|
;;;997                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);    
000332  220a              MOVS     r2,#0xa
000334  2101              MOVS     r1,#1
000336  4628              MOV      r0,r5
000338  f7fffffe          BL       MOTO_Step
00033c  4604              MOV      r4,r0
                  |L1.830|
;;;998            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
00033e  2101              MOVS     r1,#1
000340  4628              MOV      r0,r5
000342  f7fffffe          BL       MOTO_Stop
                  |L1.838|
;;;999    	}
;;;1000     if (st == MOTO_ST_OK)
000346  2c05              CMP      r4,#5
000348  d129              BNE      |L1.926|
;;;1001      { 
;;;1002   		MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);        
00034a  f44f53fa          MOV      r3,#0x1f40
00034e  4838              LDR      r0,|L1.1072|
000350  9300              STR      r3,[sp,#0]
000352  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
000354  2201              MOVS     r2,#1
000356  4611              MOV      r1,r2
000358  4628              MOV      r0,r5
00035a  f7fffffe          BL       MOTO_Start
;;;1003           st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
00035e  2201              MOVS     r2,#1
000360  f24021ee          MOV      r1,#0x2ee
000364  4628              MOV      r0,r5
000366  f7fffffe          BL       MOTO_CutStepUntil
00036a  4604              MOV      r4,r0
;;;1004           switch (st) 
00036c  b12c              CBZ      r4,|L1.890|
00036e  2c01              CMP      r4,#1
000370  d002              BEQ      |L1.888|
000372  2c05              CMP      r4,#5
000374  d105              BNE      |L1.898|
000376  e002              B        |L1.894|
                  |L1.888|
;;;1005   		{
;;;1006           case MOTO_ST_PRO:               /// TB6560错误
;;;1007               break;
000378  e004              B        |L1.900|
                  |L1.890|
;;;1008           case MOTO_ST_ACTING:            /// 离开接近开关
;;;1009               st  =   MOTO_ST_OK;
00037a  2405              MOVS     r4,#5
;;;1010               break;
00037c  e002              B        |L1.900|
                  |L1.894|
;;;1011           case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;1012               st  =   MOTO_ST_OVTIME;
00037e  2402              MOVS     r4,#2
;;;1013               break;
000380  e000              B        |L1.900|
                  |L1.898|
;;;1014           default:                        /// 其他
;;;1015               break;
000382  bf00              NOP      
                  |L1.900|
000384  bf00              NOP                            ;1007
;;;1016           }
;;;1017           if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
000386  2c05              CMP      r4,#5
000388  d105              BNE      |L1.918|
;;;1018               st  =   MOTO_Step(id, MOTO_USE_CUT, 10);
00038a  220a              MOVS     r2,#0xa
00038c  2101              MOVS     r1,#1
00038e  4628              MOV      r0,r5
000390  f7fffffe          BL       MOTO_Step
000394  4604              MOV      r4,r0
                  |L1.918|
;;;1019           MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
000396  2101              MOVS     r1,#1
000398  4628              MOV      r0,r5
00039a  f7fffffe          BL       MOTO_Stop
                  |L1.926|
;;;1020       }
;;;1021   	if(COM_9511TangkongEnable[id]==FALSE)
00039e  4823              LDR      r0,|L1.1068|
0003a0  5d40              LDRB     r0,[r0,r5]
0003a2  b910              CBNZ     r0,|L1.938|
;;;1022   		COM_9511TangkongEnable[id]=TRUE;    
0003a4  2001              MOVS     r0,#1
0003a6  4921              LDR      r1,|L1.1068|
0003a8  5548              STRB     r0,[r1,r5]
                  |L1.938|
;;;1023       return  st;    
0003aa  4620              MOV      r0,r4
;;;1024   }
0003ac  bdf8              POP      {r3-r7,pc}
;;;1025   static  MOTO_ST_TypeDef  MOTO_CutBack (BSP_ID_TypeDef id)
                          ENDP

                  MOTO_CutOutO PROC
;;;839    }
;;;840    static  MOTO_ST_TypeDef  MOTO_CutOutO (BSP_ID_TypeDef id, u32 nStep)
0003ae  b5f8              PUSH     {r3-r7,lr}
;;;841    {
0003b0  4605              MOV      r5,r0
0003b2  460e              MOV      r6,r1
;;;842    		MOTO_ST_TypeDef     st;
;;;843           if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) {                                 /// 没有到位
0003b4  4628              MOV      r0,r5
0003b6  f7fffffe          BL       BSP_SWI_FiGet
0003ba  2801              CMP      r0,#1
0003bc  d05a              BEQ      |L1.1140|
;;;844                                                                                    /// 2/1000S后启动
;;;845            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
0003be  f44f53fa          MOV      r3,#0x1f40
0003c2  481b              LDR      r0,|L1.1072|
0003c4  9300              STR      r3,[sp,#0]
0003c6  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
0003c8  2201              MOVS     r2,#1
0003ca  4611              MOV      r1,r2
0003cc  4628              MOV      r0,r5
0003ce  f7fffffe          BL       MOTO_Start
;;;846            
;;;847            st  =   MOTO_CutStepUntil(id, 400, MOTO_CUT_SWI_ON);     /// 回刀, 直到接近开关
0003d2  2201              MOVS     r2,#1
0003d4  f44f71c8          MOV      r1,#0x190
0003d8  4628              MOV      r0,r5
0003da  f7fffffe          BL       MOTO_CutStepUntil
0003de  4604              MOV      r4,r0
;;;848            switch (st) {
0003e0  b344              CBZ      r4,|L1.1076|
0003e2  2c01              CMP      r4,#1
0003e4  d027              BEQ      |L1.1078|
0003e6  2c05              CMP      r4,#5
0003e8  d12a              BNE      |L1.1088|
0003ea  e027              B        |L1.1084|
                  |L1.1004|
                          DCD      HOT_Position
                  |L1.1008|
                          DCD      MOTO_FlagCC
                  |L1.1012|
                          DCD      0x40012c00
                  |L1.1016|
                          DCD      MOTO_CutSpdEngine
                  |L1.1020|
                          DCD      MOTO_CutSpdTab
                  |L1.1024|
                          DCD      UpHeadSpeed
                  |L1.1028|
                          DCD      MOTO_Timing
                  |L1.1032|
                          DCD      MOTO_HghSpdEngine
                  |L1.1036|
                          DCD      MOTO_HghSpdTab
                  |L1.1040|
                          DCD      MOTO_CutDownAcc
                  |L1.1044|
                          DCD      MOTO_HghDownAcc
                  |L1.1048|
                          DCD      MOTO_SemIrqPtr
                  |L1.1052|
                          DCD      MOTO_ClkNum
                  |L1.1056|
                          DCD      MOTO_StepState
                  |L1.1060|
                          DCD      MOTO_CCR
                  |L1.1064|
                          DCD      COM_9511TangkongDir
                  |L1.1068|
                          DCD      COM_9511TangkongEnable
                  |L1.1072|
                          DCD      BSP_DIP_TQ
                  |L1.1076|
000434  e000              B        |L1.1080|
                  |L1.1078|
;;;849            case MOTO_ST_PRO:               /// TB6560错误
;;;850                break;
000436  e004              B        |L1.1090|
                  |L1.1080|
;;;851            case MOTO_ST_ACTING:            /// 达到接近开关
;;;852                st  =   MOTO_ST_OK;
000438  2405              MOVS     r4,#5
;;;853                break;
00043a  e002              B        |L1.1090|
                  |L1.1084|
;;;854            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;855                st  =   MOTO_ST_OVTIME;
00043c  2402              MOVS     r4,#2
;;;856                break;
00043e  e000              B        |L1.1090|
                  |L1.1088|
;;;857            default:                        /// 其他
;;;858                break;
000440  bf00              NOP      
                  |L1.1090|
000442  bf00              NOP                            ;850
;;;859            }
;;;860            
;;;861            if (st == MOTO_ST_OK) 
000444  2c05              CMP      r4,#5
000446  d110              BNE      |L1.1130|
;;;862    		{         /// 如果无异常, 需要可靠回到接近开关处
;;;863                st  =   MOTO_Step(id, MOTO_USE_CUT, MOTO_CUT_IN_GO_ON_N);
000448  2219              MOVS     r2,#0x19
00044a  2101              MOVS     r1,#1
00044c  4628              MOV      r0,r5
00044e  f7fffffe          BL       MOTO_Step
000452  4604              MOV      r4,r0
;;;864    			if (BSP_SWI_FiGet(id) == MOTO_CUT_SWI_ON) 
000454  4628              MOV      r0,r5
000456  f7fffffe          BL       BSP_SWI_FiGet
00045a  2801              CMP      r0,#1
00045c  d105              BNE      |L1.1130|
;;;865    			{ 
;;;866    				st  =   MOTO_CutOutD(id, MOTO_CutFullSteps);
00045e  48f8              LDR      r0,|L1.2112|
000460  8801              LDRH     r1,[r0,#0]  ; MOTO_CutFullSteps
000462  4628              MOV      r0,r5
000464  f7fffffe          BL       MOTO_CutOutD
000468  4604              MOV      r4,r0
                  |L1.1130|
;;;867    			}
;;;868    		    
;;;869            }
;;;870            
;;;871            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
00046a  2101              MOVS     r1,#1
00046c  4628              MOV      r0,r5
00046e  f7fffffe          BL       MOTO_Stop
000472  e000              B        |L1.1142|
                  |L1.1140|
;;;872            
;;;873        } else {
;;;874            st  =   MOTO_ST_OK;
000474  2405              MOVS     r4,#5
                  |L1.1142|
;;;875        }
;;;876        return  st; 
000476  4620              MOV      r0,r4
;;;877    }  
000478  bdf8              POP      {r3-r7,pc}
;;;878    static  MOTO_ST_TypeDef  MOTO_CutOutD (BSP_ID_TypeDef id, u32 nStep)
                          ENDP

                  MOTO_CutO PROC
;;;1059   }
;;;1060   static  MOTO_ST_TypeDef  MOTO_CutO(BSP_ID_TypeDef id)
00047a  b570              PUSH     {r4-r6,lr}
;;;1061   {
00047c  4604              MOV      r4,r0
;;;1062   	MOTO_ST_TypeDef     st;
;;;1063       st  =   MOTO_CutOutO(id, 390);
00047e  f44f71c3          MOV      r1,#0x186
000482  4620              MOV      r0,r4
000484  f7fffffe          BL       MOTO_CutOutO
000488  4605              MOV      r5,r0
;;;1064       return  st;
00048a  4628              MOV      r0,r5
;;;1065   }
00048c  bd70              POP      {r4-r6,pc}
;;;1066   static  MOTO_ST_TypeDef  MOTO_CutD(BSP_ID_TypeDef id)
                          ENDP

                  MOTO_CutD PROC
00048e  b570              PUSH     {r4-r6,lr}
;;;1067   {
000490  4604              MOV      r4,r0
;;;1068   	MOTO_ST_TypeDef     st;
;;;1069       st  =   MOTO_CutOutD(id, MOTO_CutFullSteps);
000492  48eb              LDR      r0,|L1.2112|
000494  8801              LDRH     r1,[r0,#0]  ; MOTO_CutFullSteps
000496  4620              MOV      r0,r4
000498  f7fffffe          BL       MOTO_CutOutD
00049c  4605              MOV      r5,r0
;;;1070   	if(st   ==   MOTO_ST_OK)
00049e  2d05              CMP      r5,#5
0004a0  d102              BNE      |L1.1192|
;;;1071   		HeadUpDown_Status[id]=1;
0004a2  2001              MOVS     r0,#1
0004a4  49e7              LDR      r1,|L1.2116|
0004a6  5508              STRB     r0,[r1,r4]
                  |L1.1192|
;;;1072       return  st;
0004a8  4628              MOV      r0,r5
;;;1073   }
0004aa  bd70              POP      {r4-r6,pc}
;;;1074   
                          ENDP

                  MOTO_CutOutH PROC
;;;720    }
;;;721    static  MOTO_ST_TypeDef  MOTO_CutOutH (BSP_ID_TypeDef id, u32 nStep)
0004ac  b5f8              PUSH     {r3-r7,lr}
;;;722    {
0004ae  4605              MOV      r5,r0
0004b0  460e              MOV      r6,r1
;;;723        MOTO_ST_TypeDef     st;  
;;;724    	st=MOTO_CutOutD(id,nStep);  
0004b2  4631              MOV      r1,r6
0004b4  4628              MOV      r0,r5
0004b6  f7fffffe          BL       MOTO_CutOutD
0004ba  4604              MOV      r4,r0
;;;725        /*if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) 
;;;726    	{                                 /// 如没有回位, 需回位
;;;727    		MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
;;;728            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
;;;729            switch (st) 
;;;730    		{
;;;731            case MOTO_ST_PRO:               /// TB6560错误
;;;732                break;
;;;733            case MOTO_ST_ACTING:            /// 离开接近开关
;;;734                st  =   MOTO_ST_OK;
;;;735                break;
;;;736            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;737                st  =   MOTO_ST_OVTIME;
;;;738                break;
;;;739            default:                        /// 其他
;;;740                break;
;;;741            }
;;;742    		 if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
;;;743                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);
;;;744                
;;;745            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
;;;746        }
;;;747         else 
;;;748            st  =   MOTO_ST_OK;
;;;749    	if (st == MOTO_ST_OVTIME) 
;;;750    	{
;;;751    	    MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);        
;;;752            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
;;;753            switch (st) 
;;;754    		{
;;;755            case MOTO_ST_PRO:               /// TB6560错误
;;;756                break;
;;;757            case MOTO_ST_ACTING:            /// 离开接近开关
;;;758                st  =   MOTO_ST_OK;
;;;759                break;
;;;760            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;761                st  =   MOTO_ST_OVTIME;
;;;762                break;
;;;763            default:                        /// 其他
;;;764                break;
;;;765            }
;;;766            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
;;;767                st  =   MOTO_Step(id, MOTO_USE_CUT, 200);
;;;768            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
;;;769    	} 
;;;770    	if (st == MOTO_ST_OK) 
;;;771    	{                                                                              /// 2/1000S后启动
;;;772            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
;;;773            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_OFF);   /// 出刀, 直到离开接近开关
;;;774            switch (st) 
;;;775    		{
;;;776            case MOTO_ST_PRO:               /// TB6560错误
;;;777                break;
;;;778            case MOTO_ST_ACTING:            /// 离开接近开关
;;;779                st  =   MOTO_ST_OK;
;;;780                break;
;;;781            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;782                st  =   MOTO_ST_OVTIME;
;;;783                break;
;;;784            default:                        /// 其他
;;;785                break;
;;;786            }
;;;787            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
;;;788                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);    
;;;789            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
;;;790       }*/
;;;791       if (st == MOTO_ST_OK) 
0004bc  2c05              CMP      r4,#5
0004be  d129              BNE      |L1.1300|
;;;792       { 
;;;793            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
0004c0  f44f53fa          MOV      r3,#0x1f40
0004c4  48e0              LDR      r0,|L1.2120|
0004c6  9300              STR      r3,[sp,#0]
0004c8  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
0004ca  2201              MOVS     r2,#1
0004cc  4611              MOV      r1,r2
0004ce  4628              MOV      r0,r5
0004d0  f7fffffe          BL       MOTO_Start
;;;794            st  =   MOTO_CutStepUntil(id, 430, MOTO_CUT_SWI_OFF);   /// 出刀, 直到离开接近开关
0004d4  2200              MOVS     r2,#0
0004d6  f44f71d7          MOV      r1,#0x1ae
0004da  4628              MOV      r0,r5
0004dc  f7fffffe          BL       MOTO_CutStepUntil
0004e0  4604              MOV      r4,r0
;;;795            switch (st) {
0004e2  b12c              CBZ      r4,|L1.1264|
0004e4  2c01              CMP      r4,#1
0004e6  d002              BEQ      |L1.1262|
0004e8  2c05              CMP      r4,#5
0004ea  d105              BNE      |L1.1272|
0004ec  e002              B        |L1.1268|
                  |L1.1262|
;;;796            case MOTO_ST_PRO:               /// TB6560错误
;;;797                break;
0004ee  e004              B        |L1.1274|
                  |L1.1264|
;;;798            case MOTO_ST_ACTING:            /// 离开接近开关
;;;799                st  =   MOTO_ST_OK;
0004f0  2405              MOVS     r4,#5
;;;800                break;
0004f2  e002              B        |L1.1274|
                  |L1.1268|
;;;801            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;802                st  =   MOTO_ST_OVTIME;
0004f4  2402              MOVS     r4,#2
;;;803                break;
0004f6  e000              B        |L1.1274|
                  |L1.1272|
;;;804            default:                        /// 其他
;;;805                break;
0004f8  bf00              NOP      
                  |L1.1274|
0004fa  bf00              NOP                            ;797
;;;806            }
;;;807            
;;;808            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
0004fc  2c05              CMP      r4,#5
0004fe  d105              BNE      |L1.1292|
;;;809                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);     
000500  220a              MOVS     r2,#0xa
000502  2101              MOVS     r1,#1
000504  4628              MOV      r0,r5
000506  f7fffffe          BL       MOTO_Step
00050a  4604              MOV      r4,r0
                  |L1.1292|
;;;810            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
00050c  2101              MOVS     r1,#1
00050e  4628              MOV      r0,r5
000510  f7fffffe          BL       MOTO_Stop
                  |L1.1300|
;;;811       }
;;;812      if (st == MOTO_ST_OK)
000514  2c05              CMP      r4,#5
000516  d129              BNE      |L1.1388|
;;;813      {
;;;814    		MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
000518  f44f53fa          MOV      r3,#0x1f40
00051c  48ca              LDR      r0,|L1.2120|
00051e  9300              STR      r3,[sp,#0]
000520  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
000522  2200              MOVS     r2,#0
000524  2101              MOVS     r1,#1
000526  4628              MOV      r0,r5
000528  f7fffffe          BL       MOTO_Start
;;;815            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_ON);   /// 出刀, 直到离开接近开关
00052c  2201              MOVS     r2,#1
00052e  f24021ee          MOV      r1,#0x2ee
000532  4628              MOV      r0,r5
000534  f7fffffe          BL       MOTO_CutStepUntil
000538  4604              MOV      r4,r0
;;;816            switch (st) 
00053a  b12c              CBZ      r4,|L1.1352|
00053c  2c01              CMP      r4,#1
00053e  d002              BEQ      |L1.1350|
000540  2c05              CMP      r4,#5
000542  d105              BNE      |L1.1360|
000544  e002              B        |L1.1356|
                  |L1.1350|
;;;817    		{
;;;818            case MOTO_ST_PRO:               /// TB6560错误
;;;819                break;
000546  e004              B        |L1.1362|
                  |L1.1352|
;;;820            case MOTO_ST_ACTING:            /// 离开接近开关
;;;821                st  =   MOTO_ST_OK;
000548  2405              MOVS     r4,#5
;;;822                break;
00054a  e002              B        |L1.1362|
                  |L1.1356|
;;;823            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;824                st  =   MOTO_ST_OVTIME;
00054c  2402              MOVS     r4,#2
;;;825                break;
00054e  e000              B        |L1.1362|
                  |L1.1360|
;;;826            default:                        /// 其他
;;;827                break;
000550  bf00              NOP      
                  |L1.1362|
000552  bf00              NOP                            ;819
;;;828            }
;;;829            if (st == MOTO_ST_OK)          /// 如果无异常, 到达目标位置
000554  2c05              CMP      r4,#5
000556  d105              BNE      |L1.1380|
;;;830                st  =   MOTO_Step(id, MOTO_USE_CUT, 10);            
000558  220a              MOVS     r2,#0xa
00055a  2101              MOVS     r1,#1
00055c  4628              MOV      r0,r5
00055e  f7fffffe          BL       MOTO_Step
000562  4604              MOV      r4,r0
                  |L1.1380|
;;;831            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
000564  2101              MOVS     r1,#1
000566  4628              MOV      r0,r5
000568  f7fffffe          BL       MOTO_Stop
                  |L1.1388|
;;;832       } 
;;;833        if (st == MOTO_ST_OVTIME)
00056c  2c02              CMP      r4,#2
00056e  d105              BNE      |L1.1404|
;;;834      	{
;;;835    		if (BSP_SWI_FiGet(id) == MOTO_CUT_SWI_ON)
000570  4628              MOV      r0,r5
000572  f7fffffe          BL       BSP_SWI_FiGet
000576  2801              CMP      r0,#1
000578  d100              BNE      |L1.1404|
;;;836    			st  =   MOTO_ST_OK;		
00057a  2405              MOVS     r4,#5
                  |L1.1404|
;;;837    	}
;;;838        return  st;    
00057c  4620              MOV      r0,r4
;;;839    }
00057e  bdf8              POP      {r3-r7,pc}
;;;840    static  MOTO_ST_TypeDef  MOTO_CutOutO (BSP_ID_TypeDef id, u32 nStep)
                          ENDP

                  MOTO_CutH PROC
;;;1074   
;;;1075   static  MOTO_ST_TypeDef  MOTO_CutH (BSP_ID_TypeDef id)
000580  b570              PUSH     {r4-r6,lr}
;;;1076   {
000582  4605              MOV      r5,r0
;;;1077       MOTO_ST_TypeDef     st;
;;;1078   	MOTO_ST_TypeDef     MotoSt[BSP_DEVICE_ID_N];
;;;1079   //	MotoSt[id]   =   MOTO_CutGetState((BSP_ID_TypeDef)id);
;;;1080   	if(HeadUpDown_Status[id]!=2)//&&(MotoSt[id]   ==   MOTO_ST_OK))
000584  48af              LDR      r0,|L1.2116|
000586  5d40              LDRB     r0,[r0,r5]
000588  2802              CMP      r0,#2
00058a  d00b              BEQ      |L1.1444|
;;;1081   	{
;;;1082       	st  =   MOTO_CutOutH(id, MOTO_CutFullSteps);
00058c  48ac              LDR      r0,|L1.2112|
00058e  8801              LDRH     r1,[r0,#0]  ; MOTO_CutFullSteps
000590  4628              MOV      r0,r5
000592  f7fffffe          BL       MOTO_CutOutH
000596  4604              MOV      r4,r0
;;;1083   	    if(st == MOTO_ST_OK)
000598  2c05              CMP      r4,#5
00059a  d104              BNE      |L1.1446|
;;;1084   			HeadUpDown_Status[id]=2;
00059c  2002              MOVS     r0,#2
00059e  49a9              LDR      r1,|L1.2116|
0005a0  5548              STRB     r0,[r1,r5]
0005a2  e000              B        |L1.1446|
                  |L1.1444|
;;;1085   	}
;;;1086   	else
;;;1087   		st=MOTO_ST_OK;//MotoSt[id];
0005a4  2405              MOVS     r4,#5
                  |L1.1446|
;;;1088       return  st;
0005a6  4620              MOV      r0,r4
;;;1089   }
0005a8  bd70              POP      {r4-r6,pc}
;;;1090   static  void  MOTO_Cut (BSP_ID_TypeDef id) //任务的执行函数中调用这个函数
                          ENDP

                  MOTO_CutIn PROC
;;;646    
;;;647    static  MOTO_ST_TypeDef  MOTO_CutIn (BSP_ID_TypeDef id)
0005aa  b538              PUSH     {r3-r5,lr}
;;;648    {
0005ac  4605              MOV      r5,r0
;;;649        MOTO_ST_TypeDef     st;
;;;650        
;;;651        
;;;652        if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) {                                 /// 没有到位
0005ae  4628              MOV      r0,r5
0005b0  f7fffffe          BL       BSP_SWI_FiGet
0005b4  2801              CMP      r0,#1
0005b6  d02a              BEQ      |L1.1550|
;;;653                                                                                    /// 2/1000S后启动
;;;654            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_IN, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
0005b8  f44f53fa          MOV      r3,#0x1f40
0005bc  48a2              LDR      r0,|L1.2120|
0005be  9300              STR      r3,[sp,#0]
0005c0  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
0005c2  2201              MOVS     r2,#1
0005c4  4611              MOV      r1,r2
0005c6  4628              MOV      r0,r5
0005c8  f7fffffe          BL       MOTO_Start
;;;655            
;;;656            st  =   MOTO_CutStepUntil(id, MOTO_CUT_IN_OVER_N, MOTO_CUT_SWI_ON);     /// 回刀, 直到接近开关
0005cc  2201              MOVS     r2,#1
0005ce  489f              LDR      r0,|L1.2124|
0005d0  6801              LDR      r1,[r0,#0]  ; MOTO_CUT_IN_OVER_N
0005d2  4628              MOV      r0,r5
0005d4  f7fffffe          BL       MOTO_CutStepUntil
0005d8  4604              MOV      r4,r0
;;;657            switch (st) {
0005da  b12c              CBZ      r4,|L1.1512|
0005dc  2c01              CMP      r4,#1
0005de  d002              BEQ      |L1.1510|
0005e0  2c05              CMP      r4,#5
0005e2  d105              BNE      |L1.1520|
0005e4  e002              B        |L1.1516|
                  |L1.1510|
;;;658            case MOTO_ST_PRO:               /// TB6560错误
;;;659                break;
0005e6  e004              B        |L1.1522|
                  |L1.1512|
;;;660            case MOTO_ST_ACTING:            /// 达到接近开关
;;;661                st  =   MOTO_ST_OK;
0005e8  2405              MOVS     r4,#5
;;;662                break;
0005ea  e002              B        |L1.1522|
                  |L1.1516|
;;;663            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;664                st  =   MOTO_ST_OVTIME;
0005ec  2402              MOVS     r4,#2
;;;665                break;
0005ee  e000              B        |L1.1522|
                  |L1.1520|
;;;666            default:                        /// 其他
;;;667                break;
0005f0  bf00              NOP      
                  |L1.1522|
0005f2  bf00              NOP                            ;659
;;;668            }
;;;669            
;;;670            if (st == MOTO_ST_OK) {         /// 如果无异常, 需要可靠回到接近开关处
0005f4  2c05              CMP      r4,#5
0005f6  d105              BNE      |L1.1540|
;;;671                st  =   MOTO_Step(id, MOTO_USE_CUT, MOTO_CUT_IN_GO_ON_N);
0005f8  2219              MOVS     r2,#0x19
0005fa  2101              MOVS     r1,#1
0005fc  4628              MOV      r0,r5
0005fe  f7fffffe          BL       MOTO_Step
000602  4604              MOV      r4,r0
                  |L1.1540|
;;;672            }
;;;673            
;;;674            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
000604  2101              MOVS     r1,#1
000606  4628              MOV      r0,r5
000608  f7fffffe          BL       MOTO_Stop
00060c  e000              B        |L1.1552|
                  |L1.1550|
;;;675            
;;;676        } else {
;;;677            st  =   MOTO_ST_OK;
00060e  2405              MOVS     r4,#5
                  |L1.1552|
;;;678        }
;;;679        
;;;680        return  st;
000610  4620              MOV      r0,r4
;;;681    }
000612  bd38              POP      {r3-r5,pc}
;;;682    
                          ENDP

                  MOTO_CutOut PROC
;;;683    static  MOTO_ST_TypeDef  MOTO_CutOut (BSP_ID_TypeDef id, u32 nStep)
000614  b5f8              PUSH     {r3-r7,lr}
;;;684    {
000616  4606              MOV      r6,r0
000618  460d              MOV      r5,r1
;;;685        MOTO_ST_TypeDef     st;
;;;686        
;;;687        
;;;688        if (BSP_SWI_FiGet(id) != MOTO_CUT_SWI_ON) {                                 /// 如没有回位, 需回位
00061a  4630              MOV      r0,r6
00061c  f7fffffe          BL       BSP_SWI_FiGet
000620  2801              CMP      r0,#1
000622  d004              BEQ      |L1.1582|
;;;689            st  =   MOTO_CutIn(id);
000624  4630              MOV      r0,r6
000626  f7fffffe          BL       MOTO_CutIn
00062a  4604              MOV      r4,r0
00062c  e000              B        |L1.1584|
                  |L1.1582|
;;;690        } else {
;;;691            st  =   MOTO_ST_OK;
00062e  2405              MOVS     r4,#5
                  |L1.1584|
;;;692        }
;;;693        
;;;694        if (st == MOTO_ST_OK) {
000630  2c05              CMP      r4,#5
000632  d129              BNE      |L1.1672|
;;;695                                                                                    /// 2/1000S后启动
;;;696            MOTO_Start(id, MOTO_USE_CUT, MOTO_CUT_OUT, BSP_DIP_TQ, BSP_TMR_8M_CLK * 1 / 1000);
000634  f44f53fa          MOV      r3,#0x1f40
000638  4883              LDR      r0,|L1.2120|
00063a  9300              STR      r3,[sp,#0]
00063c  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
00063e  2200              MOVS     r2,#0
000640  2101              MOVS     r1,#1
000642  4630              MOV      r0,r6
000644  f7fffffe          BL       MOTO_Start
;;;697            
;;;698            st  =   MOTO_CutStepUntil(id, MOTO_CUT_OUT_OVER_N, MOTO_CUT_SWI_OFF);   /// 出刀, 直到离开接近开关
000648  2200              MOVS     r2,#0
00064a  f24021ee          MOV      r1,#0x2ee
00064e  4630              MOV      r0,r6
000650  f7fffffe          BL       MOTO_CutStepUntil
000654  4604              MOV      r4,r0
;;;699            switch (st) {
000656  b12c              CBZ      r4,|L1.1636|
000658  2c01              CMP      r4,#1
00065a  d002              BEQ      |L1.1634|
00065c  2c05              CMP      r4,#5
00065e  d105              BNE      |L1.1644|
000660  e002              B        |L1.1640|
                  |L1.1634|
;;;700            case MOTO_ST_PRO:               /// TB6560错误
;;;701                break;
000662  e004              B        |L1.1646|
                  |L1.1636|
;;;702            case MOTO_ST_ACTING:            /// 离开接近开关
;;;703                st  =   MOTO_ST_OK;
000664  2405              MOVS     r4,#5
;;;704                break;
000666  e002              B        |L1.1646|
                  |L1.1640|
;;;705            case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;706                st  =   MOTO_ST_OVTIME;
000668  2402              MOVS     r4,#2
;;;707                break;
00066a  e000              B        |L1.1646|
                  |L1.1644|
;;;708            default:                        /// 其他
;;;709                break;
00066c  bf00              NOP      
                  |L1.1646|
00066e  bf00              NOP                            ;701
;;;710            }
;;;711            
;;;712            if (st == MOTO_ST_OK) {         /// 如果无异常, 到达目标位置
000670  2c05              CMP      r4,#5
000672  d105              BNE      |L1.1664|
;;;713                st  =   MOTO_Step(id, MOTO_USE_CUT, nStep);
000674  462a              MOV      r2,r5
000676  2101              MOVS     r1,#1
000678  4630              MOV      r0,r6
00067a  f7fffffe          BL       MOTO_Step
00067e  4604              MOV      r4,r0
                  |L1.1664|
;;;714            }
;;;715                
;;;716            MOTO_Stop(id, 1);               /// 停止脉冲, 4ms后设置为小电流
000680  2101              MOVS     r1,#1
000682  4630              MOV      r0,r6
000684  f7fffffe          BL       MOTO_Stop
                  |L1.1672|
;;;717        }
;;;718        
;;;719        return  st;    
000688  4620              MOV      r0,r4
;;;720    }
00068a  bdf8              POP      {r3-r7,pc}
;;;721    static  MOTO_ST_TypeDef  MOTO_CutOutH (BSP_ID_TypeDef id, u32 nStep)
                          ENDP

                  MOTO_CutFull PROC
;;;1039   /// ! 以后加入变电流75% -> 100%
;;;1040   static  MOTO_ST_TypeDef  MOTO_CutFull (BSP_ID_TypeDef id)
00068c  e92d41f0          PUSH     {r4-r8,lr}
;;;1041   {
000690  4604              MOV      r4,r0
;;;1042       MOTO_ST_TypeDef     st;
;;;1043       u32                 StepOut;
;;;1044       u32                 StepIn;   
;;;1045       st  =   MOTO_CutOut(id, MOTO_CutFullSteps);
000692  486b              LDR      r0,|L1.2112|
000694  8801              LDRH     r1,[r0,#0]  ; MOTO_CutFullSteps
000696  4620              MOV      r0,r4
000698  f7fffffe          BL       MOTO_CutOut
00069c  4605              MOV      r5,r0
;;;1046       if (st == MOTO_ST_OK) {                         /// 如果无异常, 等待后收回
00069e  2d05              CMP      r5,#5
0006a0  d113              BNE      |L1.1738|
;;;1047           StepOut =   MOTO_ClkNum[id];
0006a2  486b              LDR      r0,|L1.2128|
0006a4  f8506024          LDR      r6,[r0,r4,LSL #2]
;;;1048           st  =   MOTO_CutIn(id);
0006a8  4620              MOV      r0,r4
0006aa  f7fffffe          BL       MOTO_CutIn
0006ae  4605              MOV      r5,r0
;;;1049           if (st == MOTO_ST_OK) {
0006b0  2d05              CMP      r5,#5
0006b2  d10a              BNE      |L1.1738|
;;;1050               StepIn =   MOTO_ClkNum[id];
0006b4  4866              LDR      r0,|L1.2128|
0006b6  f8507024          LDR      r7,[r0,r4,LSL #2]
;;;1051               if ((StepIn + MOTO_CUT_LOOPER_N) < StepOut) {
0006ba  f50770c8          ADD      r0,r7,#0x190
0006be  42b0              CMP      r0,r6
0006c0  d200              BCS      |L1.1732|
;;;1052                   st  =   MOTO_ST_CUTLOOPER;
0006c2  2503              MOVS     r5,#3
                  |L1.1732|
;;;1053               }
;;;1054   			HeadUpDown_Status[id]=1;
0006c4  2001              MOVS     r0,#1
0006c6  495f              LDR      r1,|L1.2116|
0006c8  5508              STRB     r0,[r1,r4]
                  |L1.1738|
;;;1055           }
;;;1056   	  
;;;1057       }
;;;1058       return  st;
0006ca  4628              MOV      r0,r5
;;;1059   }
0006cc  e8bd81f0          POP      {r4-r8,pc}
;;;1060   static  MOTO_ST_TypeDef  MOTO_CutO(BSP_ID_TypeDef id)
                          ENDP

                  MOTO_CutHalf PROC
;;;1029   extern u8 HeadUpDown_Status[];
;;;1030   static  MOTO_ST_TypeDef  MOTO_CutHalf (BSP_ID_TypeDef id)
0006d0  b570              PUSH     {r4-r6,lr}
;;;1031   {	
0006d2  4604              MOV      r4,r0
;;;1032   	MOTO_ST_TypeDef     st;
;;;1033       st= MOTO_CutOut(id, MOTO_CutHalfSteps);
0006d4  485f              LDR      r0,|L1.2132|
0006d6  8801              LDRH     r1,[r0,#0]  ; MOTO_CutHalfSteps
0006d8  4620              MOV      r0,r4
0006da  f7fffffe          BL       MOTO_CutOut
0006de  4605              MOV      r5,r0
;;;1034   	if(st   ==   MOTO_ST_OK)
0006e0  2d05              CMP      r5,#5
0006e2  d102              BNE      |L1.1770|
;;;1035   		HeadUpDown_Status[id]=3;
0006e4  2003              MOVS     r0,#3
0006e6  4957              LDR      r1,|L1.2116|
0006e8  5508              STRB     r0,[r1,r4]
                  |L1.1770|
;;;1036   	return st;
0006ea  4628              MOV      r0,r5
;;;1037   }
0006ec  bd70              POP      {r4-r6,pc}
;;;1038   
                          ENDP

                  MOTO_CutBack PROC
;;;1024   }
;;;1025   static  MOTO_ST_TypeDef  MOTO_CutBack (BSP_ID_TypeDef id)
0006ee  b510              PUSH     {r4,lr}
;;;1026   {
0006f0  4604              MOV      r4,r0
;;;1027       return  MOTO_CutIn(id);
0006f2  4620              MOV      r0,r4
0006f4  f7fffffe          BL       MOTO_CutIn
;;;1028   }
0006f8  bd10              POP      {r4,pc}
;;;1029   extern u8 HeadUpDown_Status[];
                          ENDP

                  MOTO_Cut PROC
;;;1089   }
;;;1090   static  void  MOTO_Cut (BSP_ID_TypeDef id) //任务的执行函数中调用这个函数
0006fa  b508              PUSH     {r3,lr}
;;;1091   {
0006fc  4604              MOV      r4,r0
;;;1092       u8    err;
;;;1093       for ( ; ; ) {
0006fe  bf00              NOP      
                  |L1.1792|
;;;1094           OSSemPend(MOTO_SemCmdPtr[id], 0, &err);             /// 一直等待命令
000700  4955              LDR      r1,|L1.2136|
000702  f8510024          LDR      r0,[r1,r4,LSL #2]
000706  466a              MOV      r2,sp
000708  2100              MOVS     r1,#0
00070a  f7fffffe          BL       OSSemPend
;;;1095           
;;;1096           switch (MOTO_CutCmd[id]) {
00070e  4853              LDR      r0,|L1.2140|
000710  5d00              LDRB     r0,[r0,r4]
000712  380a              SUBS     r0,r0,#0xa
000714  2806              CMP      r0,#6
000716  d23a              BCS      |L1.1934|
000718  e8dff000          TBB      [pc,r0]
00071c  271e030c          DCB      0x27,0x1e,0x03,0x0c
000720  1530              DCB      0x15,0x30
;;;1097           case MOTO_CUT_BACK:
;;;1098               MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
000722  2000              MOVS     r0,#0
000724  494e              LDR      r1,|L1.2144|
000726  5508              STRB     r0,[r1,r4]
;;;1099                                                               /// 实际上, 命令后此句之前就是MOTO_ST_ACTING状态
;;;1100               MOTO_State[id]  =   MOTO_CutBack(id);
000728  4620              MOV      r0,r4
00072a  f7fffffe          BL       MOTO_CutBack
00072e  494c              LDR      r1,|L1.2144|
000730  5508              STRB     r0,[r1,r4]
;;;1101               break;
000732  e02d              B        |L1.1936|
;;;1102           case MOTO_CUT_HALF:
;;;1103               MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
000734  2000              MOVS     r0,#0
000736  494a              LDR      r1,|L1.2144|
000738  5508              STRB     r0,[r1,r4]
;;;1104               MOTO_State[id]  =   MOTO_CutHalf(id);
00073a  4620              MOV      r0,r4
00073c  f7fffffe          BL       MOTO_CutHalf
000740  4947              LDR      r1,|L1.2144|
000742  5508              STRB     r0,[r1,r4]
;;;1105               break;
000744  e024              B        |L1.1936|
;;;1106           case MOTO_CUT_FULL:
;;;1107               MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
000746  2000              MOVS     r0,#0
000748  4945              LDR      r1,|L1.2144|
00074a  5508              STRB     r0,[r1,r4]
;;;1108               MOTO_State[id]  =   MOTO_CutFull(id);
00074c  4620              MOV      r0,r4
00074e  f7fffffe          BL       MOTO_CutFull
000752  4943              LDR      r1,|L1.2144|
000754  5508              STRB     r0,[r1,r4]
;;;1109               break;
000756  e01b              B        |L1.1936|
;;;1110   		case MOTO_CUT_H:
;;;1111   			MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
000758  2000              MOVS     r0,#0
00075a  4941              LDR      r1,|L1.2144|
00075c  5508              STRB     r0,[r1,r4]
;;;1112               MOTO_State[id]  =   MOTO_CutH(id);
00075e  4620              MOV      r0,r4
000760  f7fffffe          BL       MOTO_CutH
000764  493e              LDR      r1,|L1.2144|
000766  5508              STRB     r0,[r1,r4]
;;;1113   			break;
000768  e012              B        |L1.1936|
;;;1114   		case MOTO_CUT_D:
;;;1115   			MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
00076a  2000              MOVS     r0,#0
00076c  493c              LDR      r1,|L1.2144|
00076e  5508              STRB     r0,[r1,r4]
;;;1116               MOTO_State[id]  =   MOTO_CutD(id);
000770  4620              MOV      r0,r4
000772  f7fffffe          BL       MOTO_CutD
000776  493a              LDR      r1,|L1.2144|
000778  5508              STRB     r0,[r1,r4]
;;;1117   			break;
00077a  e009              B        |L1.1936|
;;;1118   		case MOTO_CUT_O:
;;;1119   			MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_CUT_CMD_NONE 保证
00077c  2000              MOVS     r0,#0
00077e  4938              LDR      r1,|L1.2144|
000780  5508              STRB     r0,[r1,r4]
;;;1120               MOTO_State[id]  =   MOTO_CutO(id);
000782  4620              MOV      r0,r4
000784  f7fffffe          BL       MOTO_CutO
000788  4935              LDR      r1,|L1.2144|
00078a  5508              STRB     r0,[r1,r4]
;;;1121   			break;
00078c  e000              B        |L1.1936|
                  |L1.1934|
;;;1122           default:
;;;1123               break;
00078e  bf00              NOP      
                  |L1.1936|
000790  bf00              NOP                            ;1101
;;;1124           }
;;;1125           MOTO_CutCmd[id]     =   (MOTO_CUT_CMD_TypeDef)MOTO_CUT_CMD_NONE;
000792  2000              MOVS     r0,#0
000794  4931              LDR      r1,|L1.2140|
000796  5508              STRB     r0,[r1,r4]
000798  e7b2              B        |L1.1792|
;;;1126       }
;;;1127   }
;;;1128   
                          ENDP

                  MOTO_TaskCutEven PROC
;;;1133   
;;;1134   static  void  MOTO_TaskCutEven (void *data)
00079a  2001              MOVS     r0,#1
;;;1135   {
;;;1136       MOTO_Cut(BSP_ID_EVEN);
00079c  f7fffffe          BL       MOTO_Cut
;;;1137   }
;;;1138   static  void                MOTO_TaskHghCutNoth    (void *data)
                          ENDP

                  MOTO_TaskHghCutNoth PROC
0007a0  4770              BX       lr
;;;1139   {
;;;1140   ;
;;;1141   }
;;;1142   
                          ENDP

                  MOTO_TaskCutOdd PROC
;;;1128   
;;;1129   static  void  MOTO_TaskCutOdd (void *data)//任务的执行函数
0007a2  2000              MOVS     r0,#0
;;;1130   {
;;;1131       MOTO_Cut(BSP_ID_ODD);
0007a4  f7fffffe          BL       MOTO_Cut
;;;1132   }
;;;1133   
                          ENDP

                  MOTO_Init PROC
;;;318    
;;;319    void  MOTO_Init (MOTO_USE_TypeDef odd, MOTO_USE_TypeDef even)
0007a8  b570              PUSH     {r4-r6,lr}
;;;320    {
0007aa  b086              SUB      sp,sp,#0x18
0007ac  4605              MOV      r5,r0
0007ae  460e              MOV      r6,r1
;;;321        u32         i;
;;;322        
;;;323      
;;;324    	    if (odd == MOTO_USE_CUT) {
0007b0  2d01              CMP      r5,#1
0007b2  d103              BNE      |L1.1980|
;;;325            MOTO_TaskFunc[BSP_ID_ODD]   = MOTO_TaskHghCutNoth;
0007b4  482b              LDR      r0,|L1.2148|
0007b6  492c              LDR      r1,|L1.2152|
0007b8  6008              STR      r0,[r1,#0]  ; MOTO_TaskFunc
0007ba  e002              B        |L1.1986|
                  |L1.1980|
;;;326        	} else {
;;;327            MOTO_TaskFunc[BSP_ID_ODD]   =   MOTO_TaskCutOdd;
0007bc  482b              LDR      r0,|L1.2156|
0007be  492a              LDR      r1,|L1.2152|
0007c0  6008              STR      r0,[r1,#0]  ; MOTO_TaskFunc
                  |L1.1986|
;;;328        	}
;;;329        	if (even == MOTO_USE_CUT) {
0007c2  2e01              CMP      r6,#1
0007c4  d103              BNE      |L1.1998|
;;;330            MOTO_TaskFunc[BSP_ID_EVEN]  =   MOTO_TaskHghCutNoth;
0007c6  4827              LDR      r0,|L1.2148|
0007c8  4927              LDR      r1,|L1.2152|
0007ca  6048              STR      r0,[r1,#4]  ; MOTO_TaskFunc
0007cc  e002              B        |L1.2004|
                  |L1.1998|
;;;331        	} else {
;;;332            MOTO_TaskFunc[BSP_ID_EVEN]  =   MOTO_TaskCutEven;
0007ce  4828              LDR      r0,|L1.2160|
0007d0  4925              LDR      r1,|L1.2152|
0007d2  6048              STR      r0,[r1,#4]  ; MOTO_TaskFunc
                  |L1.2004|
;;;333        	}	
;;;334    	
;;;335        
;;;336        for (i = 0; i < BSP_DEVICE_ID_N; i++) {
0007d4  2400              MOVS     r4,#0
0007d6  e027              B        |L1.2088|
                  |L1.2008|
;;;337            MOTO_SemIrqPtr[i]   =   OSSemCreate(0);                         /// 初始化中断使用的信号量
0007d8  2000              MOVS     r0,#0
0007da  f7fffffe          BL       OSSemCreate
0007de  4925              LDR      r1,|L1.2164|
0007e0  f8410024          STR      r0,[r1,r4,LSL #2]
;;;338            MOTO_SemCmdPtr[i]   =   OSSemCreate(0);                         /// 初始化其他任务使用的信号量
0007e4  2000              MOVS     r0,#0
0007e6  f7fffffe          BL       OSSemCreate
0007ea  491b              LDR      r1,|L1.2136|
0007ec  f8410024          STR      r0,[r1,r4,LSL #2]
;;;339        
;;;340            /// 建立奇数头开环电机任务
;;;341            OSTaskCreateExt((void (*)(void *)) MOTO_TaskFunc[i],            /// 任务函数入口(指针)
0007f0  2303              MOVS     r3,#3
0007f2  2200              MOVS     r2,#0
0007f4  f44f7180          MOV      r1,#0x100
0007f8  481f              LDR      r0,|L1.2168|
0007fa  eb002084          ADD      r0,r0,r4,LSL #10
0007fe  e9cd2303          STRD     r2,r3,[sp,#0xc]
000802  e9cd0101          STRD     r0,r1,[sp,#4]
000806  481d              LDR      r0,|L1.2172|
000808  5d03              LDRB     r3,[r0,r4]
00080a  4601              MOV      r1,r0
00080c  9300              STR      r3,[sp,#0]
00080e  5d0b              LDRB     r3,[r1,r4]
000810  4919              LDR      r1,|L1.2168|
000812  eb012184          ADD      r1,r1,r4,LSL #10
000816  f501727f          ADD      r2,r1,#0x3fc
00081a  4913              LDR      r1,|L1.2152|
00081c  f8510024          LDR      r0,[r1,r4,LSL #2]
000820  2100              MOVS     r1,#0
000822  f7fffffe          BL       OSTaskCreateExt
000826  1c64              ADDS     r4,r4,#1              ;336
                  |L1.2088|
000828  2c02              CMP      r4,#2                 ;336
00082a  d3d5              BCC      |L1.2008|
;;;342                            (void          * ) 0,                           /// 函数参数指针
;;;343                                                                            /// 栈顶指针
;;;344                            (OS_STK        * )&MOTO_TaskMotoStk[i][APP_TASK_MOTO_STK_SIZE - 1],
;;;345                            (u8              ) MOTO_TaskPrio[i],            /// 优先级
;;;346                            (u16             ) MOTO_TaskPrio[i],            /// ID标识, 暂与优先级相同
;;;347                            (OS_STK        * )&MOTO_TaskMotoStk[i][0],      /// 栈底指针
;;;348                            (u32             ) APP_TASK_MOTO_STK_SIZE,      /// 栈空间大小, 单位为OS_STK
;;;349                            (void          * ) 0,                           /// TCB扩展, 附属信息
;;;350                                                                            /// 操作信息
;;;351                            (u16             )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;352        }
;;;353    }
00082c  b006              ADD      sp,sp,#0x18
00082e  bd70              POP      {r4-r6,pc}
;;;354    
                          ENDP

                  MOTO_SetSpdEngine PROC
;;;355    void  MOTO_SetSpdEngine (MOTO_USE_TypeDef use, u8 engine)
000830  2801              CMP      r0,#1
;;;356    {
;;;357        if (use == MOTO_USE_CUT) {
000832  d12b              BNE      |L1.2188|
;;;358            if (engine < MOTO_CUT_SPD_MAX_ENGINE) {
000834  2904              CMP      r1,#4
000836  da25              BGE      |L1.2180|
;;;359                MOTO_CutSpdEngine   =   engine;
000838  4a11              LDR      r2,|L1.2176|
00083a  8011              STRH     r1,[r2,#0]
00083c  e02f              B        |L1.2206|
00083e  0000              DCW      0x0000
                  |L1.2112|
                          DCD      MOTO_CutFullSteps
                  |L1.2116|
                          DCD      HeadUpDown_Status
                  |L1.2120|
                          DCD      BSP_DIP_TQ
                  |L1.2124|
                          DCD      MOTO_CUT_IN_OVER_N
                  |L1.2128|
                          DCD      MOTO_ClkNum
                  |L1.2132|
                          DCD      MOTO_CutHalfSteps
                  |L1.2136|
                          DCD      MOTO_SemCmdPtr
                  |L1.2140|
                          DCD      MOTO_CutCmd
                  |L1.2144|
                          DCD      MOTO_State
                  |L1.2148|
                          DCD      MOTO_TaskHghCutNoth
                  |L1.2152|
                          DCD      MOTO_TaskFunc
                  |L1.2156|
                          DCD      MOTO_TaskCutOdd
                  |L1.2160|
                          DCD      MOTO_TaskCutEven
                  |L1.2164|
                          DCD      MOTO_SemIrqPtr
                  |L1.2168|
                          DCD      MOTO_TaskMotoStk
                  |L1.2172|
                          DCD      MOTO_TaskPrio
                  |L1.2176|
                          DCD      MOTO_CutSpdEngine
                  |L1.2180|
;;;360            } else {
;;;361                MOTO_CutSpdEngine   =   MOTO_CUT_SPD_MAX_ENGINE - 1;
000884  2203              MOVS     r2,#3
000886  4bff              LDR      r3,|L1.3204|
000888  801a              STRH     r2,[r3,#0]
00088a  e008              B        |L1.2206|
                  |L1.2188|
;;;362            }
;;;363        } else if (use == MOTO_USE_HGH) {
00088c  b938              CBNZ     r0,|L1.2206|
;;;364            if (engine < MOTO_HGH_SPD_MAX_ENGINE) {
00088e  2904              CMP      r1,#4
000890  da02              BGE      |L1.2200|
;;;365                MOTO_HghSpdEngine   =   engine;
000892  4afd              LDR      r2,|L1.3208|
000894  8011              STRH     r1,[r2,#0]
000896  e002              B        |L1.2206|
                  |L1.2200|
;;;366            } else {
;;;367                MOTO_HghSpdEngine   =   MOTO_HGH_SPD_MAX_ENGINE - 1;
000898  2203              MOVS     r2,#3
00089a  4bfb              LDR      r3,|L1.3208|
00089c  801a              STRH     r2,[r3,#0]
                  |L1.2206|
;;;368            }
;;;369        }
;;;370    }
00089e  4770              BX       lr
;;;371    
                          ENDP

                  MOTO_CutSetFullAngle PROC
;;;372    void  MOTO_CutSetFullAngle (u8 n10du)
0008a0  eb000180          ADD      r1,r0,r0,LSL #2
;;;373    {
;;;374        /// 参数为u8, 不用检查参数范围
;;;375        MOTO_CutFullSteps   =   n10du * 10 * MOTO_N_P_PR / 360;
0008a4  0049              LSLS     r1,r1,#1
0008a6  f44f62c8          MOV      r2,#0x640
0008aa  4351              MULS     r1,r2,r1
0008ac  f44f72b4          MOV      r2,#0x168
0008b0  fb91f1f2          SDIV     r1,r1,r2
0008b4  4af5              LDR      r2,|L1.3212|
0008b6  8011              STRH     r1,[r2,#0]
;;;376    }
0008b8  4770              BX       lr
;;;377    
                          ENDP

                  MOTO_CutSetHalfAngle PROC
;;;378    void  MOTO_CutSetHalfAngle (u8 n10du)
0008ba  eb000180          ADD      r1,r0,r0,LSL #2
;;;379    {
;;;380        /// 参数为u8, 不用检查参数范围
;;;381        MOTO_CutHalfSteps   =   n10du * 10 * MOTO_N_P_PR / 360;
0008be  0049              LSLS     r1,r1,#1
0008c0  f44f62c8          MOV      r2,#0x640
0008c4  4351              MULS     r1,r2,r1
0008c6  f44f72b4          MOV      r2,#0x168
0008ca  fb91f1f2          SDIV     r1,r1,r2
0008ce  4af0              LDR      r2,|L1.3216|
0008d0  8011              STRH     r1,[r2,#0]
;;;382    }
0008d2  4770              BX       lr
;;;383    void  MOTO_TKSetFullAngle (u8 n10du)
                          ENDP

                  MOTO_TKSetFullAngle PROC
0008d4  f44f61c8          MOV      r1,#0x640
;;;384    {
;;;385        /// 参数为u8, 不用检查参数范围
;;;386        MOTO_CutFullSteps   =   n10du  * MOTO_N_P_PR / 360;
0008d8  4341              MULS     r1,r0,r1
0008da  f44f72b4          MOV      r2,#0x168
0008de  fb91f1f2          SDIV     r1,r1,r2
0008e2  4aea              LDR      r2,|L1.3212|
0008e4  8011              STRH     r1,[r2,#0]
;;;387    }
0008e6  4770              BX       lr
;;;388    
                          ENDP

                  MOTO_TKSetHalfAngle PROC
;;;389    void  MOTO_TKSetHalfAngle (u8 n10du)
0008e8  f44f61c8          MOV      r1,#0x640
;;;390    {
;;;391        /// 参数为u8, 不用检查参数范围
;;;392        MOTO_CutHalfSteps   =   n10du  * MOTO_N_P_PR / 360;
0008ec  4341              MULS     r1,r0,r1
0008ee  f44f72b4          MOV      r2,#0x168
0008f2  fb91f1f2          SDIV     r1,r1,r2
0008f6  4ae6              LDR      r2,|L1.3216|
0008f8  8011              STRH     r1,[r2,#0]
;;;393    }
0008fa  4770              BX       lr
;;;394    MOTO_ST_TypeDef  MOTO_CutGetState (BSP_ID_TypeDef id)
                          ENDP

                  MOTO_CutGetState PROC
0008fc  b570              PUSH     {r4-r6,lr}
;;;395    {
0008fe  4604              MOV      r4,r0
;;;396    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;397        OS_CPU_SR  cpu_sr = 0;
000900  2600              MOVS     r6,#0
;;;398    #endif
;;;399        MOTO_ST_TypeDef     rt;
;;;400        
;;;401        
;;;402        if ((id >= BSP_DEVICE_ID_N) || (MOTO_CutCmd[id] != MOTO_CUT_CMD_NONE)) {
000902  2c02              CMP      r4,#2
000904  da02              BGE      |L1.2316|
000906  48e3              LDR      r0,|L1.3220|
000908  5d00              LDRB     r0,[r0,r4]
00090a  b108              CBZ      r0,|L1.2320|
                  |L1.2316|
;;;403            return  MOTO_ST_ACTING;
00090c  2000              MOVS     r0,#0
                  |L1.2318|
;;;404        } else {
;;;405            /// 报告错误后, 如果无动作则报告正确. !原来协议要求
;;;406            OS_ENTER_CRITICAL();
;;;407            rt              =   MOTO_State[id];
;;;408            MOTO_State[id]  =   MOTO_ST_OK;
;;;409            OS_EXIT_CRITICAL();
;;;410            return  rt;
;;;411        }
;;;412    }
00090e  bd70              POP      {r4-r6,pc}
                  |L1.2320|
000910  f7fffffe          BL       OS_CPU_SR_Save
000914  4606              MOV      r6,r0                 ;406
000916  48e0              LDR      r0,|L1.3224|
000918  5d05              LDRB     r5,[r0,r4]            ;407
00091a  2005              MOVS     r0,#5                 ;408
00091c  49de              LDR      r1,|L1.3224|
00091e  5508              STRB     r0,[r1,r4]            ;408
000920  4630              MOV      r0,r6                 ;409
000922  f7fffffe          BL       OS_CPU_SR_Restore
000926  4628              MOV      r0,r5                 ;410
000928  e7f1              B        |L1.2318|
;;;413    
                          ENDP

                  MOTO_CutGetIsActing PROC
;;;414    bool  MOTO_CutGetIsActing (BSP_ID_TypeDef id)
00092a  4601              MOV      r1,r0
;;;415    {
;;;416        if (   (id >= BSP_DEVICE_ID_N)
00092c  2902              CMP      r1,#2
00092e  da05              BGE      |L1.2364|
;;;417            || (MOTO_CutCmd[id] != MOTO_CUT_CMD_NONE)
000930  48d8              LDR      r0,|L1.3220|
000932  5c40              LDRB     r0,[r0,r1]
000934  b910              CBNZ     r0,|L1.2364|
;;;418            || (MOTO_State[id] == MOTO_ST_ACTING)   ) {
000936  48d8              LDR      r0,|L1.3224|
000938  5c40              LDRB     r0,[r0,r1]
00093a  b908              CBNZ     r0,|L1.2368|
                  |L1.2364|
;;;419            return  TRUE;
00093c  2001              MOVS     r0,#1
                  |L1.2366|
;;;420        } else {
;;;421            return  FALSE;
;;;422        }
;;;423    }
00093e  4770              BX       lr
                  |L1.2368|
000940  2000              MOVS     r0,#0                 ;421
000942  e7fc              B        |L1.2366|
;;;424    
                          ENDP

                  MOTO_CutSetCmd PROC
;;;425    void  MOTO_CutSetCmd (BSP_ID_TypeDef id, MOTO_CUT_CMD_TypeDef cmd)
000944  b570              PUSH     {r4-r6,lr}
;;;426    {
000946  4605              MOV      r5,r0
000948  460c              MOV      r4,r1
;;;427        if (   (id < BSP_DEVICE_ID_N)
00094a  2d02              CMP      r5,#2
00094c  da13              BGE      |L1.2422|
;;;428            && ((cmd == MOTO_CUT_BACK) || (cmd == MOTO_CUT_HALF) || (cmd == MOTO_CUT_FULL)|| (cmd == MOTO_CUT_D) || (cmd == MOTO_CUT_H))
00094e  2c0c              CMP      r4,#0xc
000950  d007              BEQ      |L1.2402|
000952  2c0d              CMP      r4,#0xd
000954  d005              BEQ      |L1.2402|
000956  2c0e              CMP      r4,#0xe
000958  d003              BEQ      |L1.2402|
00095a  2c0a              CMP      r4,#0xa
00095c  d001              BEQ      |L1.2402|
00095e  2c0b              CMP      r4,#0xb
000960  d109              BNE      |L1.2422|
                  |L1.2402|
;;;429            && (MOTO_CutCmd[id] == MOTO_CUT_CMD_NONE)   ) {
000962  48cc              LDR      r0,|L1.3220|
000964  5d40              LDRB     r0,[r0,r5]
000966  b930              CBNZ     r0,|L1.2422|
;;;430            MOTO_CutCmd[id] =   cmd;
000968  48ca              LDR      r0,|L1.3220|
00096a  5544              STRB     r4,[r0,r5]
;;;431            OSSemPost(MOTO_SemCmdPtr[id]);
00096c  49cb              LDR      r1,|L1.3228|
00096e  f8510025          LDR      r0,[r1,r5,LSL #2]
000972  f7fffffe          BL       OSSemPost
                  |L1.2422|
;;;432        }
;;;433    }
000976  bd70              POP      {r4-r6,pc}
;;;434    
                          ENDP

                  MOTO_HghGetHeight PROC
;;;435    u8  MOTO_HghGetHeight (BSP_ID_TypeDef id)
000978  4601              MOV      r1,r0
;;;436    {
;;;437        if ((id < BSP_DEVICE_ID_N) && (MOTO_HghHeight[id] < MOTO_HGH_POS_NUM)) {
00097a  2902              CMP      r1,#2
00097c  da06              BGE      |L1.2444|
00097e  48c8              LDR      r0,|L1.3232|
000980  5c40              LDRB     r0,[r0,r1]
000982  280b              CMP      r0,#0xb
000984  da02              BGE      |L1.2444|
;;;438            return  MOTO_HghHeight[id];
000986  48c6              LDR      r0,|L1.3232|
000988  5c40              LDRB     r0,[r0,r1]
                  |L1.2442|
;;;439        } else {
;;;440            return  MOTO_HGH_POS_ERR;
;;;441        }
;;;442    }
00098a  4770              BX       lr
                  |L1.2444|
00098c  200b              MOVS     r0,#0xb               ;440
00098e  e7fc              B        |L1.2442|
;;;443    
                          ENDP

                  MOTO_HghGetFromPot PROC
;;;1153   
;;;1154   static  u8  MOTO_HghGetFromPot (u16 pot)
000990  4601              MOV      r1,r0
;;;1155   {
;;;1156       u8      high;
;;;1157       
;;;1158       
;;;1159       if (pot < MOTO_HGH_POT_DN0) {
000992  f5b16f80          CMP      r1,#0x400
000996  d201              BCS      |L1.2460|
;;;1160           high    =   MOTO_HGH_POS_ERR_DN;
000998  200b              MOVS     r0,#0xb
00099a  e03e              B        |L1.2586|
                  |L1.2460|
;;;1161       } else if (pot <= MOTO_HGH_POT_UP0) {
00099c  f5b16f60          CMP      r1,#0xe00
0009a0  d801              BHI      |L1.2470|
;;;1162           high    =   0;
0009a2  2000              MOVS     r0,#0
0009a4  e039              B        |L1.2586|
                  |L1.2470|
;;;1163       } else if (pot <= MOTO_HGH_POT_UP1) {
0009a6  f5b15fb0          CMP      r1,#0x1600
0009aa  d801              BHI      |L1.2480|
;;;1164           high    =   1;
0009ac  2001              MOVS     r0,#1
0009ae  e034              B        |L1.2586|
                  |L1.2480|
;;;1165       } else if (pot <= MOTO_HGH_POT_UP2) {
0009b0  f5b15ff0          CMP      r1,#0x1e00
0009b4  d801              BHI      |L1.2490|
;;;1166           high    =   2;
0009b6  2002              MOVS     r0,#2
0009b8  e02f              B        |L1.2586|
                  |L1.2490|
;;;1167       } else if (pot <= MOTO_HGH_POT_UP3) {
0009ba  f5b15f18          CMP      r1,#0x2600
0009be  d801              BHI      |L1.2500|
;;;1168           high    =   3;
0009c0  2003              MOVS     r0,#3
0009c2  e02a              B        |L1.2586|
                  |L1.2500|
;;;1169       } else if (pot <= MOTO_HGH_POT_UP4) {
0009c4  f5b15f38          CMP      r1,#0x2e00
0009c8  d801              BHI      |L1.2510|
;;;1170           high    =   4;
0009ca  2004              MOVS     r0,#4
0009cc  e025              B        |L1.2586|
                  |L1.2510|
;;;1171       } else if (pot <= MOTO_HGH_POT_UP5) {
0009ce  f5b15f58          CMP      r1,#0x3600
0009d2  d801              BHI      |L1.2520|
;;;1172           high    =   5;
0009d4  2005              MOVS     r0,#5
0009d6  e020              B        |L1.2586|
                  |L1.2520|
;;;1173       } else if (pot <= MOTO_HGH_POT_UP6) {
0009d8  f5b15f78          CMP      r1,#0x3e00
0009dc  d801              BHI      |L1.2530|
;;;1174           high    =   6;
0009de  2006              MOVS     r0,#6
0009e0  e01b              B        |L1.2586|
                  |L1.2530|
;;;1175       } else if (pot <= MOTO_HGH_POT_UP7) {
0009e2  f5b14f8c          CMP      r1,#0x4600
0009e6  d801              BHI      |L1.2540|
;;;1176           high    =   7;
0009e8  2007              MOVS     r0,#7
0009ea  e016              B        |L1.2586|
                  |L1.2540|
;;;1177       } else if (pot <= MOTO_HGH_POT_UP8) {
0009ec  f5b14f9c          CMP      r1,#0x4e00
0009f0  d801              BHI      |L1.2550|
;;;1178           high    =   8;
0009f2  2008              MOVS     r0,#8
0009f4  e011              B        |L1.2586|
                  |L1.2550|
;;;1179       } else if (pot <= MOTO_HGH_POT_UP9) {
0009f6  f5b14fac          CMP      r1,#0x5600
0009fa  d801              BHI      |L1.2560|
;;;1180           high    =   9;
0009fc  2009              MOVS     r0,#9
0009fe  e00c              B        |L1.2586|
                  |L1.2560|
;;;1181       } else if (pot < MOTO_HGH_POT_DN10) {
000a00  f64c0266          MOV      r2,#0xc866
000a04  4291              CMP      r1,r2
000a06  d201              BCS      |L1.2572|
;;;1182           high    =   MOTO_HGH_POS_ERR_MD;
000a08  200c              MOVS     r0,#0xc
000a0a  e006              B        |L1.2586|
                  |L1.2572|
;;;1183       } else if (pot <= MOTO_HGH_POT_UP10) {
000a0c  f64d3299          MOV      r2,#0xdb99
000a10  4291              CMP      r1,r2
000a12  d801              BHI      |L1.2584|
;;;1184           high    =   10;
000a14  200a              MOVS     r0,#0xa
000a16  e000              B        |L1.2586|
                  |L1.2584|
;;;1185       } else {
;;;1186           high    =   MOTO_HGH_POS_ERR_UP;
000a18  200d              MOVS     r0,#0xd
                  |L1.2586|
;;;1187       }
;;;1188       
;;;1189       return  high;
;;;1190   }
000a1a  4770              BX       lr
;;;1191   static  MOTO_ST_TypeDef  MOTO_HghStepUntil (BSP_ID_TypeDef id, u32 nStep, u16 value)
                          ENDP

                  MOTO_HghTestIsUp PROC
;;;443    
;;;444    bool  MOTO_HghTestIsUp (BSP_ID_TypeDef id, u8 time)
000a1c  e92d41f0          PUSH     {r4-r8,lr}
;;;445    {
000a20  4606              MOV      r6,r0
000a22  460c              MOV      r4,r1
;;;446        u8  i;
;;;447        
;;;448        
;;;449        if ((id < BSP_DEVICE_ID_N) && (time <= 20)) {
000a24  2e02              CMP      r6,#2
000a26  da14              BGE      |L1.2642|
000a28  2c14              CMP      r4,#0x14
000a2a  dc12              BGT      |L1.2642|
;;;450            for (i = 0; i < time; i++) {
000a2c  2500              MOVS     r5,#0
000a2e  e00c              B        |L1.2634|
                  |L1.2608|
;;;451                if (MOTO_HghGetFromPot(BSP_POT_GetOne(id)) == MOTO_HGH_POS_UP) {
000a30  4630              MOV      r0,r6
000a32  f7fffffe          BL       BSP_POT_GetOne
000a36  4607              MOV      r7,r0
000a38  f7fffffe          BL       MOTO_HghGetFromPot
000a3c  280a              CMP      r0,#0xa
000a3e  d102              BNE      |L1.2630|
;;;452                    return  TRUE;
000a40  2001              MOVS     r0,#1
                  |L1.2626|
;;;453                }
;;;454            }
;;;455            return  FALSE;
;;;456        } else {
;;;457            return  TRUE;
;;;458        }
;;;459    }
000a42  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2630|
000a46  1c68              ADDS     r0,r5,#1              ;450
000a48  b2c5              UXTB     r5,r0                 ;450
                  |L1.2634|
000a4a  42a5              CMP      r5,r4                 ;450
000a4c  dbf0              BLT      |L1.2608|
000a4e  2000              MOVS     r0,#0                 ;455
000a50  e7f7              B        |L1.2626|
                  |L1.2642|
000a52  2001              MOVS     r0,#1                 ;457
000a54  e7f5              B        |L1.2626|
;;;460    
                          ENDP

                  MOTO_HghGetState PROC
;;;461    MOTO_ST_TypeDef  MOTO_HghGetState (BSP_ID_TypeDef id)
000a56  b570              PUSH     {r4-r6,lr}
;;;462    {    
000a58  4604              MOV      r4,r0
;;;463    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;464        OS_CPU_SR  cpu_sr = 0;
000a5a  2600              MOVS     r6,#0
;;;465    #endif
;;;466        MOTO_ST_TypeDef     rt;
;;;467        
;;;468        
;;;469        if ((id >= BSP_DEVICE_ID_N) || (MOTO_HghCmd[id] != MOTO_HGH_CMD_NONE)) {
000a5c  2c02              CMP      r4,#2
000a5e  da03              BGE      |L1.2664|
000a60  4890              LDR      r0,|L1.3236|
000a62  5d00              LDRB     r0,[r0,r4]
000a64  28ff              CMP      r0,#0xff
000a66  d001              BEQ      |L1.2668|
                  |L1.2664|
;;;470            return  MOTO_ST_ACTING;
000a68  2000              MOVS     r0,#0
                  |L1.2666|
;;;471        } else {
;;;472            /// 报告错误后, 如果无动作则报告正确. !原来协议要求
;;;473            OS_ENTER_CRITICAL();
;;;474            rt              =   MOTO_State[id];
;;;475            MOTO_State[id]  =   MOTO_ST_OK;
;;;476            OS_EXIT_CRITICAL();
;;;477            return  rt;
;;;478        }
;;;479    }
000a6a  bd70              POP      {r4-r6,pc}
                  |L1.2668|
000a6c  f7fffffe          BL       OS_CPU_SR_Save
000a70  4606              MOV      r6,r0                 ;473
000a72  4889              LDR      r0,|L1.3224|
000a74  5d05              LDRB     r5,[r0,r4]            ;474
000a76  2005              MOVS     r0,#5                 ;475
000a78  4987              LDR      r1,|L1.3224|
000a7a  5508              STRB     r0,[r1,r4]            ;475
000a7c  4630              MOV      r0,r6                 ;476
000a7e  f7fffffe          BL       OS_CPU_SR_Restore
000a82  4628              MOV      r0,r5                 ;477
000a84  e7f1              B        |L1.2666|
;;;480    
                          ENDP

                  MOTO_HghGetIsActing PROC
;;;481    bool  MOTO_HghGetIsActing (BSP_ID_TypeDef id)
000a86  4601              MOV      r1,r0
;;;482    {
;;;483        if (   (id >= BSP_DEVICE_ID_N)
000a88  2902              CMP      r1,#2
000a8a  da05              BGE      |L1.2712|
;;;484            || (MOTO_CutCmd[id] != MOTO_CUT_CMD_NONE)
000a8c  4881              LDR      r0,|L1.3220|
000a8e  5c40              LDRB     r0,[r0,r1]
000a90  b910              CBNZ     r0,|L1.2712|
;;;485            || (MOTO_State[id] == MOTO_ST_ACTING)   ) {
000a92  4881              LDR      r0,|L1.3224|
000a94  5c40              LDRB     r0,[r0,r1]
000a96  b908              CBNZ     r0,|L1.2716|
                  |L1.2712|
;;;486            return  TRUE;
000a98  2001              MOVS     r0,#1
                  |L1.2714|
;;;487        } else {
;;;488            return  FALSE;
;;;489        }
;;;490    }
000a9a  4770              BX       lr
                  |L1.2716|
000a9c  2000              MOVS     r0,#0                 ;488
000a9e  e7fc              B        |L1.2714|
;;;491    
                          ENDP

                  MOTO_HghSetCmd PROC
;;;492    void  MOTO_HghSetCmd (BSP_ID_TypeDef id, MOTO_HGH_CMD_TypeDef cmd)
000aa0  b570              PUSH     {r4-r6,lr}
;;;493    {
000aa2  4604              MOV      r4,r0
000aa4  460d              MOV      r5,r1
;;;494        if (   (id < BSP_DEVICE_ID_N)
000aa6  2c02              CMP      r4,#2
000aa8  da0c              BGE      |L1.2756|
;;;495            && (cmd < MOTO_HGH_POS_NUM)
000aaa  2d0b              CMP      r5,#0xb
000aac  da0a              BGE      |L1.2756|
;;;496            && (MOTO_HghCmd[id] == MOTO_HGH_CMD_NONE)   ) {
000aae  487d              LDR      r0,|L1.3236|
000ab0  5d00              LDRB     r0,[r0,r4]
000ab2  28ff              CMP      r0,#0xff
000ab4  d106              BNE      |L1.2756|
;;;497            MOTO_HghCmd[id] =   cmd;
000ab6  487b              LDR      r0,|L1.3236|
000ab8  5505              STRB     r5,[r0,r4]
;;;498            OSSemPost(MOTO_SemCmdPtr[id]);
000aba  4978              LDR      r1,|L1.3228|
000abc  f8510024          LDR      r0,[r1,r4,LSL #2]
000ac0  f7fffffe          BL       OSSemPost
                  |L1.2756|
;;;499        }
;;;500    }
000ac4  bd70              POP      {r4-r6,pc}
;;;501    
                          ENDP

                  MOTO_HghPotGetAve PROC
;;;1143   
;;;1144   static  u16  MOTO_HghPotGetAve (BSP_ID_TypeDef id)
000ac6  b510              PUSH     {r4,lr}
;;;1145   {
000ac8  4604              MOV      r4,r0
;;;1146   #ifndef  PC924                                              /// for PC9511
;;;1147       return  BSP_POT_GetAve(id);
000aca  4620              MOV      r0,r4
000acc  f7fffffe          BL       BSP_POT_GetAve
;;;1148   #else                                                       /// for PC924
;;;1149       return  (1 << 16) - 1 - BSP_POT_GetAve(id);
;;;1150   #endif
;;;1151   
;;;1152   }
000ad0  bd10              POP      {r4,pc}
;;;1153   
                          ENDP

                  MOTO_HghStepUntil PROC
;;;1190   }
;;;1191   static  MOTO_ST_TypeDef  MOTO_HghStepUntil (BSP_ID_TypeDef id, u32 nStep, u16 value)
000ad2  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1192   {
000ad6  b084              SUB      sp,sp,#0x10
000ad8  4604              MOV      r4,r0
000ada  4691              MOV      r9,r2
;;;1193       u32     i;
;;;1194       u8      err;
;;;1195       u16     last;
;;;1196       u16     now;
;;;1197       s32     dislast;
;;;1198       s32     disnow;
;;;1199       u32     rev;
;;;1200       u32     slow;
;;;1201       u32     SpdGear;
;;;1202       
;;;1203       
;;;1204       /// 内部函数, 不检查参数范围
;;;1205       
;;;1206       now     =   MOTO_HghPotGetAve(id);
000adc  4620              MOV      r0,r4
000ade  f7fffffe          BL       MOTO_HghPotGetAve
000ae2  4606              MOV      r6,r0
;;;1207       rev     =   0;
000ae4  2000              MOVS     r0,#0
000ae6  9001              STR      r0,[sp,#4]
;;;1208       slow    =   MOTO_HGH_SPD_MAX_GEAR;
000ae8  f04f080a          MOV      r8,#0xa
;;;1209       
;;;1210       for (i = nStep; i != 0; i--) {
000aec  f8dda014          LDR      r10,[sp,#0x14]
000af0  e068              B        |L1.3012|
                  |L1.2802|
;;;1211           OSSemPend(MOTO_SemIrqPtr[id], 0, &err);                 /// 等待脉冲下降沿到
000af2  496d              LDR      r1,|L1.3240|
000af4  f8510024          LDR      r0,[r1,r4,LSL #2]
000af8  aa03              ADD      r2,sp,#0xc
000afa  2100              MOVS     r1,#0
000afc  f7fffffe          BL       OSSemPend
;;;1212           MOTO_ClkNum[id]++;                                      /// 步数增加1
000b00  486a              LDR      r0,|L1.3244|
000b02  f8500024          LDR      r0,[r0,r4,LSL #2]
000b06  1c40              ADDS     r0,r0,#1
000b08  4968              LDR      r1,|L1.3244|
000b0a  f8410024          STR      r0,[r1,r4,LSL #2]
;;;1213           SpdGear =   (i - 1) * MOTO_HghDownAcc;
000b0e  f1aa0001          SUB      r0,r10,#1
000b12  4967              LDR      r1,|L1.3248|
000b14  7809              LDRB     r1,[r1,#0]  ; MOTO_HghDownAcc
000b16  fb00fb01          MUL      r11,r0,r1
;;;1214           if (SpdGear > slow) {
000b1a  45c3              CMP      r11,r8
000b1c  d900              BLS      |L1.2848|
;;;1215               SpdGear =   slow;
000b1e  46c3              MOV      r11,r8
                  |L1.2848|
;;;1216           }
;;;1217           if (SpdGear > MOTO_ClkNum[id]) {
000b20  4862              LDR      r0,|L1.3244|
000b22  f8500024          LDR      r0,[r0,r4,LSL #2]
000b26  4558              CMP      r0,r11
000b28  d202              BCS      |L1.2864|
;;;1218               SpdGear =   MOTO_ClkNum[id];
000b2a  4860              LDR      r0,|L1.3244|
000b2c  f850b024          LDR      r11,[r0,r4,LSL #2]
                  |L1.2864|
;;;1219           }
;;;1220           MOTO_SetSpd(id, MOTO_USE_HGH, SpdGear);                 /// 速度随位移增加, acc =  1
000b30  465a              MOV      r2,r11
000b32  2100              MOVS     r1,#0
000b34  4620              MOV      r0,r4
000b36  f7fffffe          BL       MOTO_SetSpd
;;;1221           
;;;1222           /// 故障判断
;;;1223           if (BSP_MOTO_StatusGet(id) == BSP_MOT_ST_ERROR) {
000b3a  4620              MOV      r0,r4
000b3c  f7fffffe          BL       BSP_MOTO_StatusGet
000b40  b918              CBNZ     r0,|L1.2890|
;;;1224               return  MOTO_ST_PRO;                                /// 电机故障 TB6560错误
000b42  2001              MOVS     r0,#1
                  |L1.2884|
;;;1225           }
;;;1226           
;;;1227           last    =   now;
;;;1228           dislast =   last - value;
;;;1229           if (dislast < 0) {
;;;1230               dislast =  -dislast;
;;;1231           }
;;;1232           now     =   MOTO_HghPotGetAve(id);
;;;1233           disnow  =   now - value;
;;;1234           if (disnow < 0) {
;;;1235               disnow  =  -disnow;
;;;1236           }
;;;1237           /// 反转判断
;;;1238           if (disnow < dislast) {
;;;1239               rev =   0;
;;;1240           } else if (disnow == dislast) {
;;;1241               ;
;;;1242           } else {
;;;1243               rev++;
;;;1244               if (rev > 100) {
;;;1245                   return  MOTO_ST_REVERSE;
;;;1246               }
;;;1247           }
;;;1248           
;;;1249           /// 调速
;;;1250           if (disnow < MOTO_DU_TO_POT(1.5)) {                     /// 停车位置
;;;1251               MOTO_HghHeight[id]  =   MOTO_HghGetFromPot(now);
;;;1252               return  MOTO_ST_ACTING;
;;;1253           } else if (disnow < MOTO_DU_TO_POT(3)) {                /// 减速位置
;;;1254               if (slow > MOTO_HghDownAcc) {
;;;1255                   slow   -=   MOTO_HghDownAcc;
;;;1256               } else {
;;;1257                   slow    =   0;
;;;1258               }
;;;1259           } else {
;;;1260               slow    =   MOTO_HGH_SPD_MAX_GEAR;
;;;1261           }
;;;1262       }
;;;1263       
;;;1264       return  MOTO_ST_OK;
;;;1265   }
000b44  b007              ADD      sp,sp,#0x1c
000b46  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.2890|
000b4a  9602              STR      r6,[sp,#8]            ;1227
000b4c  9e02              LDR      r6,[sp,#8]            ;1228
000b4e  eba60709          SUB      r7,r6,r9              ;1228
000b52  2f00              CMP      r7,#0                 ;1229
000b54  da00              BGE      |L1.2904|
000b56  427f              RSBS     r7,r7,#0              ;1230
                  |L1.2904|
000b58  4620              MOV      r0,r4                 ;1232
000b5a  f7fffffe          BL       MOTO_HghPotGetAve
000b5e  4606              MOV      r6,r0                 ;1232
000b60  eba60509          SUB      r5,r6,r9              ;1233
000b64  2d00              CMP      r5,#0                 ;1234
000b66  da00              BGE      |L1.2922|
000b68  426d              RSBS     r5,r5,#0              ;1235
                  |L1.2922|
000b6a  42bd              CMP      r5,r7                 ;1238
000b6c  da02              BGE      |L1.2932|
000b6e  2000              MOVS     r0,#0                 ;1239
000b70  9001              STR      r0,[sp,#4]            ;1239
000b72  e009              B        |L1.2952|
                  |L1.2932|
000b74  42bd              CMP      r5,r7                 ;1240
000b76  d007              BEQ      |L1.2952|
000b78  9801              LDR      r0,[sp,#4]            ;1243
000b7a  1c40              ADDS     r0,r0,#1              ;1243
000b7c  9001              STR      r0,[sp,#4]            ;1243
000b7e  9801              LDR      r0,[sp,#4]            ;1244
000b80  2864              CMP      r0,#0x64              ;1244
000b82  d901              BLS      |L1.2952|
000b84  2004              MOVS     r0,#4                 ;1245
000b86  e7dd              B        |L1.2884|
                  |L1.2952|
000b88  f5b57f99          CMP      r5,#0x132             ;1250
000b8c  d806              BHI      |L1.2972|
000b8e  4630              MOV      r0,r6                 ;1251
000b90  f7fffffe          BL       MOTO_HghGetFromPot
000b94  4942              LDR      r1,|L1.3232|
000b96  5508              STRB     r0,[r1,r4]            ;1251
000b98  2000              MOVS     r0,#0                 ;1252
000b9a  e7d3              B        |L1.2884|
                  |L1.2972|
000b9c  f2402066          MOV      r0,#0x266             ;1253
000ba0  4285              CMP      r5,r0                 ;1253
000ba2  d20b              BCS      |L1.3004|
000ba4  4842              LDR      r0,|L1.3248|
000ba6  7800              LDRB     r0,[r0,#0]            ;1254  ; MOTO_HghDownAcc
000ba8  4580              CMP      r8,r0                 ;1254
000baa  d904              BLS      |L1.2998|
000bac  4840              LDR      r0,|L1.3248|
000bae  7800              LDRB     r0,[r0,#0]            ;1255  ; MOTO_HghDownAcc
000bb0  eba80800          SUB      r8,r8,r0              ;1255
000bb4  e004              B        |L1.3008|
                  |L1.2998|
000bb6  f04f0800          MOV      r8,#0                 ;1257
000bba  e001              B        |L1.3008|
                  |L1.3004|
000bbc  f04f080a          MOV      r8,#0xa               ;1260
                  |L1.3008|
000bc0  f1aa0a01          SUB      r10,r10,#1            ;1210
                  |L1.3012|
000bc4  f1ba0f00          CMP      r10,#0                ;1210
000bc8  d193              BNE      |L1.2802|
000bca  2005              MOVS     r0,#5                 ;1264
000bcc  e7ba              B        |L1.2884|
;;;1266   
                          ENDP

                  MOTO_HghChange PROC
;;;1267   static  MOTO_ST_TypeDef  MOTO_HghChange (BSP_ID_TypeDef id, u8 hgh)
000bce  e92d43f8          PUSH     {r3-r9,lr}
;;;1268   {
000bd2  4680              MOV      r8,r0
000bd4  460c              MOV      r4,r1
;;;1269       MOTO_ST_TypeDef         st;
;;;1270       BSP_MOT_DIR_TypeDef     dir;
;;;1271       u8                      HigNow;
;;;1272       static  const  u16      position[MOTO_HGH_POS_NUM]  =   {
;;;1273                                   MOTO_HGH_POT_MD0,
;;;1274                                   MOTO_HGH_POT_MD1,
;;;1275                                   MOTO_HGH_POT_MD2,
;;;1276                                   MOTO_HGH_POT_MD3,
;;;1277                                   MOTO_HGH_POT_MD4,
;;;1278                                   MOTO_HGH_POT_MD5,
;;;1279                                   MOTO_HGH_POT_MD6,
;;;1280                                   MOTO_HGH_POT_MD7,
;;;1281                                   MOTO_HGH_POT_MD8,
;;;1282                                   MOTO_HGH_POT_MD9,
;;;1283                                   MOTO_HGH_POT_MD10
;;;1284                               };
;;;1285       
;;;1286       
;;;1287       /// 不检查参数范围
;;;1288           
;;;1289       HigNow  =   MOTO_HghHeight[id];
000bd6  4832              LDR      r0,|L1.3232|
000bd8  f8106008          LDRB     r6,[r0,r8]
;;;1290       if (hgh != HigNow) {
000bdc  42b4              CMP      r4,r6
000bde  d030              BEQ      |L1.3138|
;;;1291           if (    (HigNow == MOTO_HGH_POS_ERR_DN)
000be0  2e0b              CMP      r6,#0xb
000be2  d006              BEQ      |L1.3058|
;;;1292               || ((HigNow == MOTO_HGH_POS_ERR_MD) && (hgh == MOTO_HGH_POS_UP))
000be4  2e0c              CMP      r6,#0xc
000be6  d101              BNE      |L1.3052|
000be8  2c0a              CMP      r4,#0xa
000bea  d002              BEQ      |L1.3058|
                  |L1.3052|
;;;1293               || ((hgh - HigNow) > 0)    )  {
000bec  1ba0              SUBS     r0,r4,r6
000bee  2800              CMP      r0,#0
000bf0  dd01              BLE      |L1.3062|
                  |L1.3058|
;;;1294               dir =   MOTO_HGH_UP;
000bf2  2701              MOVS     r7,#1
000bf4  e000              B        |L1.3064|
                  |L1.3062|
;;;1295           } else {
;;;1296               dir =   MOTO_HGH_DN;
000bf6  2700              MOVS     r7,#0
                  |L1.3064|
;;;1297           }
;;;1298           
;;;1299           MOTO_Start(id, MOTO_USE_HGH, dir, BSP_DIP_TQ, BSP_TMR_8M_CLK * 5 / 1000);
000bf8  f6494340          MOV      r3,#0x9c40
000bfc  482d              LDR      r0,|L1.3252|
000bfe  9300              STR      r3,[sp,#0]
000c00  7803              LDRB     r3,[r0,#0]  ; BSP_DIP_TQ
000c02  463a              MOV      r2,r7
000c04  2100              MOVS     r1,#0
000c06  4640              MOV      r0,r8
000c08  f7fffffe          BL       MOTO_Start
;;;1300           
;;;1301           st  =   MOTO_HghStepUntil(id, MOTO_N_P_PR * 4, position[hgh]);//大小齿轮的传动比是4：1，小齿轮需要转4圈
000c0c  482a              LDR      r0,|L1.3256|
000c0e  f8302014          LDRH     r2,[r0,r4,LSL #1]
000c12  f44f51c8          MOV      r1,#0x1900
000c16  4640              MOV      r0,r8
000c18  f7fffffe          BL       MOTO_HghStepUntil
000c1c  4605              MOV      r5,r0
;;;1302           switch (st) {
000c1e  b12d              CBZ      r5,|L1.3116|
000c20  2d01              CMP      r5,#1
000c22  d002              BEQ      |L1.3114|
000c24  2d05              CMP      r5,#5
000c26  d105              BNE      |L1.3124|
000c28  e002              B        |L1.3120|
                  |L1.3114|
;;;1303           case MOTO_ST_PRO:               /// TB6560错误
;;;1304               break;
000c2a  e004              B        |L1.3126|
                  |L1.3116|
;;;1305           case MOTO_ST_ACTING:            /// 达到目标位置
;;;1306               st  =   MOTO_ST_OK;
000c2c  2505              MOVS     r5,#5
;;;1307               break;
000c2e  e002              B        |L1.3126|
                  |L1.3120|
;;;1308           case MOTO_ST_OK:                /// 到达指定步数, 即超时
;;;1309               st  =   MOTO_ST_OVTIME;
000c30  2502              MOVS     r5,#2
;;;1310               break;
000c32  e000              B        |L1.3126|
                  |L1.3124|
;;;1311           default:                        /// 其他
;;;1312               break;
000c34  bf00              NOP      
                  |L1.3126|
000c36  bf00              NOP                            ;1304
;;;1313           }
;;;1314           
;;;1315           MOTO_Stop(id, 10);              /// 停止脉冲, 10ms后设置为小电流
000c38  210a              MOVS     r1,#0xa
000c3a  4640              MOV      r0,r8
000c3c  f7fffffe          BL       MOTO_Stop
000c40  e000              B        |L1.3140|
                  |L1.3138|
;;;1316           
;;;1317       } else {
;;;1318           st  =   MOTO_ST_OK;
000c42  2505              MOVS     r5,#5
                  |L1.3140|
;;;1319       }
;;;1320       
;;;1321       return  st;
000c44  4628              MOV      r0,r5
;;;1322   }
000c46  e8bd83f8          POP      {r3-r9,pc}
;;;1323   static  void  MOTO_Hgh (BSP_ID_TypeDef id)
                          ENDP

                  MOTO_Hgh PROC
000c4a  b51c              PUSH     {r2-r4,lr}
;;;1324   {
000c4c  4604              MOV      r4,r0
;;;1325       u16         pot;
;;;1326       u8          hgh;
;;;1327       u32         wait;
;;;1328       u8          err;
;;;1329       u32         time;
;;;1330       u32         jog;
;;;1331       BitAction   st;
;;;1332       bool        JogEn;
;;;1333       MOTO_HGH_CMD_TypeDef  	MOTO_HghCmd_Tmp;
;;;1334       pot                 =   MOTO_HghPotGetAve(id);
000c4e  4620              MOV      r0,r4
000c50  f7fffffe          BL       MOTO_HghPotGetAve
000c54  9001              STR      r0,[sp,#4]
;;;1335       hgh                 =   MOTO_HghGetFromPot(pot);
000c56  9801              LDR      r0,[sp,#4]
000c58  f7fffffe          BL       MOTO_HghGetFromPot
000c5c  4605              MOV      r5,r0
;;;1336       MOTO_HghHeight[id]  =   hgh;
000c5e  4810              LDR      r0,|L1.3232|
000c60  5505              STRB     r5,[r0,r4]
;;;1337       
;;;1338       JogEn   =   COM_JogIsEn(id);
000c62  4620              MOV      r0,r4
000c64  f7fffffe          BL       COM_JogIsEn
000c68  4681              MOV      r9,r0
;;;1339       wait    =   1;
000c6a  f04f0b01          MOV      r11,#1
;;;1340       for ( ; ; ) {
000c6e  bf00              NOP      
                  |L1.3184|
;;;1341           OSSemPend(MOTO_SemCmdPtr[id], wait, &err);          /// 等待命令
000c70  490a              LDR      r1,|L1.3228|
000c72  f8510024          LDR      r0,[r1,r4,LSL #2]
000c76  466a              MOV      r2,sp
000c78  fa1ff18b          UXTH     r1,r11
000c7c  f7fffffe          BL       OSSemPend
;;;1342           
;;;1343           if (MOTO_HghCmd[id] < MOTO_HGH_POS_NUM) {           /// 有效命令
000c80  4808              LDR      r0,|L1.3236|
000c82  e01b              B        |L1.3260|
                  |L1.3204|
                          DCD      MOTO_CutSpdEngine
                  |L1.3208|
                          DCD      MOTO_HghSpdEngine
                  |L1.3212|
                          DCD      MOTO_CutFullSteps
                  |L1.3216|
                          DCD      MOTO_CutHalfSteps
                  |L1.3220|
                          DCD      MOTO_CutCmd
                  |L1.3224|
                          DCD      MOTO_State
                  |L1.3228|
                          DCD      MOTO_SemCmdPtr
                  |L1.3232|
                          DCD      MOTO_HghHeight
                  |L1.3236|
                          DCD      MOTO_HghCmd
                  |L1.3240|
                          DCD      MOTO_SemIrqPtr
                  |L1.3244|
                          DCD      MOTO_ClkNum
                  |L1.3248|
                          DCD      MOTO_HghDownAcc
                  |L1.3252|
                          DCD      BSP_DIP_TQ
                  |L1.3256|
                          DCD      position
                  |L1.3260|
000cbc  5d00              LDRB     r0,[r0,r4]
000cbe  280b              CMP      r0,#0xb
000cc0  da2a              BGE      |L1.3352|
;;;1344   		if (HeadUpDown[id] ==1) 
000cc2  484e              LDR      r0,|L1.3580|
000cc4  5d00              LDRB     r0,[r0,r4]
000cc6  2801              CMP      r0,#1
000cc8  d118              BNE      |L1.3324|
;;;1345   			{ 
;;;1346   				HeadUpDown[id]=0;
000cca  2000              MOVS     r0,#0
000ccc  494b              LDR      r1,|L1.3580|
000cce  5508              STRB     r0,[r1,r4]
;;;1347   				MOTO_HghCmd_Tmp=MOTO_HghCmd[id];
000cd0  484b              LDR      r0,|L1.3584|
000cd2  f810a004          LDRB     r10,[r0,r4]
;;;1348   
;;;1349   				MOTO_HghCmd[id]=(MOTO_HGH_CMD_TypeDef)10;
000cd6  200a              MOVS     r0,#0xa
000cd8  4949              LDR      r1,|L1.3584|
000cda  5508              STRB     r0,[r1,r4]
;;;1350   	            MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_HGH_CMD_NONE 保证
000cdc  2000              MOVS     r0,#0
000cde  4949              LDR      r1,|L1.3588|
000ce0  5508              STRB     r0,[r1,r4]
;;;1351   	            MOTO_State[id]  =   MOTO_HghChange(id, MOTO_HghCmd[id]);
000ce2  4847              LDR      r0,|L1.3584|
000ce4  5d01              LDRB     r1,[r0,r4]
000ce6  4620              MOV      r0,r4
000ce8  f7fffffe          BL       MOTO_HghChange
000cec  4945              LDR      r1,|L1.3588|
000cee  5508              STRB     r0,[r1,r4]
;;;1352   	            MOTO_HghCmd[id] =   MOTO_HGH_CMD_NONE;
000cf0  20ff              MOVS     r0,#0xff
000cf2  4943              LDR      r1,|L1.3584|
000cf4  5508              STRB     r0,[r1,r4]
;;;1353   	
;;;1354   				MOTO_HghCmd[id]=MOTO_HghCmd_Tmp;
000cf6  4608              MOV      r0,r1
000cf8  f800a004          STRB     r10,[r0,r4]
                  |L1.3324|
;;;1355   			}
;;;1356           MOTO_State[id]  =   MOTO_ST_ACTING;             /// 也可不用此句, 由 MOTO_HGH_CMD_NONE 保证
000cfc  2000              MOVS     r0,#0
000cfe  4941              LDR      r1,|L1.3588|
000d00  5508              STRB     r0,[r1,r4]
;;;1357           MOTO_State[id]  =   MOTO_HghChange(id, MOTO_HghCmd[id]);
000d02  483f              LDR      r0,|L1.3584|
000d04  5d01              LDRB     r1,[r0,r4]
000d06  4620              MOV      r0,r4
000d08  f7fffffe          BL       MOTO_HghChange
000d0c  493d              LDR      r1,|L1.3588|
000d0e  5508              STRB     r0,[r1,r4]
;;;1358           MOTO_HghCmd[id] =   MOTO_HGH_CMD_NONE;
000d10  20ff              MOVS     r0,#0xff
000d12  493b              LDR      r1,|L1.3584|
000d14  5508              STRB     r0,[r1,r4]
000d16  e7ab              B        |L1.3184|
                  |L1.3352|
;;;1359           } else {                                            /// 无效命令 或 超时
;;;1360               pot =   MOTO_HghPotGetAve(id);                  /// 电位器电压值
000d18  4620              MOV      r0,r4
000d1a  f7fffffe          BL       MOTO_HghPotGetAve
000d1e  9001              STR      r0,[sp,#4]
;;;1361               hgh =   MOTO_HghGetFromPot(pot);                /// 转为针高值
000d20  9801              LDR      r0,[sp,#4]
000d22  f7fffffe          BL       MOTO_HghGetFromPot
000d26  4605              MOV      r5,r0
;;;1362               
;;;1363               if (hgh < MOTO_HGH_POS_NUM) {                   /// 正常值
000d28  2d0b              CMP      r5,#0xb
000d2a  da06              BGE      |L1.3386|
;;;1364                   MOTO_HghHeight[id]  =   hgh;
000d2c  4836              LDR      r0,|L1.3592|
000d2e  5505              STRB     r5,[r0,r4]
;;;1365                   jog     =   8;
000d30  2708              MOVS     r7,#8
;;;1366                   time    =   8;
000d32  2608              MOVS     r6,#8
;;;1367                   wait    =   100;
000d34  f04f0b64          MOV      r11,#0x64
000d38  e79a              B        |L1.3184|
                  |L1.3386|
;;;1368                   
;;;1369               } else {                                        /// 异常值
;;;1370                                                               /// 处理查询
;;;1371                   if (time != 0) {
000d3a  b106              CBZ      r6,|L1.3390|
;;;1372                       time--;
000d3c  1e76              SUBS     r6,r6,#1
                  |L1.3390|
;;;1373                   } else {
;;;1374                       ;
;;;1375                   }
;;;1376                                                               /// 处理微动, 方向不变
;;;1377                   JogEn   =   COM_JogIsEn(id);
000d3e  4620              MOV      r0,r4
000d40  f7fffffe          BL       COM_JogIsEn
000d44  4681              MOV      r9,r0
;;;1378                   if (JogEn && (jog != 0) && (time == 0)) {
000d46  f1b90f00          CMP      r9,#0
000d4a  d00b              BEQ      |L1.3428|
000d4c  b157              CBZ      r7,|L1.3428|
000d4e  b94e              CBNZ     r6,|L1.3428|
;;;1379                       if (st == Bit_RESET) {
000d50  f1b80f00          CMP      r8,#0
000d54  d102              BNE      |L1.3420|
;;;1380                           st  =   Bit_SET;
000d56  f04f0801          MOV      r8,#1
000d5a  e005              B        |L1.3432|
                  |L1.3420|
;;;1381                       } else {
;;;1382                           st  =   Bit_RESET;
000d5c  f04f0800          MOV      r8,#0
;;;1383                           jog--;
000d60  1e7f              SUBS     r7,r7,#1
000d62  e001              B        |L1.3432|
                  |L1.3428|
;;;1384                       }
;;;1385                   } else {
;;;1386                       st  =   Bit_RESET;
000d64  f04f0800          MOV      r8,#0
                  |L1.3432|
;;;1387                   }
;;;1388                   BSP_MOTO_ClkSet(id, st);
000d68  4641              MOV      r1,r8
000d6a  4620              MOV      r0,r4
000d6c  f7fffffe          BL       BSP_MOTO_ClkSet
;;;1389                                                               /// 处理等待时间 和 更新变量
;;;1390                   if ((time == 0) && ((jog == 0) || (JogEn == FALSE))) {
000d70  b946              CBNZ     r6,|L1.3460|
000d72  b117              CBZ      r7,|L1.3450|
000d74  f1b90f00          CMP      r9,#0
000d78  d104              BNE      |L1.3460|
                  |L1.3450|
;;;1391                       MOTO_HghHeight[id]  =   hgh;
000d7a  4823              LDR      r0,|L1.3592|
000d7c  5505              STRB     r5,[r0,r4]
;;;1392                       wait    =   20;
000d7e  f04f0b14          MOV      r11,#0x14
000d82  e775              B        |L1.3184|
                  |L1.3460|
;;;1393                   } else {
;;;1394                       wait    =   1;
000d84  f04f0b01          MOV      r11,#1
000d88  e772              B        |L1.3184|
;;;1395                   }
;;;1396               }
;;;1397           }
;;;1398       }
;;;1399   }
;;;1400   
                          ENDP

                  MOTO_TaskHghOdd PROC
;;;1421   
;;;1422   static  void  MOTO_TaskHghOdd (void *data)
000d8a  2000              MOVS     r0,#0
;;;1423   {
;;;1424       MOTO_Hgh(BSP_ID_ODD);
000d8c  f7fffffe          BL       MOTO_Hgh
;;;1425   }
;;;1426   
                          ENDP

                  MOTO_TaskHghEven PROC
;;;1427   static  void  MOTO_TaskHghEven (void *data)
000d90  2001              MOVS     r0,#1
;;;1428   {
;;;1429       MOTO_Hgh(BSP_ID_EVEN);
000d92  f7fffffe          BL       MOTO_Hgh
;;;1430   }
;;;1431   
                          ENDP

                  MOTO_IRQandClr PROC
;;;1432   
;;;1433   void  MOTO_IRQandClr (void)
000d96  b570              PUSH     {r4-r6,lr}
;;;1434   {
;;;1435       BitAction       st;
;;;1436       u8              i;
;;;1437       
;;;1438       
;;;1439       for (i = 0; i < BSP_DEVICE_ID_N; i++) {
000d98  2400              MOVS     r4,#0
000d9a  e02b              B        |L1.3572|
                  |L1.3484|
;;;1440           if (TIM_GetITStatus(BSP_TMR_8M, MOTO_FlagCC[i]) != RESET) { /// 如果是电机比较中断
000d9c  481b              LDR      r0,|L1.3596|
000d9e  f8301014          LDRH     r1,[r0,r4,LSL #1]
000da2  481b              LDR      r0,|L1.3600|
000da4  f7fffffe          BL       TIM_GetITStatus
000da8  b310              CBZ      r0,|L1.3568|
;;;1441               TIM_ClearITPendingBit(BSP_TMR_8M, MOTO_FlagCC[i]);      /// 清中断
000daa  4818              LDR      r0,|L1.3596|
000dac  f8301014          LDRH     r1,[r0,r4,LSL #1]
000db0  4817              LDR      r0,|L1.3600|
000db2  f7fffffe          BL       TIM_ClearITPendingBit
;;;1442               
;;;1443               *MOTO_CCR[i] +=  MOTO_Timing[i];                        /// 设置下个中断数据
000db6  4817              LDR      r0,|L1.3604|
000db8  f8500024          LDR      r0,[r0,r4,LSL #2]
000dbc  8800              LDRH     r0,[r0,#0]
000dbe  4916              LDR      r1,|L1.3608|
000dc0  f8311014          LDRH     r1,[r1,r4,LSL #1]
000dc4  4408              ADD      r0,r0,r1
000dc6  4913              LDR      r1,|L1.3604|
000dc8  f8511024          LDR      r1,[r1,r4,LSL #2]
000dcc  8008              STRH     r0,[r1,#0]
;;;1444               
;;;1445               if (MOTO_StepState[i] == Bit_RESET) {
000dce  4813              LDR      r0,|L1.3612|
000dd0  5d00              LDRB     r0,[r0,r4]
000dd2  b908              CBNZ     r0,|L1.3544|
;;;1446                   st  =   Bit_SET;
000dd4  2501              MOVS     r5,#1
000dd6  e005              B        |L1.3556|
                  |L1.3544|
;;;1447               } else {
;;;1448                   st  =   Bit_RESET;
000dd8  2500              MOVS     r5,#0
;;;1449                   OSSemPost(MOTO_SemIrqPtr[i]);                       /// 脉冲下降沿时, 通知控制任务
000dda  4911              LDR      r1,|L1.3616|
000ddc  f8510024          LDR      r0,[r1,r4,LSL #2]
000de0  f7fffffe          BL       OSSemPost
                  |L1.3556|
;;;1450               }
;;;1451               BSP_MOTO_ClkSet((BSP_ID_TypeDef)i, st);                 /// 设置改变后的clk
000de4  4629              MOV      r1,r5
000de6  4620              MOV      r0,r4
000de8  f7fffffe          BL       BSP_MOTO_ClkSet
;;;1452               MOTO_StepState[i] = st;                                 /// 记录clk电平状态
000dec  480b              LDR      r0,|L1.3612|
000dee  5505              STRB     r5,[r0,r4]
                  |L1.3568|
000df0  1c60              ADDS     r0,r4,#1              ;1439
000df2  b2c4              UXTB     r4,r0                 ;1439
                  |L1.3572|
000df4  2c02              CMP      r4,#2                 ;1439
000df6  dbd1              BLT      |L1.3484|
;;;1453           }
;;;1454       }
;;;1455   }
000df8  bd70              POP      {r4-r6,pc}
;;;1456   
                          ENDP

000dfa  0000              DCW      0x0000
                  |L1.3580|
                          DCD      HeadUpDown
                  |L1.3584|
                          DCD      MOTO_HghCmd
                  |L1.3588|
                          DCD      MOTO_State
                  |L1.3592|
                          DCD      MOTO_HghHeight
                  |L1.3596|
                          DCD      MOTO_FlagCC
                  |L1.3600|
                          DCD      0x40012c00
                  |L1.3604|
                          DCD      MOTO_CCR
                  |L1.3608|
                          DCD      MOTO_Timing
                  |L1.3612|
                          DCD      MOTO_StepState
                  |L1.3616|
                          DCD      MOTO_SemIrqPtr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  MOTO_TaskMotoStk
                          %        2048

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  MOTO_FlagCC
000000  00080010          DCW      0x0008,0x0010
                  MOTO_CCR
                          DCD      0x40012c3c
                          DCD      0x40012c40
                  MOTO_TaskPrio
00000c  0b0c              DCB      0x0b,0x0c
                  MOTO_CutSpdTab
00000e  1c2f              DCW      0x1c2f
000010  1c2d1b0f          DCW      0x1c2d,0x1b0f
000014  19f218d6          DCW      0x19f2,0x18d6
000018  17be16a7          DCW      0x17be,0x16a7
00001c  15931483          DCW      0x1593,0x1483
000020  1377126f          DCW      0x1377,0x126f
000024  116d106f          DCW      0x116d,0x106f
000028  0f790e88          DCW      0x0f79,0x0e88
00002c  0d9e0cbb          DCW      0x0d9e,0x0cbb
000030  0be00b0d          DCW      0x0be0,0x0b0d
000034  0a420981          DCW      0x0a42,0x0981
000038  08c80819          DCW      0x08c8,0x0819
00003c  077406d8          DCW      0x0774,0x06d8
000040  064605c1          DCW      0x0646,0x05c1
000044  054404d4          DCW      0x0544,0x04d4
000048  046f0415          DCW      0x046f,0x0415
00004c  03c70385          DCW      0x03c7,0x0385
000050  034f0324          DCW      0x034f,0x0324
000054  030602f4          DCW      0x0306,0x02f4
000058  02ee168c          DCW      0x02ee,0x168c
00005c  168a15a5          DCW      0x168a,0x15a5
000060  14c113de          DCW      0x14c1,0x13de
000064  12fe121f          DCW      0x12fe,0x121f
000068  11421069          DCW      0x1142,0x1069
00006c  0f920ebf          DCW      0x0f92,0x0ebf
000070  0df00d26          DCW      0x0df0,0x0d26
000074  0c610ba0          DCW      0x0c61,0x0ba0
000078  0ae40a2f          DCW      0x0ae4,0x0a2f
00007c  098008d7          DCW      0x0980,0x08d7
000080  0835079a          DCW      0x0835,0x079a
000084  0706067a          DCW      0x0706,0x067a
000088  05f60579          DCW      0x05f6,0x0579
00008c  0505049a          DCW      0x0505,0x049a
000090  043603dc          DCW      0x0436,0x03dc
000094  038c0344          DCW      0x038c,0x0344
000098  030602d1          DCW      0x0306,0x02d1
00009c  02a60283          DCW      0x02a6,0x0283
0000a0  026b025c          DCW      0x026b,0x025c
0000a4  025812ca          DCW      0x0258,0x12ca
0000a8  12c9120a          DCW      0x12c9,0x120a
0000ac  114c108f          DCW      0x114c,0x108f
0000b0  0fd40f1a          DCW      0x0fd4,0x0f1a
0000b4  0e620dad          DCW      0x0e62,0x0dad
0000b8  0cfa0c4a          DCW      0x0cfa,0x0c4a
0000bc  0b9e0af5          DCW      0x0b9e,0x0af5
0000c0  0a5109b0          DCW      0x0a51,0x09b0
0000c4  0914087d          DCW      0x0914,0x087d
0000c8  07eb075e          DCW      0x07eb,0x075e
0000cc  06d70656          DCW      0x06d7,0x0656
0000d0  05db0566          DCW      0x05db,0x0566
0000d4  04f80490          DCW      0x04f8,0x0490
0000d8  042f03d6          DCW      0x042f,0x03d6
0000dc  03830338          DCW      0x0383,0x0338
0000e0  02f502b9          DCW      0x02f5,0x02b9
0000e4  02850259          DCW      0x0285,0x0259
0000e8  02350218          DCW      0x0235,0x0218
0000ec  020401f8          DCW      0x0204,0x01f8
0000f0  01f40f08          DCW      0x01f4,0x0f08
0000f4  0f070e6e          DCW      0x0f07,0x0e6e
0000f8  0dd60d3f          DCW      0x0dd6,0x0d3f
0000fc  0ca90c14          DCW      0x0ca9,0x0c14
000100  0b810af0          DCW      0x0b81,0x0af0
000104  0a6109d4          DCW      0x0a61,0x09d4
000108  094b08c4          DCW      0x094b,0x08c4
00010c  084007c0          DCW      0x0840,0x07c0
000110  074306ca          DCW      0x0743,0x06ca
000114  065505e4          DCW      0x0655,0x05e4
000118  05780511          DCW      0x0578,0x0511
00011c  04af0451          DCW      0x04af,0x0451
000120  03f903a6          DCW      0x03f9,0x03a6
000124  03580311          DCW      0x0358,0x0311
000128  02cf0293          DCW      0x02cf,0x0293
00012c  025d022d          DCW      0x025d,0x022d
000130  020401e0          DCW      0x0204,0x01e0
000134  01c401ac          DCW      0x01c4,0x01ac
000138  019c0193          DCW      0x019c,0x0193
00013c  0190              DCW      0x0190
                  MOTO_HghSpdTab
00013e  9c40              DCW      0x9c40
000140  9c404e20          DCW      0x9c40,0x4e20
000144  3e803200          DCW      0x3e80,0x3200
000148  27101c20          DCW      0x2710,0x1c20
00014c  15e01130          DCW      0x15e0,0x1130
000150  0fa03e80          DCW      0x0fa0,0x3e80
000154  3e802bc0          DCW      0x3e80,0x2bc0
000158  23f01c20          DCW      0x23f0,0x1c20
00015c  15e00fa0          DCW      0x15e0,0x0fa0
000160  0af007d0          DCW      0x0af0,0x07d0
000164  06403414          DCW      0x0640,0x3414
000168  34141c20          DCW      0x3414,0x1c20
00016c  15e00fa0          DCW      0x15e0,0x0fa0
000170  0af007d0          DCW      0x0af0,0x07d0
000174  06400578          DCW      0x0640,0x0578
000178  05343414          DCW      0x0534,0x3414
00017c  34141c20          DCW      0x3414,0x1c20
000180  15e00fa0          DCW      0x15e0,0x0fa0
000184  0af007d0          DCW      0x0af0,0x07d0
000188  05f00550          DCW      0x05f0,0x0550
00018c  04b0              DCW      0x04b0
                  position
00018e  0a00              DCW      0x0a00
000190  12001a00          DCW      0x1200,0x1a00
000194  22002a00          DCW      0x2200,0x2a00
000198  32003a00          DCW      0x3200,0x3a00
00019c  42004a00          DCW      0x4200,0x4a00
0001a0  5200d200          DCW      0x5200,0xd200

                          AREA ||.data||, DATA, ALIGN=2

                  MOTO_CUT_IN_OVER_N
                          DCD      0x000002ee
                  MOTO_State
000004  05050000          DCB      0x05,0x05,0x00,0x00
                  MOTO_ClkNum
                          DCD      0x00000000
                          DCD      0x00000000
                  MOTO_StepState
000010  0000              DCB      0x00,0x00
                  MOTO_CutFullSteps
000012  0535              DCW      0x0535
                  MOTO_CutHalfSteps
000014  0028              DCW      0x0028
                  MOTO_CutSpdEngine
000016  0001              DCW      0x0001
                  MOTO_CutDownAcc
000018  01                DCB      0x01
                  MOTO_CutCmd
000019  000000            DCB      0x00,0x00,0x00
                  MOTO_HghSpdEngine
00001c  0000              DCW      0x0000
                  MOTO_HghDownAcc
00001e  01                DCB      0x01
                  MOTO_HghCmd
00001f  ff                DCB      0xff
000020  ff000000          DCB      0xff,0x00,0x00,0x00
                  MOTO_TaskFunc
                          %        8
                  MOTO_SemIrqPtr
                          %        8
                  MOTO_Timing
                          DCD      0x00000000
                  MOTO_HghHeight
000038  00000000          DCB      0x00,0x00,0x00,0x00
                  MOTO_SemCmdPtr
                          %        8
                  HOT_Position
000044  00                DCB      0x00
