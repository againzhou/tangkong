; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\in.o --depend=.\exe\in.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\in.crf ..\Source\APP\in.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IN_TenGetOne PROC
;;;296    
;;;297    static  u8  IN_TenGetOne (BSP_ID_TypeDef id)
000000  b570              PUSH     {r4-r6,lr}
;;;298    {
000002  4605              MOV      r5,r0
;;;299        BSP_SWITCH_TypeDef      swi;
;;;300        
;;;301        
;;;302    /// !!! cy 100908
;;;303    //    if (IN_BrkTypeIsDn[id] == FALSE) {      /// 上断线检测方式
;;;304        if (IN_BrkTypeIsDn == FALSE) {          /// 上断线检测方式
000004  489e              LDR      r0,|L1.640|
000006  7800              LDRB     r0,[r0,#0]  ; IN_BrkTypeIsDn
000008  b920              CBNZ     r0,|L1.20|
;;;305    /// !!! cy 100908
;;;306    
;;;307            swi =   BSP_SWI_FiGet(id);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       BSP_SWI_FiGet
000010  4604              MOV      r4,r0
000012  e003              B        |L1.28|
                  |L1.20|
;;;308        } else {                                /// 下断线检测方式
;;;309            swi =   BSP_SWI_SeGet(id);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       BSP_SWI_SeGet
00001a  4604              MOV      r4,r0
                  |L1.28|
;;;310        }
;;;311        
;;;312        if (swi == IN_TEN_0) {//等于1，传递进CPU是高电平，表示断线
00001c  2c01              CMP      r4,#1
00001e  d101              BNE      |L1.36|
;;;313            return  0;
000020  2000              MOVS     r0,#0
                  |L1.34|
;;;314        } else {
;;;315            return  1;
;;;316        }
;;;317    }
000022  bd70              POP      {r4-r6,pc}
                  |L1.36|
000024  2001              MOVS     r0,#1                 ;315
000026  e7fc              B        |L1.34|
;;;318    
                          ENDP

                  IN_TenSample PROC
;;;319    static  void  IN_TenSample (BSP_ID_TypeDef id)
000028  b570              PUSH     {r4-r6,lr}
;;;320    {
00002a  4604              MOV      r4,r0
;;;321    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;322        OS_CPU_SR  cpu_sr = 0;
00002c  2600              MOVS     r6,#0
;;;323    #endif
;;;324        u8      ten;
;;;325        
;;;326        
;;;327        ten =   IN_TenGetOne(id);//这个函数只是返回0、1，断线返回0，没有断线返回1
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       IN_TenGetOne
000034  4605              MOV      r5,r0
;;;328        
;;;329        OS_ENTER_CRITICAL();
000036  f7fffffe          BL       OS_CPU_SR_Save
00003a  4606              MOV      r6,r0
;;;330        if ((IN_TenSum[id] <= ((u32)-1) - ten) && (IN_TenNum[id] <= ((u32)-1) - 1)) {
00003c  4891              LDR      r0,|L1.644|
00003e  f8500024          LDR      r0,[r0,r4,LSL #2]
000042  f1c531ff          RSB      r1,r5,#0xffffffff
000046  4288              CMP      r0,r1
000048  d813              BHI      |L1.114|
00004a  488f              LDR      r0,|L1.648|
00004c  f8500024          LDR      r0,[r0,r4,LSL #2]
000050  f1100f02          CMN      r0,#2
000054  d80d              BHI      |L1.114|
;;;331            IN_TenSum[id]  +=   ten; //	断线是加0
000056  488b              LDR      r0,|L1.644|
000058  f8500024          LDR      r0,[r0,r4,LSL #2]
00005c  4428              ADD      r0,r0,r5
00005e  4989              LDR      r1,|L1.644|
000060  f8410024          STR      r0,[r1,r4,LSL #2]
;;;332            IN_TenNum[id]  +=   1;//次数加1
000064  4888              LDR      r0,|L1.648|
000066  f8500024          LDR      r0,[r0,r4,LSL #2]
00006a  1c40              ADDS     r0,r0,#1
00006c  4986              LDR      r1,|L1.648|
00006e  f8410024          STR      r0,[r1,r4,LSL #2]
                  |L1.114|
;;;333        }
;;;334        OS_EXIT_CRITICAL();
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       OS_CPU_SR_Restore
;;;335    }
000078  bd70              POP      {r4-r6,pc}
;;;336    
                          ENDP

                  IN_GetBrkIsWork PROC
;;;272    /// 断线检测是否需要工作
;;;273    static  bool  IN_GetBrkIsWork (BSP_ID_TypeDef id)
00007a  4601              MOV      r1,r0
;;;274    {
;;;275    //    u8      dn;
;;;276    //    u8      up;
;;;277    //    
;;;278    //    
;;;279    //    dn  =   (IN_BrkTypeIsDn[id] == TRUE ) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_DN);
;;;280    //    up  =   (IN_BrkTypeIsDn[id] == FALSE) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP);
;;;281    //    
;;;282    //    if (IN_BrkIsEnable[id] && (dn || up)) {
;;;283    
;;;284    /// !!! cy 100908
;;;285    //    if (   ((IN_BrkTypeIsDn[id] == TRUE ) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_DN))
;;;286    //        || ((IN_BrkTypeIsDn[id] == FALSE) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP))   ) {
;;;287        if (   ((IN_BrkTypeIsDn == TRUE ) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_DN))
00007c  4880              LDR      r0,|L1.640|
00007e  7800              LDRB     r0,[r0,#0]  ; IN_BrkTypeIsDn
000080  2801              CMP      r0,#1
000082  d103              BNE      |L1.140|
000084  4881              LDR      r0,|L1.652|
000086  7800              LDRB     r0,[r0,#0]  ; BSP_DIP_BDFunc
000088  2801              CMP      r0,#1
00008a  d005              BEQ      |L1.152|
                  |L1.140|
;;;288            || ((IN_BrkTypeIsDn == FALSE) && (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP))   ) {
00008c  487c              LDR      r0,|L1.640|
00008e  7800              LDRB     r0,[r0,#0]  ; IN_BrkTypeIsDn
000090  b920              CBNZ     r0,|L1.156|
000092  487e              LDR      r0,|L1.652|
000094  7800              LDRB     r0,[r0,#0]  ; BSP_DIP_BDFunc
000096  b908              CBNZ     r0,|L1.156|
                  |L1.152|
;;;289    /// !!! cy 100908
;;;290    
;;;291            return  TRUE;
000098  2001              MOVS     r0,#1
                  |L1.154|
;;;292        } else {
;;;293            return  FALSE;
;;;294        }
;;;295    }
00009a  4770              BX       lr
                  |L1.156|
00009c  2000              MOVS     r0,#0                 ;293
00009e  e7fc              B        |L1.154|
;;;296    
                          ENDP

                  IN_TaskScan PROC
;;;336    
;;;337    static  void  IN_TaskScan (void *data)
0000a0  2500              MOVS     r5,#0
;;;338    {
;;;339        u32                 nTen    =   0;
;;;340        u32                 nHDKey  =   0;
0000a2  2600              MOVS     r6,#0
;;;341        u32                 i;
;;;342        
;;;343        
;;;344        data = data;                                            /// 避免编译警告: 参数没有使用
0000a4  bf00              NOP      
;;;345        
;;;346        for (;;) {                                              /// 任务无限循环, 不返回
0000a6  bf00              NOP      
                  |L1.168|
;;;347            OSTimeDlyHMSM(0, 0, 0, 1);                          /// 执行周期为1ms
0000a8  2301              MOVS     r3,#1
0000aa  2200              MOVS     r2,#0
0000ac  4611              MOV      r1,r2
0000ae  4610              MOV      r0,r2
0000b0  f7fffffe          BL       OSTimeDlyHMSM
;;;348            
;;;349            nTen++;
0000b4  1c6d              ADDS     r5,r5,#1
;;;350            if (nTen >= IN_SAMPLE_PERIOD_TEN) {
0000b6  b17d              CBZ      r5,|L1.216|
;;;351                nTen    =   0;
0000b8  2500              MOVS     r5,#0
;;;352                for (i = 0; i < BSP_DEVICE_ID_N; i++) {//在主控初始化的时候传递了主控断检模式，所以IN_GetBrkIsWork能够确定状态
0000ba  2400              MOVS     r4,#0
0000bc  e00a              B        |L1.212|
                  |L1.190|
;;;353                    if (IN_GetBrkIsWork((BSP_ID_TypeDef)i) && (IN_BrkIsSample[i])) {
0000be  b2e0              UXTB     r0,r4
0000c0  f7fffffe          BL       IN_GetBrkIsWork
0000c4  b128              CBZ      r0,|L1.210|
0000c6  4872              LDR      r0,|L1.656|
0000c8  5d00              LDRB     r0,[r0,r4]
0000ca  b110              CBZ      r0,|L1.210|
;;;354                        IN_TenSample((BSP_ID_TypeDef)i);	  //主轴启动、三次线夹就能够IN_BrkIsSample变TRUE
0000cc  b2e0              UXTB     r0,r4
0000ce  f7fffffe          BL       IN_TenSample
                  |L1.210|
0000d2  1c64              ADDS     r4,r4,#1              ;352
                  |L1.212|
0000d4  2c02              CMP      r4,#2                 ;352
0000d6  d3f2              BCC      |L1.190|
                  |L1.216|
;;;355                    }//这里只有计算10次采样值，并没有IN_BrkIsBroken[i]变量操作
;;;356                }
;;;357            }
;;;358            
;;;359            nHDKey++;
0000d8  1c76              ADDS     r6,r6,#1
;;;360            if (nHDKey >= IN_SAMPLE_PERIOD_HDKEY) {
0000da  2e0a              CMP      r6,#0xa
0000dc  d3e4              BCC      |L1.168|
;;;361                nHDKey  =   0;
0000de  2600              MOVS     r6,#0
;;;362                for (i = 0; i < BSP_DEVICE_ID_N; i++) {
0000e0  2400              MOVS     r4,#0
0000e2  e00f              B        |L1.260|
                  |L1.228|
;;;363                    IN_HDKeyUpLast[i]   =   IN_HDKeyUpNow[i];
0000e4  486b              LDR      r0,|L1.660|
0000e6  5d00              LDRB     r0,[r0,r4]
0000e8  496b              LDR      r1,|L1.664|
0000ea  5508              STRB     r0,[r1,r4]
;;;364                    IN_HDKeyDnLast[i]   =   IN_HDKeyDnNow[i];
0000ec  486b              LDR      r0,|L1.668|
0000ee  5d00              LDRB     r0,[r0,r4]
0000f0  496b              LDR      r1,|L1.672|
0000f2  5508              STRB     r0,[r1,r4]
;;;365                    BSP_HD_KeyGet((BSP_ID_TypeDef)i, &IN_HDKeyUpNow[i], &IN_HDKeyDnNow[i]);
0000f4  4869              LDR      r0,|L1.668|
0000f6  1902              ADDS     r2,r0,r4
0000f8  4866              LDR      r0,|L1.660|
0000fa  1901              ADDS     r1,r0,r4
0000fc  b2e0              UXTB     r0,r4
0000fe  f7fffffe          BL       BSP_HD_KeyGet
000102  1c64              ADDS     r4,r4,#1              ;362
                  |L1.260|
000104  2c02              CMP      r4,#2                 ;362
000106  d2cf              BCS      |L1.168|
000108  e7ec              B        |L1.228|
;;;366                }
;;;367            }
;;;368        }
;;;369    }
;;;370    
                          ENDP

                  IN_Init PROC
;;;89     
;;;90     void IN_Init(void)
00010a  b500              PUSH     {lr}
;;;91     {
00010c  b085              SUB      sp,sp,#0x14
;;;92         /// 建立输入扫描任务
;;;93         OSTaskCreateExt((void (*)(void *)) IN_TaskScan,                 /// 任务函数入口(指针)
00010e  2303              MOVS     r3,#3
000110  2200              MOVS     r2,#0
000112  2180              MOVS     r1,#0x80
000114  4863              LDR      r0,|L1.676|
000116  e9cd2303          STRD     r2,r3,[sp,#0xc]
00011a  e9cd0101          STRD     r0,r1,[sp,#4]
00011e  230f              MOVS     r3,#0xf
000120  f50072fe          ADD      r2,r0,#0x1fc
000124  2100              MOVS     r1,#0
000126  4860              LDR      r0,|L1.680|
000128  9300              STR      r3,[sp,#0]
00012a  f7fffffe          BL       OSTaskCreateExt
;;;94                         (void          * ) 0,                           /// 函数参数指针
;;;95                                                                         /// 栈顶指针
;;;96                         (OS_STK        * )&IN_TaskScanStk[APP_TASK_IN_SCAN_STK_SIZE - 1],
;;;97                         (u8              ) APP_TASK_IN_SCAN_PRIO,       /// 优先级
;;;98                         (u16             ) APP_TASK_IN_SCAN_PRIO,       /// ID标识, 暂与优先级相同
;;;99                         (OS_STK        * )&IN_TaskScanStk[0],           /// 栈底指针
;;;100                        (u32             ) APP_TASK_IN_SCAN_STK_SIZE,   /// 栈空间大小, 单位为OS_STK
;;;101                        (void          * ) 0,                           /// TCB扩展, 附属信息
;;;102                                                                        /// 操作信息
;;;103                        (u16             )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;104    }
00012e  b005              ADD      sp,sp,#0x14
000130  bd00              POP      {pc}
;;;105    
                          ENDP

                  IN_HDKey_GetSt PROC
;;;131    /// ! 以后下机头板如果使用此口, 可另外编写函数, 而只上机头调用此函数
;;;132    HDKEY_ST_TypeDef  IN_HDKey_GetSt (BSP_ID_TypeDef id)
000132  4601              MOV      r1,r0
;;;133    {
;;;134        BSP_HD_KEY_TypeDef  up;
;;;135        BSP_HD_KEY_TypeDef  dn;
;;;136        
;;;137        
;;;138        if (id < BSP_DEVICE_ID_N) {//连续两次进入到采集拨码开关的状态后，两次的值一样才能够认为拨码开关的状态发生改变
000134  2902              CMP      r1,#2
000136  da16              BGE      |L1.358|
;;;139            if ((IN_HDKeyUpLast[id] == BSP_HD_KEY_ON) && (IN_HDKeyUpNow[id] == BSP_HD_KEY_ON)) {
000138  4857              LDR      r0,|L1.664|
00013a  5c40              LDRB     r0,[r0,r1]
00013c  2801              CMP      r0,#1
00013e  d105              BNE      |L1.332|
000140  4854              LDR      r0,|L1.660|
000142  5c40              LDRB     r0,[r0,r1]
000144  2801              CMP      r0,#1
000146  d101              BNE      |L1.332|
;;;140                up  =   BSP_HD_KEY_ON;
000148  2301              MOVS     r3,#1
00014a  e000              B        |L1.334|
                  |L1.332|
;;;141            } else {
;;;142                up  =   BSP_HD_KEY_OFF;
00014c  2300              MOVS     r3,#0
                  |L1.334|
;;;143            }
;;;144            if ((IN_HDKeyDnLast[id] == BSP_HD_KEY_ON) && (IN_HDKeyDnNow[id] == BSP_HD_KEY_ON)) {
00014e  4854              LDR      r0,|L1.672|
000150  5c40              LDRB     r0,[r0,r1]
000152  2801              CMP      r0,#1
000154  d105              BNE      |L1.354|
000156  4851              LDR      r0,|L1.668|
000158  5c40              LDRB     r0,[r0,r1]
00015a  2801              CMP      r0,#1
00015c  d101              BNE      |L1.354|
;;;145                dn  =   BSP_HD_KEY_ON;
00015e  2201              MOVS     r2,#1
000160  e003              B        |L1.362|
                  |L1.354|
;;;146            } else {
;;;147                dn  =   BSP_HD_KEY_OFF;
000162  2200              MOVS     r2,#0
000164  e001              B        |L1.362|
                  |L1.358|
;;;148            }
;;;149        } else {
;;;150            up  =   BSP_HD_KEY_OFF;
000166  2300              MOVS     r3,#0
;;;151            dn  =   BSP_HD_KEY_OFF;
000168  2200              MOVS     r2,#0
                  |L1.362|
;;;152        }
;;;153        return  (HDKEY_ST_TypeDef)((up << HDKEY_ST_BIT_UP) | (dn << HDKEY_ST_BIT_DN));
00016a  ea430042          ORR      r0,r3,r2,LSL #1
00016e  b2c0              UXTB     r0,r0
;;;154    }
000170  4770              BX       lr
;;;155    
                          ENDP

                  IN_BRK_SetIsDn PROC
;;;163    //}
;;;164    void  IN_BRK_SetIsDn (bool IsDn)
000172  4943              LDR      r1,|L1.640|
;;;165    {
;;;166        IN_BrkTypeIsDn  =   IsDn;
000174  7008              STRB     r0,[r1,#0]
;;;167    }
000176  4770              BX       lr
;;;168    /// !!! cy 100908
                          ENDP

                  IN_BRK_SampleBegin PROC
;;;178    /// 主轴启动时调用, 张力采样线使能
;;;179    void  IN_BRK_SampleBegin (void)
000178  b570              PUSH     {r4-r6,lr}
;;;180    {
;;;181    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;182        OS_CPU_SR  cpu_sr = 0;
00017a  2500              MOVS     r5,#0
;;;183    #endif
;;;184        u32     i;
;;;185        
;;;186        
;;;187        for (i = 0; i < BSP_DEVICE_ID_N; i++) {
00017c  2400              MOVS     r4,#0
00017e  e012              B        |L1.422|
                  |L1.384|
;;;188            OS_ENTER_CRITICAL();
000180  f7fffffe          BL       OS_CPU_SR_Save
000184  4605              MOV      r5,r0
;;;189            IN_TenSum[i]        =   0;
000186  2000              MOVS     r0,#0
000188  493e              LDR      r1,|L1.644|
00018a  f8410024          STR      r0,[r1,r4,LSL #2]
;;;190            IN_TenNum[i]        =   0;
00018e  493e              LDR      r1,|L1.648|
000190  f8410024          STR      r0,[r1,r4,LSL #2]
;;;191            IN_BrkIsBroken[i]   =   FALSE;
000194  4945              LDR      r1,|L1.684|
000196  5508              STRB     r0,[r1,r4]
;;;192            IN_BrkIsSample[i]   =   TRUE;
000198  2001              MOVS     r0,#1
00019a  493d              LDR      r1,|L1.656|
00019c  5508              STRB     r0,[r1,r4]
;;;193            OS_EXIT_CRITICAL();
00019e  4628              MOV      r0,r5
0001a0  f7fffffe          BL       OS_CPU_SR_Restore
0001a4  1c64              ADDS     r4,r4,#1              ;187
                  |L1.422|
0001a6  2c02              CMP      r4,#2                 ;187
0001a8  d3ea              BCC      |L1.384|
;;;194        }
;;;195    }
0001aa  bd70              POP      {r4-r6,pc}
;;;196    
                          ENDP

                  IN_BRK_SentXJ PROC
;;;199    /// 如果采样没有使能, 可以使能采样
;;;200    void  IN_BRK_SentXJ (void)//三次线夹进一次这个函数
0001ac  b570              PUSH     {r4-r6,lr}
;;;201    {
;;;202    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;203        OS_CPU_SR  cpu_sr = 0;
0001ae  2500              MOVS     r5,#0
;;;204    #endif
;;;205        u32     i;
;;;206        
;;;207        
;;;208        for (i = 0; i < BSP_DEVICE_ID_N; i++) {
0001b0  2400              MOVS     r4,#0
0001b2  e034              B        |L1.542|
                  |L1.436|
;;;209            OS_ENTER_CRITICAL();
0001b4  f7fffffe          BL       OS_CPU_SR_Save
0001b8  4605              MOV      r5,r0
;;;210            if (IN_GetBrkIsWork((BSP_ID_TypeDef)i)) {               /// 断线检测工作
0001ba  b2e0              UXTB     r0,r4
0001bc  f7fffffe          BL       IN_GetBrkIsWork
0001c0  b1f8              CBZ      r0,|L1.514|
;;;211                if (IN_BrkIsSample[i]) {                            /// 张力采样使能
0001c2  4833              LDR      r0,|L1.656|
0001c4  5d00              LDRB     r0,[r0,r4]
0001c6  b1a8              CBZ      r0,|L1.500|
;;;212    //在任务中一直是：      断线是加0，不断线每次加1     100            每次都会加1       5     /// 张力值小于断线检测标准
;;;213                    if (IN_TenSum[i] * IN_TEN_MULTIPLE < IN_TenNum[i] * IN_BRK_LEVEL) {
0001c8  482e              LDR      r0,|L1.644|
0001ca  f8500024          LDR      r0,[r0,r4,LSL #2]
0001ce  4938              LDR      r1,|L1.688|
0001d0  7809              LDRB     r1,[r1,#0]  ; IN_TEN_MULTIPLE
0001d2  4348              MULS     r0,r1,r0
0001d4  492c              LDR      r1,|L1.648|
0001d6  f8511024          LDR      r1,[r1,r4,LSL #2]
0001da  4a36              LDR      r2,|L1.692|
0001dc  7812              LDRB     r2,[r2,#0]  ; IN_BRK_LEVEL
0001de  4351              MULS     r1,r2,r1
0001e0  4288              CMP      r0,r1
0001e2  d203              BCS      |L1.492|
;;;214                        IN_BrkIsBroken[i]   =   TRUE;               /// 认为断线是
0001e4  2001              MOVS     r0,#1
0001e6  4931              LDR      r1,|L1.684|
0001e8  5508              STRB     r0,[r1,r4]
0001ea  e00d              B        |L1.520|
                  |L1.492|
;;;215                    } else {                                        /// 否则(包括采样数为0)
;;;216                        IN_BrkIsBroken[i]   =   FALSE;              /// 认为断线否
0001ec  2000              MOVS     r0,#0
0001ee  492f              LDR      r1,|L1.684|
0001f0  5508              STRB     r0,[r1,r4]
0001f2  e009              B        |L1.520|
                  |L1.500|
;;;217                    }
;;;218                } else {                                            /// 张力采样禁止
;;;219                    IN_BrkIsBroken[i]   =   FALSE;                  /// 认为断线否
0001f4  2000              MOVS     r0,#0
0001f6  492d              LDR      r1,|L1.684|
0001f8  5508              STRB     r0,[r1,r4]
;;;220                    IN_BrkIsSample[i]   =   TRUE;                   /// 张力采样使能
0001fa  2001              MOVS     r0,#1
0001fc  4924              LDR      r1,|L1.656|
0001fe  5508              STRB     r0,[r1,r4]
000200  e002              B        |L1.520|
                  |L1.514|
;;;221                }
;;;222            } else {                                                /// 断线检测没有工作
;;;223                IN_BrkIsBroken[i]   =   FALSE;                      /// 认为断线否
000202  2000              MOVS     r0,#0
000204  4929              LDR      r1,|L1.684|
000206  5508              STRB     r0,[r1,r4]
                  |L1.520|
;;;224            }
;;;225            IN_TenSum[i]    =   0;
000208  2000              MOVS     r0,#0
00020a  491e              LDR      r1,|L1.644|
00020c  f8410024          STR      r0,[r1,r4,LSL #2]
;;;226            IN_TenNum[i]    =   0;
000210  491d              LDR      r1,|L1.648|
000212  f8410024          STR      r0,[r1,r4,LSL #2]
;;;227            OS_EXIT_CRITICAL();
000216  4628              MOV      r0,r5
000218  f7fffffe          BL       OS_CPU_SR_Restore
00021c  1c64              ADDS     r4,r4,#1              ;208
                  |L1.542|
00021e  2c02              CMP      r4,#2                 ;208
000220  d3c8              BCC      |L1.436|
;;;228        }
;;;229    }
000222  bd70              POP      {r4-r6,pc}
;;;230    
                          ENDP

                  IN_BRK_SampleStop PROC
;;;231    /// 主轴停止时调用
;;;232    void  IN_BRK_SampleStop (void)
000224  b570              PUSH     {r4-r6,lr}
;;;233    {
;;;234    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;235        OS_CPU_SR  cpu_sr = 0;
000226  2500              MOVS     r5,#0
;;;236    #endif
;;;237        u32     i;
;;;238        
;;;239        
;;;240        for (i = 0; i < BSP_DEVICE_ID_N; i++) {
000228  2400              MOVS     r4,#0
00022a  e011              B        |L1.592|
                  |L1.556|
;;;241            OS_ENTER_CRITICAL();
00022c  f7fffffe          BL       OS_CPU_SR_Save
000230  4605              MOV      r5,r0
;;;242            IN_TenSum[i]        =   0;
000232  2000              MOVS     r0,#0
000234  4913              LDR      r1,|L1.644|
000236  f8410024          STR      r0,[r1,r4,LSL #2]
;;;243            IN_TenNum[i]        =   0;
00023a  4913              LDR      r1,|L1.648|
00023c  f8410024          STR      r0,[r1,r4,LSL #2]
;;;244            IN_BrkIsBroken[i]   =   FALSE;//是否断线，对于下断检，如果停车就FALSE，那么停车后再查就已经清0了。
000240  491a              LDR      r1,|L1.684|
000242  5508              STRB     r0,[r1,r4]
;;;245            IN_BrkIsSample[i]   =   FALSE;//不断线采样
000244  4912              LDR      r1,|L1.656|
000246  5508              STRB     r0,[r1,r4]
;;;246            OS_EXIT_CRITICAL();
000248  4628              MOV      r0,r5
00024a  f7fffffe          BL       OS_CPU_SR_Restore
00024e  1c64              ADDS     r4,r4,#1              ;240
                  |L1.592|
000250  2c02              CMP      r4,#2                 ;240
000252  d3eb              BCC      |L1.556|
;;;247        }
;;;248    }
000254  bd70              POP      {r4-r6,pc}
;;;249    //
                          ENDP

                  IN_BRK_GetIsBrk PROC
;;;250    bool  IN_BRK_GetIsBrk (BSP_ID_TypeDef id)
000256  b570              PUSH     {r4-r6,lr}
;;;251    {
000258  4604              MOV      r4,r0
;;;252    #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;253        OS_CPU_SR  cpu_sr = 0;
00025a  2600              MOVS     r6,#0
;;;254    #endif
;;;255        bool    rt;
;;;256        
;;;257        if (id < BSP_DEVICE_ID_N) {
00025c  2c02              CMP      r4,#2
00025e  da0b              BGE      |L1.632|
;;;258            /// 报告错误后, 如果无动作则报告正确. !原来协议要求
;;;259            OS_ENTER_CRITICAL();
000260  f7fffffe          BL       OS_CPU_SR_Save
000264  4606              MOV      r6,r0
;;;260            rt                  =   IN_BrkIsBroken[id];
000266  4811              LDR      r0,|L1.684|
000268  5d05              LDRB     r5,[r0,r4]
;;;261            IN_BrkIsBroken[id]  =   FALSE;
00026a  2000              MOVS     r0,#0
00026c  490f              LDR      r1,|L1.684|
00026e  5508              STRB     r0,[r1,r4]
;;;262            OS_EXIT_CRITICAL();
000270  4630              MOV      r0,r6
000272  f7fffffe          BL       OS_CPU_SR_Restore
000276  e000              B        |L1.634|
                  |L1.632|
;;;263        } else {
;;;264            rt                  =   FALSE;
000278  2500              MOVS     r5,#0
                  |L1.634|
;;;265        }
;;;266        
;;;267        return  rt;
00027a  4628              MOV      r0,r5
;;;268    }
00027c  bd70              POP      {r4-r6,pc}
;;;269    
                          ENDP

00027e  0000              DCW      0x0000
                  |L1.640|
                          DCD      IN_BrkTypeIsDn
                  |L1.644|
                          DCD      IN_TenSum
                  |L1.648|
                          DCD      IN_TenNum
                  |L1.652|
                          DCD      BSP_DIP_BDFunc
                  |L1.656|
                          DCD      IN_BrkIsSample
                  |L1.660|
                          DCD      IN_HDKeyUpNow
                  |L1.664|
                          DCD      IN_HDKeyUpLast
                  |L1.668|
                          DCD      IN_HDKeyDnNow
                  |L1.672|
                          DCD      IN_HDKeyDnLast
                  |L1.676|
                          DCD      IN_TaskScanStk
                  |L1.680|
                          DCD      IN_TaskScan
                  |L1.684|
                          DCD      IN_BrkIsBroken
                  |L1.688|
                          DCD      IN_TEN_MULTIPLE
                  |L1.692|
                          DCD      IN_BRK_LEVEL

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  IN_TaskScanStk
                          %        512

                          AREA ||.data||, DATA, ALIGN=2

                  IN_TEN_MULTIPLE
000000  14                DCB      0x14
                  IN_BRK_LEVEL
000001  01                DCB      0x01
                  IN_BrkTypeIsDn
000002  00                DCB      0x00
                  IN_BrkIsSample
000003  00                DCB      0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  IN_TenSum
                          DCD      0x00000000
                          DCD      0x00000000
                  IN_TenNum
                          DCD      0x00000000
                          DCD      0x00000000
                  IN_BrkIsBroken
000018  0000              DCB      0x00,0x00
                  IN_HDKeyUpLast
00001a  0000              DCB      0x00,0x00
                  IN_HDKeyUpNow
00001c  0000              DCB      0x00,0x00
                  IN_HDKeyDnLast
00001e  0000              DCB      0x00,0x00
                  IN_HDKeyDnNow
000020  0000              DCB      0x00,0x00
