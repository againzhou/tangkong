; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\os_flag.o --depend=.\exe\os_flag.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\os_flag.crf ..\Source\OS\uCOS-II\Source\os_flag.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSFlagAccept PROC
;;;91     #if OS_FLAG_ACCEPT_EN > 0
;;;92     OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;93     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
;;;94         OS_FLAGS      flags_rdy;
;;;95         INT8U         result;
;;;96         BOOLEAN       consume;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR     cpu_sr = 0;
00000c  f04f0b00          MOV      r11,#0
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103    #if OS_ARG_CHK_EN > 0
;;;104        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000010  b916              CBNZ     r6,|L1.24|
;;;105            return ((OS_FLAGS)0);
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;106        }
;;;107        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;108            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;109            return ((OS_FLAGS)0);
;;;110        }
;;;111    #endif
;;;112        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;113            *perr = OS_ERR_EVENT_TYPE;
;;;114            return ((OS_FLAGS)0);
;;;115        }
;;;116        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;117        if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
;;;118            wait_type &= ~OS_FLAG_CONSUME;
;;;119            consume    = OS_TRUE;
;;;120        } else {
;;;121            consume    = OS_FALSE;
;;;122        }
;;;123    /*$PAGE*/
;;;124        *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
;;;125        OS_ENTER_CRITICAL();
;;;126        switch (wait_type) {
;;;127            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;128                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;129                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;130                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;131                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;132                     }
;;;133                 } else {
;;;134                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;135                 }
;;;136                 OS_EXIT_CRITICAL();
;;;137                 break;
;;;138    
;;;139            case OS_FLAG_WAIT_SET_ANY:
;;;140                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
;;;141                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;142                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;143                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;144                     }
;;;145                 } else {
;;;146                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;147                 }
;;;148                 OS_EXIT_CRITICAL();
;;;149                 break;
;;;150    
;;;151    #if OS_FLAG_WAIT_CLR_EN > 0
;;;152            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;153                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;154                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;155                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;156                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;157                     }
;;;158                 } else {
;;;159                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;160                 }
;;;161                 OS_EXIT_CRITICAL();
;;;162                 break;
;;;163    
;;;164            case OS_FLAG_WAIT_CLR_ANY:
;;;165                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;166                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;167                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;168                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;169                     }
;;;170                 } else {
;;;171                     *perr = OS_ERR_FLAG_NOT_RDY;
;;;172                 }
;;;173                 OS_EXIT_CRITICAL();
;;;174                 break;
;;;175    #endif
;;;176    
;;;177            default:
;;;178                 OS_EXIT_CRITICAL();
;;;179                 flags_rdy = (OS_FLAGS)0;
;;;180                 *perr     = OS_ERR_FLAG_WAIT_TYPE;
;;;181                 break;
;;;182        }
;;;183        return (flags_rdy);
;;;184    }
000014  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.24|
000018  b91d              CBNZ     r5,|L1.34|
00001a  206e              MOVS     r0,#0x6e              ;108
00001c  7030              STRB     r0,[r6,#0]            ;108
00001e  2000              MOVS     r0,#0                 ;109
000020  e7f8              B        |L1.20|
                  |L1.34|
000022  7828              LDRB     r0,[r5,#0]            ;112
000024  2805              CMP      r0,#5                 ;112
000026  d003              BEQ      |L1.48|
000028  2001              MOVS     r0,#1                 ;113
00002a  7030              STRB     r0,[r6,#0]            ;113
00002c  2000              MOVS     r0,#0                 ;114
00002e  e7f1              B        |L1.20|
                  |L1.48|
000030  f0090a80          AND      r10,r9,#0x80          ;116
000034  f1ba0f00          CMP      r10,#0                ;117
000038  d004              BEQ      |L1.68|
00003a  f0290980          BIC      r9,r9,#0x80           ;118
00003e  f04f0801          MOV      r8,#1                 ;119
000042  e001              B        |L1.72|
                  |L1.68|
000044  f04f0800          MOV      r8,#0                 ;121
                  |L1.72|
000048  2000              MOVS     r0,#0                 ;124
00004a  7030              STRB     r0,[r6,#0]            ;124
00004c  f7fffffe          BL       OS_CPU_SR_Save
000050  4683              MOV      r11,r0                ;125
000052  f1b90f00          CMP      r9,#0                 ;126
000056  d02c              BEQ      |L1.178|
000058  f1b90f01          CMP      r9,#1                 ;126
00005c  d03b              BEQ      |L1.214|
00005e  f1b90f02          CMP      r9,#2                 ;126
000062  d003              BEQ      |L1.108|
000064  f1b90f03          CMP      r9,#3                 ;126
000068  d146              BNE      |L1.248|
00006a  e011              B        |L1.144|
                  |L1.108|
00006c  8928              LDRH     r0,[r5,#8]            ;128
00006e  ea000407          AND      r4,r0,r7              ;128
000072  42bc              CMP      r4,r7                 ;129
000074  d106              BNE      |L1.132|
000076  f1b80f01          CMP      r8,#1                 ;130
00007a  d105              BNE      |L1.136|
00007c  8928              LDRH     r0,[r5,#8]            ;131
00007e  43a0              BICS     r0,r0,r4              ;131
000080  8128              STRH     r0,[r5,#8]            ;131
000082  e001              B        |L1.136|
                  |L1.132|
000084  2070              MOVS     r0,#0x70              ;134
000086  7030              STRB     r0,[r6,#0]            ;134
                  |L1.136|
000088  4658              MOV      r0,r11                ;136
00008a  f7fffffe          BL       OS_CPU_SR_Restore
00008e  e03a              B        |L1.262|
                  |L1.144|
000090  8928              LDRH     r0,[r5,#8]            ;140
000092  ea000407          AND      r4,r0,r7              ;140
000096  b134              CBZ      r4,|L1.166|
000098  f1b80f01          CMP      r8,#1                 ;142
00009c  d105              BNE      |L1.170|
00009e  8928              LDRH     r0,[r5,#8]            ;143
0000a0  43a0              BICS     r0,r0,r4              ;143
0000a2  8128              STRH     r0,[r5,#8]            ;143
0000a4  e001              B        |L1.170|
                  |L1.166|
0000a6  2070              MOVS     r0,#0x70              ;146
0000a8  7030              STRB     r0,[r6,#0]            ;146
                  |L1.170|
0000aa  4658              MOV      r0,r11                ;148
0000ac  f7fffffe          BL       OS_CPU_SR_Restore
0000b0  e029              B        |L1.262|
                  |L1.178|
0000b2  8928              LDRH     r0,[r5,#8]            ;153
0000b4  ea270400          BIC      r4,r7,r0              ;153
0000b8  42bc              CMP      r4,r7                 ;154
0000ba  d106              BNE      |L1.202|
0000bc  f1b80f01          CMP      r8,#1                 ;155
0000c0  d105              BNE      |L1.206|
0000c2  8928              LDRH     r0,[r5,#8]            ;156
0000c4  4320              ORRS     r0,r0,r4              ;156
0000c6  8128              STRH     r0,[r5,#8]            ;156
0000c8  e001              B        |L1.206|
                  |L1.202|
0000ca  2070              MOVS     r0,#0x70              ;159
0000cc  7030              STRB     r0,[r6,#0]            ;159
                  |L1.206|
0000ce  4658              MOV      r0,r11                ;161
0000d0  f7fffffe          BL       OS_CPU_SR_Restore
0000d4  e017              B        |L1.262|
                  |L1.214|
0000d6  8928              LDRH     r0,[r5,#8]            ;165
0000d8  ea270400          BIC      r4,r7,r0              ;165
0000dc  b134              CBZ      r4,|L1.236|
0000de  f1b80f01          CMP      r8,#1                 ;167
0000e2  d105              BNE      |L1.240|
0000e4  8928              LDRH     r0,[r5,#8]            ;168
0000e6  4320              ORRS     r0,r0,r4              ;168
0000e8  8128              STRH     r0,[r5,#8]            ;168
0000ea  e001              B        |L1.240|
                  |L1.236|
0000ec  2070              MOVS     r0,#0x70              ;171
0000ee  7030              STRB     r0,[r6,#0]            ;171
                  |L1.240|
0000f0  4658              MOV      r0,r11                ;173
0000f2  f7fffffe          BL       OS_CPU_SR_Restore
0000f6  e006              B        |L1.262|
                  |L1.248|
0000f8  4658              MOV      r0,r11                ;178
0000fa  f7fffffe          BL       OS_CPU_SR_Restore
0000fe  2400              MOVS     r4,#0                 ;179
000100  206f              MOVS     r0,#0x6f              ;180
000102  7030              STRB     r0,[r6,#0]            ;180
000104  bf00              NOP                            ;181
                  |L1.262|
000106  bf00              NOP                            ;137
000108  4620              MOV      r0,r4                 ;183
00010a  e783              B        |L1.20|
;;;185    #endif
                          ENDP

                  OSFlagCreate PROC
;;;207    
;;;208    OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
00010c  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000110  4606              MOV      r6,r0
000112  460d              MOV      r5,r1
;;;210        OS_FLAG_GRP *pgrp;
;;;211    #if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
;;;212        OS_CPU_SR    cpu_sr = 0;
000114  2700              MOVS     r7,#0
;;;213    #endif
;;;214    
;;;215    
;;;216    
;;;217    #if OS_ARG_CHK_EN > 0
;;;218        if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
000116  b915              CBNZ     r5,|L1.286|
;;;219            return ((OS_FLAG_GRP *)0);
000118  2000              MOVS     r0,#0
                  |L1.282|
;;;220        }
;;;221    #endif
;;;222        if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
;;;223            *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
;;;224            return ((OS_FLAG_GRP *)0);
;;;225        }
;;;226        OS_ENTER_CRITICAL();
;;;227        pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
;;;228        if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
;;;229                                                        /* Adjust free list                                */
;;;230            OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
;;;231            pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
;;;232            pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
;;;233            pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
;;;234    #if OS_FLAG_NAME_SIZE > 1
;;;235            pgrp->OSFlagName[0]  = '?';
;;;236            pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;237    #endif
;;;238            OS_EXIT_CRITICAL();
;;;239            *perr                = OS_ERR_NONE;
;;;240        } else {
;;;241            OS_EXIT_CRITICAL();
;;;242            *perr                = OS_ERR_FLAG_GRP_DEPLETED;
;;;243        }
;;;244        return (pgrp);                                  /* Return pointer to event flag group              */
;;;245    }
00011a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.286|
00011e  48fd              LDR      r0,|L1.1300|
000120  7800              LDRB     r0,[r0,#0]            ;222  ; OSIntNesting
000122  2800              CMP      r0,#0                 ;222
000124  dd03              BLE      |L1.302|
000126  2010              MOVS     r0,#0x10              ;223
000128  7028              STRB     r0,[r5,#0]            ;223
00012a  2000              MOVS     r0,#0                 ;224
00012c  e7f5              B        |L1.282|
                  |L1.302|
00012e  f7fffffe          BL       OS_CPU_SR_Save
000132  4607              MOV      r7,r0                 ;226
000134  48f8              LDR      r0,|L1.1304|
000136  6804              LDR      r4,[r0,#0]            ;227  ; OSFlagFreeList
000138  b194              CBZ      r4,|L1.352|
00013a  6800              LDR      r0,[r0,#0]            ;230  ; OSFlagFreeList
00013c  6840              LDR      r0,[r0,#4]            ;230
00013e  49f6              LDR      r1,|L1.1304|
000140  6008              STR      r0,[r1,#0]            ;230  ; OSFlagFreeList
000142  2005              MOVS     r0,#5                 ;231
000144  7020              STRB     r0,[r4,#0]            ;231
000146  8126              STRH     r6,[r4,#8]            ;232
000148  2000              MOVS     r0,#0                 ;233
00014a  6060              STR      r0,[r4,#4]            ;233
00014c  203f              MOVS     r0,#0x3f              ;235
00014e  72a0              STRB     r0,[r4,#0xa]          ;235
000150  2100              MOVS     r1,#0                 ;236
000152  72e1              STRB     r1,[r4,#0xb]          ;236
000154  4638              MOV      r0,r7                 ;238
000156  f7fffffe          BL       OS_CPU_SR_Restore
00015a  2000              MOVS     r0,#0                 ;239
00015c  7028              STRB     r0,[r5,#0]            ;239
00015e  e004              B        |L1.362|
                  |L1.352|
000160  4638              MOV      r0,r7                 ;241
000162  f7fffffe          BL       OS_CPU_SR_Restore
000166  2072              MOVS     r0,#0x72              ;242
000168  7028              STRB     r0,[r5,#0]            ;242
                  |L1.362|
00016a  4620              MOV      r0,r4                 ;244
00016c  e7d5              B        |L1.282|
;;;246    
                          ENDP

                  OS_FlagUnlink PROC
;;;1144   
;;;1145   void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
00016e  b530              PUSH     {r4,r5,lr}
;;;1146   {
000170  4601              MOV      r1,r0
;;;1147   #if OS_TASK_DEL_EN > 0
;;;1148       OS_TCB       *ptcb;
;;;1149   #endif
;;;1150       OS_FLAG_GRP  *pgrp;
;;;1151       OS_FLAG_NODE *pnode_prev;
;;;1152       OS_FLAG_NODE *pnode_next;
;;;1153   
;;;1154   
;;;1155       pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
000172  684a              LDR      r2,[r1,#4]
;;;1156       pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
000174  6808              LDR      r0,[r1,#0]
;;;1157       if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
000176  b92a              CBNZ     r2,|L1.388|
;;;1158           pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
000178  68cc              LDR      r4,[r1,#0xc]
;;;1159           pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
00017a  6060              STR      r0,[r4,#4]
;;;1160           if (pnode_next != (OS_FLAG_NODE *)0) {
00017c  b128              CBZ      r0,|L1.394|
;;;1161               pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
00017e  2500              MOVS     r5,#0
000180  6045              STR      r5,[r0,#4]
000182  e002              B        |L1.394|
                  |L1.388|
;;;1162           }
;;;1163       } else {                                                    /* No,  A node somewhere in the list   */
;;;1164           pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
000184  6010              STR      r0,[r2,#0]
;;;1165           if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
000186  b100              CBZ      r0,|L1.394|
;;;1166               pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
000188  6042              STR      r2,[r0,#4]
                  |L1.394|
;;;1167           }
;;;1168       }
;;;1169   #if OS_TASK_DEL_EN > 0
;;;1170       ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
00018a  688b              LDR      r3,[r1,#8]
;;;1171       ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
00018c  2500              MOVS     r5,#0
00018e  629d              STR      r5,[r3,#0x28]
;;;1172   #endif
;;;1173   }
000190  bd30              POP      {r4,r5,pc}
;;;1174   #endif
                          ENDP

                  OS_FlagTaskRdy PROC
;;;1100   
;;;1101   static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
000192  b5f0              PUSH     {r4-r7,lr}
;;;1102   {
000194  4606              MOV      r6,r0
000196  460f              MOV      r7,r1
;;;1103       OS_TCB   *ptcb;
;;;1104       BOOLEAN   sched;
;;;1105   
;;;1106   
;;;1107       ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
000198  68b4              LDR      r4,[r6,#8]
;;;1108       ptcb->OSTCBDly       = 0;
00019a  2000              MOVS     r0,#0
00019c  f104042c          ADD      r4,r4,#0x2c
0001a0  8060              STRH     r0,[r4,#2]
;;;1109       ptcb->OSTCBFlagsRdy  = flags_rdy;
0001a2  8027              STRH     r7,[r4,#0]
;;;1110       ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
0001a4  7920              LDRB     r0,[r4,#4]
0001a6  f0200020          BIC      r0,r0,#0x20
0001aa  7120              STRB     r0,[r4,#4]
;;;1111       ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
0001ac  f04f0000          MOV      r0,#0
0001b0  7160              STRB     r0,[r4,#5]
;;;1112       if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
0001b2  7920              LDRB     r0,[r4,#4]
0001b4  f1a4042c          SUB      r4,r4,#0x2c
0001b8  b9a8              CBNZ     r0,|L1.486|
;;;1113           OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
0001ba  f1040434          ADD      r4,r4,#0x34
0001be  78a0              LDRB     r0,[r4,#2]
0001c0  49d6              LDR      r1,|L1.1308|
0001c2  7809              LDRB     r1,[r1,#0]  ; OSRdyGrp
0001c4  ea400001          ORR      r0,r0,r1
0001c8  49d4              LDR      r1,|L1.1308|
0001ca  7008              STRB     r0,[r1,#0]
;;;1114           OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
0001cc  7820              LDRB     r0,[r4,#0]
0001ce  49d4              LDR      r1,|L1.1312|
0001d0  5c08              LDRB     r0,[r1,r0]
0001d2  7861              LDRB     r1,[r4,#1]
0001d4  ea400001          ORR      r0,r0,r1
0001d8  f8141934          LDRB     r1,[r4],#-0x34
0001dc  4ad0              LDR      r2,|L1.1312|
0001de  5450              STRB     r0,[r2,r1]
;;;1115           sched                   = OS_TRUE;
0001e0  f04f0501          MOV      r5,#1
0001e4  e000              B        |L1.488|
                  |L1.486|
;;;1116       } else {
;;;1117           sched                   = OS_FALSE;
0001e6  2500              MOVS     r5,#0
                  |L1.488|
;;;1118       }
;;;1119       OS_FlagUnlink(pnode);
0001e8  4630              MOV      r0,r6
0001ea  f7fffffe          BL       OS_FlagUnlink
;;;1120       return (sched);
0001ee  4628              MOV      r0,r5
;;;1121   }
0001f0  bdf0              POP      {r4-r7,pc}
;;;1122   
                          ENDP

                  OSFlagDel PROC
;;;284    #if OS_FLAG_DEL_EN > 0
;;;285    OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
0001f2  e92d47f0          PUSH     {r4-r10,lr}
;;;286    {
0001f6  4604              MOV      r4,r0
0001f8  4689              MOV      r9,r1
0001fa  4615              MOV      r5,r2
;;;287        BOOLEAN       tasks_waiting;
;;;288        OS_FLAG_NODE *pnode;
;;;289        OS_FLAG_GRP  *pgrp_return;
;;;290    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;291        OS_CPU_SR     cpu_sr = 0;
0001fc  f04f0a00          MOV      r10,#0
;;;292    #endif
;;;293    
;;;294    
;;;295    
;;;296    #if OS_ARG_CHK_EN > 0
;;;297        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000200  b915              CBNZ     r5,|L1.520|
;;;298            return (pgrp);
000202  4620              MOV      r0,r4
                  |L1.516|
;;;299        }
;;;300        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;301            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;302            return (pgrp);
;;;303        }
;;;304    #endif
;;;305        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;306            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;307            return (pgrp);
;;;308        }
;;;309        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
;;;310            *perr = OS_ERR_EVENT_TYPE;
;;;311            return (pgrp);
;;;312        }
;;;313        OS_ENTER_CRITICAL();
;;;314        if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
;;;315            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;316        } else {
;;;317            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;318        }
;;;319        switch (opt) {
;;;320            case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
;;;321                 if (tasks_waiting == OS_FALSE) {
;;;322    #if OS_FLAG_NAME_SIZE > 1
;;;323                     pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
;;;324                     pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;325    #endif
;;;326                     pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;327                     pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
;;;328                     pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;329                     OSFlagFreeList       = pgrp;
;;;330                     OS_EXIT_CRITICAL();
;;;331                     *perr                = OS_ERR_NONE;
;;;332                     pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
;;;333                 } else {
;;;334                     OS_EXIT_CRITICAL();
;;;335                     *perr                = OS_ERR_TASK_WAITING;
;;;336                     pgrp_return          = pgrp;
;;;337                 }
;;;338                 break;
;;;339    
;;;340            case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
;;;341                 pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;342                 while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
;;;343                     (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
;;;344                     pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
;;;345                 }
;;;346    #if OS_FLAG_NAME_SIZE > 1
;;;347                 pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
;;;348                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
;;;349    #endif
;;;350                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;351                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
;;;352                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
;;;353                 OSFlagFreeList       = pgrp;
;;;354                 OS_EXIT_CRITICAL();
;;;355                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;356                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;357                 }
;;;358                 *perr = OS_ERR_NONE;
;;;359                 pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
;;;360                 break;
;;;361    
;;;362            default:
;;;363                 OS_EXIT_CRITICAL();
;;;364                 *perr                = OS_ERR_INVALID_OPT;
;;;365                 pgrp_return          = pgrp;
;;;366                 break;
;;;367        }
;;;368        return (pgrp_return);
;;;369    }
000204  e8bd87f0          POP      {r4-r10,pc}
                  |L1.520|
000208  b91c              CBNZ     r4,|L1.530|
00020a  206e              MOVS     r0,#0x6e              ;301
00020c  7028              STRB     r0,[r5,#0]            ;301
00020e  4620              MOV      r0,r4                 ;302
000210  e7f8              B        |L1.516|
                  |L1.530|
000212  48c0              LDR      r0,|L1.1300|
000214  7800              LDRB     r0,[r0,#0]            ;305  ; OSIntNesting
000216  2800              CMP      r0,#0                 ;305
000218  dd03              BLE      |L1.546|
00021a  200f              MOVS     r0,#0xf               ;306
00021c  7028              STRB     r0,[r5,#0]            ;306
00021e  4620              MOV      r0,r4                 ;307
000220  e7f0              B        |L1.516|
                  |L1.546|
000222  7820              LDRB     r0,[r4,#0]            ;309
000224  2805              CMP      r0,#5                 ;309
000226  d003              BEQ      |L1.560|
000228  2001              MOVS     r0,#1                 ;310
00022a  7028              STRB     r0,[r5,#0]            ;310
00022c  4620              MOV      r0,r4                 ;311
00022e  e7e9              B        |L1.516|
                  |L1.560|
000230  f7fffffe          BL       OS_CPU_SR_Save
000234  4682              MOV      r10,r0                ;313
000236  6860              LDR      r0,[r4,#4]            ;314
000238  b108              CBZ      r0,|L1.574|
00023a  2701              MOVS     r7,#1                 ;315
00023c  e000              B        |L1.576|
                  |L1.574|
00023e  2700              MOVS     r7,#0                 ;317
                  |L1.576|
000240  f1b90f00          CMP      r9,#0                 ;319
000244  d003              BEQ      |L1.590|
000246  f1b90f01          CMP      r9,#1                 ;319
00024a  d140              BNE      |L1.718|
00024c  e01b              B        |L1.646|
                  |L1.590|
00024e  b99f              CBNZ     r7,|L1.632|
000250  203f              MOVS     r0,#0x3f              ;323
000252  72a0              STRB     r0,[r4,#0xa]          ;323
000254  2100              MOVS     r1,#0                 ;324
000256  72e1              STRB     r1,[r4,#0xb]          ;324
000258  2000              MOVS     r0,#0                 ;326
00025a  7020              STRB     r0,[r4,#0]            ;326
00025c  48ae              LDR      r0,|L1.1304|
00025e  6800              LDR      r0,[r0,#0]            ;327  ; OSFlagFreeList
000260  6060              STR      r0,[r4,#4]            ;327
000262  2000              MOVS     r0,#0                 ;328
000264  8120              STRH     r0,[r4,#8]            ;328
000266  48ac              LDR      r0,|L1.1304|
000268  6004              STR      r4,[r0,#0]            ;329  ; OSFlagFreeList
00026a  4650              MOV      r0,r10                ;330
00026c  f7fffffe          BL       OS_CPU_SR_Restore
000270  2000              MOVS     r0,#0                 ;331
000272  7028              STRB     r0,[r5,#0]            ;331
000274  2600              MOVS     r6,#0                 ;332
000276  e005              B        |L1.644|
                  |L1.632|
000278  4650              MOV      r0,r10                ;334
00027a  f7fffffe          BL       OS_CPU_SR_Restore
00027e  2049              MOVS     r0,#0x49              ;335
000280  7028              STRB     r0,[r5,#0]            ;335
000282  4626              MOV      r6,r4                 ;336
                  |L1.644|
000284  e02a              B        |L1.732|
                  |L1.646|
000286  f8d48004          LDR      r8,[r4,#4]            ;341
00028a  e005              B        |L1.664|
                  |L1.652|
00028c  2100              MOVS     r1,#0                 ;343
00028e  4640              MOV      r0,r8                 ;343
000290  f7fffffe          BL       OS_FlagTaskRdy
000294  f8d88000          LDR      r8,[r8,#0]            ;344
                  |L1.664|
000298  f1b80f00          CMP      r8,#0                 ;342
00029c  d1f6              BNE      |L1.652|
00029e  203f              MOVS     r0,#0x3f              ;347
0002a0  72a0              STRB     r0,[r4,#0xa]          ;347
0002a2  2100              MOVS     r1,#0                 ;348
0002a4  72e1              STRB     r1,[r4,#0xb]          ;348
0002a6  2000              MOVS     r0,#0                 ;350
0002a8  7020              STRB     r0,[r4,#0]            ;350
0002aa  489b              LDR      r0,|L1.1304|
0002ac  6800              LDR      r0,[r0,#0]            ;351  ; OSFlagFreeList
0002ae  6060              STR      r0,[r4,#4]            ;351
0002b0  2000              MOVS     r0,#0                 ;352
0002b2  8120              STRH     r0,[r4,#8]            ;352
0002b4  4898              LDR      r0,|L1.1304|
0002b6  6004              STR      r4,[r0,#0]            ;353  ; OSFlagFreeList
0002b8  4650              MOV      r0,r10                ;354
0002ba  f7fffffe          BL       OS_CPU_SR_Restore
0002be  2f01              CMP      r7,#1                 ;355
0002c0  d101              BNE      |L1.710|
0002c2  f7fffffe          BL       OS_Sched
                  |L1.710|
0002c6  2000              MOVS     r0,#0                 ;358
0002c8  7028              STRB     r0,[r5,#0]            ;358
0002ca  2600              MOVS     r6,#0                 ;359
0002cc  e006              B        |L1.732|
                  |L1.718|
0002ce  4650              MOV      r0,r10                ;363
0002d0  f7fffffe          BL       OS_CPU_SR_Restore
0002d4  2007              MOVS     r0,#7                 ;364
0002d6  7028              STRB     r0,[r5,#0]            ;364
0002d8  4626              MOV      r6,r4                 ;365
0002da  bf00              NOP                            ;366
                  |L1.732|
0002dc  bf00              NOP                            ;338
0002de  4630              MOV      r0,r6                 ;368
0002e0  e790              B        |L1.516|
;;;370    #endif
                          ENDP

                  OSFlagNameGet PROC
;;;395    #if OS_FLAG_NAME_SIZE > 1
;;;396    INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
0002e2  e92d41f0          PUSH     {r4-r8,lr}
;;;397    {
0002e6  4605              MOV      r5,r0
0002e8  460e              MOV      r6,r1
0002ea  4614              MOV      r4,r2
;;;398        INT8U      len;
;;;399    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;400        OS_CPU_SR  cpu_sr = 0;
0002ec  2700              MOVS     r7,#0
;;;401    #endif
;;;402    
;;;403    
;;;404    
;;;405    #if OS_ARG_CHK_EN > 0
;;;406        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
0002ee  b914              CBNZ     r4,|L1.758|
;;;407            return (0);
0002f0  2000              MOVS     r0,#0
                  |L1.754|
;;;408        }
;;;409        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;410            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;411            return (0);
;;;412        }
;;;413        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;414            *perr = OS_ERR_PNAME_NULL;
;;;415            return (0);
;;;416        }
;;;417    #endif
;;;418        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;419            *perr = OS_ERR_NAME_GET_ISR;
;;;420            return (0);
;;;421        }
;;;422        OS_ENTER_CRITICAL();
;;;423        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;424            OS_EXIT_CRITICAL();
;;;425            *perr = OS_ERR_EVENT_TYPE;
;;;426            return (0);
;;;427        }
;;;428        len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
;;;429        OS_EXIT_CRITICAL();
;;;430        *perr = OS_ERR_NONE;
;;;431        return (len);
;;;432    }
0002f2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.758|
0002f6  b91d              CBNZ     r5,|L1.768|
0002f8  206e              MOVS     r0,#0x6e              ;410
0002fa  7020              STRB     r0,[r4,#0]            ;410
0002fc  2000              MOVS     r0,#0                 ;411
0002fe  e7f8              B        |L1.754|
                  |L1.768|
000300  b91e              CBNZ     r6,|L1.778|
000302  200c              MOVS     r0,#0xc               ;414
000304  7020              STRB     r0,[r4,#0]            ;414
000306  2000              MOVS     r0,#0                 ;415
000308  e7f3              B        |L1.754|
                  |L1.778|
00030a  4882              LDR      r0,|L1.1300|
00030c  7800              LDRB     r0,[r0,#0]            ;418  ; OSIntNesting
00030e  2800              CMP      r0,#0                 ;418
000310  dd03              BLE      |L1.794|
000312  2011              MOVS     r0,#0x11              ;419
000314  7020              STRB     r0,[r4,#0]            ;419
000316  2000              MOVS     r0,#0                 ;420
000318  e7eb              B        |L1.754|
                  |L1.794|
00031a  f7fffffe          BL       OS_CPU_SR_Save
00031e  4607              MOV      r7,r0                 ;422
000320  7828              LDRB     r0,[r5,#0]            ;423
000322  2805              CMP      r0,#5                 ;423
000324  d006              BEQ      |L1.820|
000326  4638              MOV      r0,r7                 ;424
000328  f7fffffe          BL       OS_CPU_SR_Restore
00032c  2001              MOVS     r0,#1                 ;425
00032e  7020              STRB     r0,[r4,#0]            ;425
000330  2000              MOVS     r0,#0                 ;426
000332  e7de              B        |L1.754|
                  |L1.820|
000334  f105010a          ADD      r1,r5,#0xa            ;428
000338  4630              MOV      r0,r6                 ;428
00033a  f7fffffe          BL       OS_StrCopy
00033e  4680              MOV      r8,r0                 ;428
000340  4638              MOV      r0,r7                 ;429
000342  f7fffffe          BL       OS_CPU_SR_Restore
000346  2000              MOVS     r0,#0                 ;430
000348  7020              STRB     r0,[r4,#0]            ;430
00034a  4640              MOV      r0,r8                 ;431
00034c  e7d1              B        |L1.754|
;;;433    #endif
                          ENDP

                  OSFlagNameSet PROC
;;;459    #if OS_FLAG_NAME_SIZE > 1
;;;460    void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
00034e  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000352  4605              MOV      r5,r0
000354  460e              MOV      r6,r1
000356  4614              MOV      r4,r2
;;;462        INT8U      len;
;;;463    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;464        OS_CPU_SR  cpu_sr = 0;
000358  f04f0800          MOV      r8,#0
;;;465    #endif
;;;466    
;;;467    
;;;468    
;;;469    #if OS_ARG_CHK_EN > 0
;;;470        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00035c  b90c              CBNZ     r4,|L1.866|
                  |L1.862|
;;;471            return;
;;;472        }
;;;473        if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
;;;474            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;475            return;
;;;476        }
;;;477        if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
;;;478            *perr = OS_ERR_PNAME_NULL;
;;;479            return;
;;;480        }
;;;481    #endif
;;;482        if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
;;;483            *perr = OS_ERR_NAME_SET_ISR;
;;;484            return;
;;;485        }
;;;486        OS_ENTER_CRITICAL();
;;;487        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
;;;488            OS_EXIT_CRITICAL();
;;;489            *perr = OS_ERR_EVENT_TYPE;
;;;490            return;
;;;491        }
;;;492        len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
;;;493        if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
;;;494            OS_EXIT_CRITICAL();
;;;495            *perr = OS_ERR_FLAG_NAME_TOO_LONG;
;;;496            return;
;;;497        }
;;;498        (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
;;;499        OS_EXIT_CRITICAL();
;;;500        *perr = OS_ERR_NONE;
;;;501        return;
;;;502    }
00035e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.866|
000362  b915              CBNZ     r5,|L1.874|
000364  206e              MOVS     r0,#0x6e              ;474
000366  7020              STRB     r0,[r4,#0]            ;474
000368  e7f9              B        |L1.862|
                  |L1.874|
00036a  b916              CBNZ     r6,|L1.882|
00036c  200c              MOVS     r0,#0xc               ;478
00036e  7020              STRB     r0,[r4,#0]            ;478
000370  e7f5              B        |L1.862|
                  |L1.882|
000372  4868              LDR      r0,|L1.1300|
000374  7800              LDRB     r0,[r0,#0]            ;482  ; OSIntNesting
000376  2800              CMP      r0,#0                 ;482
000378  dd02              BLE      |L1.896|
00037a  2012              MOVS     r0,#0x12              ;483
00037c  7020              STRB     r0,[r4,#0]            ;483
00037e  e7ee              B        |L1.862|
                  |L1.896|
000380  f7fffffe          BL       OS_CPU_SR_Save
000384  4680              MOV      r8,r0                 ;486
000386  7828              LDRB     r0,[r5,#0]            ;487
000388  2805              CMP      r0,#5                 ;487
00038a  d005              BEQ      |L1.920|
00038c  4640              MOV      r0,r8                 ;488
00038e  f7fffffe          BL       OS_CPU_SR_Restore
000392  2001              MOVS     r0,#1                 ;489
000394  7020              STRB     r0,[r4,#0]            ;489
000396  e7e2              B        |L1.862|
                  |L1.920|
000398  4630              MOV      r0,r6                 ;492
00039a  f7fffffe          BL       OS_StrLen
00039e  4607              MOV      r7,r0                 ;492
0003a0  2f0f              CMP      r7,#0xf               ;493
0003a2  dd05              BLE      |L1.944|
0003a4  4640              MOV      r0,r8                 ;494
0003a6  f7fffffe          BL       OS_CPU_SR_Restore
0003aa  2073              MOVS     r0,#0x73              ;495
0003ac  7020              STRB     r0,[r4,#0]            ;495
0003ae  e7d6              B        |L1.862|
                  |L1.944|
0003b0  4631              MOV      r1,r6                 ;498
0003b2  f105000a          ADD      r0,r5,#0xa            ;498
0003b6  f7fffffe          BL       OS_StrCopy
0003ba  4640              MOV      r0,r8                 ;499
0003bc  f7fffffe          BL       OS_CPU_SR_Restore
0003c0  2000              MOVS     r0,#0                 ;500
0003c2  7020              STRB     r0,[r4,#0]            ;500
0003c4  bf00              NOP                            ;501
0003c6  e7ca              B        |L1.862|
;;;503    #endif
                          ENDP

                  OS_FlagBlock PROC
;;;987    
;;;988    static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
0003c8  b5f0              PUSH     {r4-r7,lr}
;;;989    {
0003ca  4614              MOV      r4,r2
0003cc  9e05              LDR      r6,[sp,#0x14]
;;;990        OS_FLAG_NODE  *pnode_next;
;;;991        INT8U          y;
;;;992    
;;;993    
;;;994        OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
0003ce  4f55              LDR      r7,|L1.1316|
0003d0  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003d2  f8977030          LDRB     r7,[r7,#0x30]
0003d6  f0470720          ORR      r7,r7,#0x20
0003da  f8dfc148          LDR      r12,|L1.1316|
0003de  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
0003e2  f88c7030          STRB     r7,[r12,#0x30]
;;;995        OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
0003e6  2700              MOVS     r7,#0
0003e8  f8dfc138          LDR      r12,|L1.1316|
0003ec  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
0003f0  f88c7031          STRB     r7,[r12,#0x31]
;;;996        OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
0003f4  4f4b              LDR      r7,|L1.1316|
0003f6  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003f8  85fe              STRH     r6,[r7,#0x2e]
;;;997    #if OS_TASK_DEL_EN > 0
;;;998        OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
0003fa  4f4a              LDR      r7,|L1.1316|
0003fc  683f              LDR      r7,[r7,#0]  ; OSTCBCur
0003fe  62b9              STR      r1,[r7,#0x28]
;;;999    #endif
;;;1000       pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
000400  820c              STRH     r4,[r1,#0x10]
;;;1001       pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
000402  748b              STRB     r3,[r1,#0x12]
;;;1002       pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
000404  4f47              LDR      r7,|L1.1316|
000406  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000408  608f              STR      r7,[r1,#8]
;;;1003       pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
00040a  6847              LDR      r7,[r0,#4]
00040c  600f              STR      r7,[r1,#0]
;;;1004       pnode->OSFlagNodePrev     = (void *)0;
00040e  2700              MOVS     r7,#0
000410  604f              STR      r7,[r1,#4]
;;;1005       pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
000412  60c8              STR      r0,[r1,#0xc]
;;;1006       pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
000414  6845              LDR      r5,[r0,#4]
;;;1007       if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
000416  b105              CBZ      r5,|L1.1050|
;;;1008           pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
000418  6069              STR      r1,[r5,#4]
                  |L1.1050|
;;;1009       }
;;;1010       pgrp->OSFlagWaitList = (void *)pnode;
00041a  6041              STR      r1,[r0,#4]
;;;1011   
;;;1012       y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
00041c  4f41              LDR      r7,|L1.1316|
00041e  683f              LDR      r7,[r7,#0]  ; OSTCBCur
000420  f8972034          LDRB     r2,[r7,#0x34]
;;;1013       OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
000424  4f3e              LDR      r7,|L1.1312|
000426  5cbf              LDRB     r7,[r7,r2]
000428  f8dfc0f8          LDR      r12,|L1.1316|
00042c  f8dcc000          LDR      r12,[r12,#0]  ; OSTCBCur
000430  f89cc035          LDRB     r12,[r12,#0x35]
000434  ea27070c          BIC      r7,r7,r12
000438  f8dfc0e4          LDR      r12,|L1.1312|
00043c  f80c7002          STRB     r7,[r12,r2]
;;;1014       if (OSRdyTbl[y] == 0x00) {
000440  4667              MOV      r7,r12
000442  5cbf              LDRB     r7,[r7,r2]
000444  b95f              CBNZ     r7,|L1.1118|
;;;1015           OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
000446  4f37              LDR      r7,|L1.1316|
000448  683f              LDR      r7,[r7,#0]  ; OSTCBCur
00044a  f897c036          LDRB     r12,[r7,#0x36]
00044e  4f33              LDR      r7,|L1.1308|
000450  783f              LDRB     r7,[r7,#0]  ; OSRdyGrp
000452  ea27070c          BIC      r7,r7,r12
000456  f8dfc0c4          LDR      r12,|L1.1308|
00045a  f88c7000          STRB     r7,[r12,#0]
                  |L1.1118|
;;;1016       }
;;;1017   }
00045e  bdf0              POP      {r4-r7,pc}
;;;1018   
                          ENDP

                  OSFlagPend PROC
;;;559    
;;;560    OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
000460  e92d4fff          PUSH     {r0-r11,lr}
;;;561    {
000464  b087              SUB      sp,sp,#0x1c
000466  4605              MOV      r5,r0
000468  460f              MOV      r7,r1
00046a  4691              MOV      r9,r2
00046c  9e14              LDR      r6,[sp,#0x50]
;;;562        OS_FLAG_NODE  node;
;;;563        OS_FLAGS      flags_rdy;
;;;564        INT8U         result;
;;;565        INT8U         pend_stat;
;;;566        BOOLEAN       consume;
;;;567    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;568        OS_CPU_SR     cpu_sr = 0;
00046e  2000              MOVS     r0,#0
000470  9001              STR      r0,[sp,#4]
;;;569    #endif
;;;570    
;;;571    
;;;572    
;;;573    #if OS_ARG_CHK_EN > 0
;;;574        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
000472  b916              CBNZ     r6,|L1.1146|
                  |L1.1140|
;;;575            return ((OS_FLAGS)0);
;;;576        }
;;;577        if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
;;;578            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;579            return ((OS_FLAGS)0);
;;;580        }
;;;581    #endif
;;;582        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;583            *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
;;;584            return ((OS_FLAGS)0);
;;;585        }
;;;586        if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
;;;587            *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
;;;588            return ((OS_FLAGS)0);
;;;589        }
;;;590        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return ((OS_FLAGS)0);
;;;593        }
;;;594        result = (INT8U)(wait_type & OS_FLAG_CONSUME);
;;;595        if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
;;;596            wait_type &= ~(INT8U)OS_FLAG_CONSUME;
;;;597            consume    = OS_TRUE;
;;;598        } else {
;;;599            consume    = OS_FALSE;
;;;600        }
;;;601    /*$PAGE*/
;;;602        OS_ENTER_CRITICAL();
;;;603        switch (wait_type) {
;;;604            case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
;;;605                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
;;;606                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;607                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;608                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
;;;609                     }
;;;610                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;611                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;612                     *perr                   = OS_ERR_NONE;
;;;613                     return (flags_rdy);
;;;614                 } else {                                      /* Block task until events occur or timeout */
;;;615                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;616                     OS_EXIT_CRITICAL();
;;;617                 }
;;;618                 break;
;;;619    
;;;620            case OS_FLAG_WAIT_SET_ANY:
;;;621                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
;;;622                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
;;;623                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;624                         pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
;;;625                     }
;;;626                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;627                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;628                     *perr                   = OS_ERR_NONE;
;;;629                     return (flags_rdy);
;;;630                 } else {                                      /* Block task until events occur or timeout */
;;;631                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;632                     OS_EXIT_CRITICAL();
;;;633                 }
;;;634                 break;
;;;635    
;;;636    #if OS_FLAG_WAIT_CLR_EN > 0
;;;637            case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
;;;638                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
;;;639                 if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
;;;640                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;641                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
;;;642                     }
;;;643                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;644                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;645                     *perr                   = OS_ERR_NONE;
;;;646                     return (flags_rdy);
;;;647                 } else {                                      /* Block task until events occur or timeout */
;;;648                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;649                     OS_EXIT_CRITICAL();
;;;650                 }
;;;651                 break;
;;;652    
;;;653            case OS_FLAG_WAIT_CLR_ANY:
;;;654                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
;;;655                 if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
;;;656                     if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
;;;657                         pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
;;;658                     }
;;;659                     OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
;;;660                     OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
;;;661                     *perr                   = OS_ERR_NONE;
;;;662                     return (flags_rdy);
;;;663                 } else {                                      /* Block task until events occur or timeout */
;;;664                     OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
;;;665                     OS_EXIT_CRITICAL();
;;;666                 }
;;;667                 break;
;;;668    #endif
;;;669    
;;;670            default:
;;;671                 OS_EXIT_CRITICAL();
;;;672                 flags_rdy = (OS_FLAGS)0;
;;;673                 *perr      = OS_ERR_FLAG_WAIT_TYPE;
;;;674                 return (flags_rdy);
;;;675        }
;;;676    /*$PAGE*/
;;;677        OS_Sched();                                            /* Find next HPT ready to run               */
;;;678        OS_ENTER_CRITICAL();
;;;679        if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
;;;680            pend_stat                = OSTCBCur->OSTCBStatPend;
;;;681            OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;682            OS_FlagUnlink(&node);
;;;683            OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
;;;684            OS_EXIT_CRITICAL();
;;;685            flags_rdy                = (OS_FLAGS)0;
;;;686            switch (pend_stat) {
;;;687                case OS_STAT_PEND_ABORT:
;;;688                     *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
;;;689                     break;
;;;690    
;;;691                case OS_STAT_PEND_TO:
;;;692                default:
;;;693                     *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
;;;694                     break;
;;;695            }
;;;696            return (flags_rdy);
;;;697        }
;;;698        flags_rdy = OSTCBCur->OSTCBFlagsRdy;
;;;699        if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
;;;700            switch (wait_type) {
;;;701                case OS_FLAG_WAIT_SET_ALL:
;;;702                case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
;;;703                     pgrp->OSFlagFlags &= ~flags_rdy;
;;;704                     break;
;;;705    
;;;706    #if OS_FLAG_WAIT_CLR_EN > 0
;;;707                case OS_FLAG_WAIT_CLR_ALL:
;;;708                case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
;;;709                     pgrp->OSFlagFlags |=  flags_rdy;
;;;710                     break;
;;;711    #endif
;;;712                default:
;;;713                     OS_EXIT_CRITICAL();
;;;714                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;715                     return ((OS_FLAGS)0);
;;;716            }
;;;717        }
;;;718        OS_EXIT_CRITICAL();
;;;719        *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
;;;720        return (flags_rdy);
;;;721    }
000474  b00b              ADD      sp,sp,#0x2c
000476  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1146|
00047a  b91d              CBNZ     r5,|L1.1156|
00047c  206e              MOVS     r0,#0x6e              ;578
00047e  7030              STRB     r0,[r6,#0]            ;578
000480  2000              MOVS     r0,#0                 ;579
000482  e7f7              B        |L1.1140|
                  |L1.1156|
000484  4823              LDR      r0,|L1.1300|
000486  7800              LDRB     r0,[r0,#0]            ;582  ; OSIntNesting
000488  2800              CMP      r0,#0                 ;582
00048a  dd03              BLE      |L1.1172|
00048c  2002              MOVS     r0,#2                 ;583
00048e  7030              STRB     r0,[r6,#0]            ;583
000490  2000              MOVS     r0,#0                 ;584
000492  e7ef              B        |L1.1140|
                  |L1.1172|
000494  4824              LDR      r0,|L1.1320|
000496  7800              LDRB     r0,[r0,#0]            ;586  ; OSLockNesting
000498  2800              CMP      r0,#0                 ;586
00049a  dd03              BLE      |L1.1188|
00049c  200d              MOVS     r0,#0xd               ;587
00049e  7030              STRB     r0,[r6,#0]            ;587
0004a0  2000              MOVS     r0,#0                 ;588
0004a2  e7e7              B        |L1.1140|
                  |L1.1188|
0004a4  7828              LDRB     r0,[r5,#0]            ;590
0004a6  2805              CMP      r0,#5                 ;590
0004a8  d003              BEQ      |L1.1202|
0004aa  2001              MOVS     r0,#1                 ;591
0004ac  7030              STRB     r0,[r6,#0]            ;591
0004ae  2000              MOVS     r0,#0                 ;592
0004b0  e7e0              B        |L1.1140|
                  |L1.1202|
0004b2  f0090a80          AND      r10,r9,#0x80          ;594
0004b6  f1ba0f00          CMP      r10,#0                ;595
0004ba  d004              BEQ      |L1.1222|
0004bc  f0290980          BIC      r9,r9,#0x80           ;596
0004c0  f04f0801          MOV      r8,#1                 ;597
0004c4  e001              B        |L1.1226|
                  |L1.1222|
0004c6  f04f0800          MOV      r8,#0                 ;599
                  |L1.1226|
0004ca  f7fffffe          BL       OS_CPU_SR_Save
0004ce  9001              STR      r0,[sp,#4]            ;602
0004d0  f1b90f00          CMP      r9,#0                 ;603
0004d4  d056              BEQ      |L1.1412|
0004d6  f1b90f01          CMP      r9,#1                 ;603
0004da  d076              BEQ      |L1.1482|
0004dc  f1b90f02          CMP      r9,#2                 ;603
0004e0  d003              BEQ      |L1.1258|
0004e2  f1b90f03          CMP      r9,#3                 ;603
0004e6  d16f              BNE      |L1.1480|
0004e8  e02c              B        |L1.1348|
                  |L1.1258|
0004ea  8928              LDRH     r0,[r5,#8]            ;605
0004ec  ea000407          AND      r4,r0,r7              ;605
0004f0  42bc              CMP      r4,r7                 ;606
0004f2  d11b              BNE      |L1.1324|
0004f4  f1b80f01          CMP      r8,#1                 ;607
0004f8  d102              BNE      |L1.1280|
0004fa  8928              LDRH     r0,[r5,#8]            ;608
0004fc  43a0              BICS     r0,r0,r4              ;608
0004fe  8128              STRH     r0,[r5,#8]            ;608
                  |L1.1280|
000500  4808              LDR      r0,|L1.1316|
000502  6800              LDR      r0,[r0,#0]            ;610  ; OSTCBCur
000504  8584              STRH     r4,[r0,#0x2c]         ;610
000506  9801              LDR      r0,[sp,#4]            ;611
000508  f7fffffe          BL       OS_CPU_SR_Restore
00050c  2000              MOVS     r0,#0                 ;612
00050e  7030              STRB     r0,[r6,#0]            ;612
000510  4620              MOV      r0,r4                 ;613
000512  e7af              B        |L1.1140|
                  |L1.1300|
                          DCD      OSIntNesting
                  |L1.1304|
                          DCD      OSFlagFreeList
                  |L1.1308|
                          DCD      OSRdyGrp
                  |L1.1312|
                          DCD      OSRdyTbl
                  |L1.1316|
                          DCD      OSTCBCur
                  |L1.1320|
                          DCD      OSLockNesting
                  |L1.1324|
00052c  9b0a              LDR      r3,[sp,#0x28]         ;615
00052e  9300              STR      r3,[sp,#0]            ;615
000530  464b              MOV      r3,r9                 ;615
000532  463a              MOV      r2,r7                 ;615
000534  a902              ADD      r1,sp,#8              ;615
000536  4628              MOV      r0,r5                 ;615
000538  f7fffffe          BL       OS_FlagBlock
00053c  9801              LDR      r0,[sp,#4]            ;616
00053e  f7fffffe          BL       OS_CPU_SR_Restore
000542  e06a              B        |L1.1562|
                  |L1.1348|
000544  8928              LDRH     r0,[r5,#8]            ;621
000546  ea000407          AND      r4,r0,r7              ;621
00054a  b17c              CBZ      r4,|L1.1388|
00054c  f1b80f01          CMP      r8,#1                 ;623
000550  d102              BNE      |L1.1368|
000552  8928              LDRH     r0,[r5,#8]            ;624
000554  43a0              BICS     r0,r0,r4              ;624
000556  8128              STRH     r0,[r5,#8]            ;624
                  |L1.1368|
000558  48d7              LDR      r0,|L1.2232|
00055a  6800              LDR      r0,[r0,#0]            ;626  ; OSTCBCur
00055c  8584              STRH     r4,[r0,#0x2c]         ;626
00055e  9801              LDR      r0,[sp,#4]            ;627
000560  f7fffffe          BL       OS_CPU_SR_Restore
000564  2000              MOVS     r0,#0                 ;628
000566  7030              STRB     r0,[r6,#0]            ;628
000568  4620              MOV      r0,r4                 ;629
00056a  e783              B        |L1.1140|
                  |L1.1388|
00056c  9b0a              LDR      r3,[sp,#0x28]         ;631
00056e  9300              STR      r3,[sp,#0]            ;631
000570  464b              MOV      r3,r9                 ;631
000572  463a              MOV      r2,r7                 ;631
000574  a902              ADD      r1,sp,#8              ;631
000576  4628              MOV      r0,r5                 ;631
000578  f7fffffe          BL       OS_FlagBlock
00057c  9801              LDR      r0,[sp,#4]            ;632
00057e  f7fffffe          BL       OS_CPU_SR_Restore
000582  e04a              B        |L1.1562|
                  |L1.1412|
000584  8928              LDRH     r0,[r5,#8]            ;638
000586  ea270400          BIC      r4,r7,r0              ;638
00058a  42bc              CMP      r4,r7                 ;639
00058c  d10f              BNE      |L1.1454|
00058e  f1b80f01          CMP      r8,#1                 ;640
000592  d102              BNE      |L1.1434|
000594  8928              LDRH     r0,[r5,#8]            ;641
000596  4320              ORRS     r0,r0,r4              ;641
000598  8128              STRH     r0,[r5,#8]            ;641
                  |L1.1434|
00059a  48c7              LDR      r0,|L1.2232|
00059c  6800              LDR      r0,[r0,#0]            ;643  ; OSTCBCur
00059e  8584              STRH     r4,[r0,#0x2c]         ;643
0005a0  9801              LDR      r0,[sp,#4]            ;644
0005a2  f7fffffe          BL       OS_CPU_SR_Restore
0005a6  2000              MOVS     r0,#0                 ;645
0005a8  7030              STRB     r0,[r6,#0]            ;645
0005aa  4620              MOV      r0,r4                 ;646
0005ac  e762              B        |L1.1140|
                  |L1.1454|
0005ae  9b0a              LDR      r3,[sp,#0x28]         ;648
0005b0  9300              STR      r3,[sp,#0]            ;648
0005b2  464b              MOV      r3,r9                 ;648
0005b4  463a              MOV      r2,r7                 ;648
0005b6  a902              ADD      r1,sp,#8              ;648
0005b8  4628              MOV      r0,r5                 ;648
0005ba  f7fffffe          BL       OS_FlagBlock
0005be  9801              LDR      r0,[sp,#4]            ;649
0005c0  f7fffffe          BL       OS_CPU_SR_Restore
0005c4  e029              B        |L1.1562|
0005c6  e000              B        |L1.1482|
                  |L1.1480|
0005c8  e01f              B        |L1.1546|
                  |L1.1482|
0005ca  8928              LDRH     r0,[r5,#8]            ;654
0005cc  ea270400          BIC      r4,r7,r0              ;654
0005d0  b17c              CBZ      r4,|L1.1522|
0005d2  f1b80f01          CMP      r8,#1                 ;656
0005d6  d102              BNE      |L1.1502|
0005d8  8928              LDRH     r0,[r5,#8]            ;657
0005da  4320              ORRS     r0,r0,r4              ;657
0005dc  8128              STRH     r0,[r5,#8]            ;657
                  |L1.1502|
0005de  48b6              LDR      r0,|L1.2232|
0005e0  6800              LDR      r0,[r0,#0]            ;659  ; OSTCBCur
0005e2  8584              STRH     r4,[r0,#0x2c]         ;659
0005e4  9801              LDR      r0,[sp,#4]            ;660
0005e6  f7fffffe          BL       OS_CPU_SR_Restore
0005ea  2000              MOVS     r0,#0                 ;661
0005ec  7030              STRB     r0,[r6,#0]            ;661
0005ee  4620              MOV      r0,r4                 ;662
0005f0  e740              B        |L1.1140|
                  |L1.1522|
0005f2  9b0a              LDR      r3,[sp,#0x28]         ;664
0005f4  9300              STR      r3,[sp,#0]            ;664
0005f6  464b              MOV      r3,r9                 ;664
0005f8  463a              MOV      r2,r7                 ;664
0005fa  a902              ADD      r1,sp,#8              ;664
0005fc  4628              MOV      r0,r5                 ;664
0005fe  f7fffffe          BL       OS_FlagBlock
000602  9801              LDR      r0,[sp,#4]            ;665
000604  f7fffffe          BL       OS_CPU_SR_Restore
000608  e007              B        |L1.1562|
                  |L1.1546|
00060a  9801              LDR      r0,[sp,#4]            ;671
00060c  f7fffffe          BL       OS_CPU_SR_Restore
000610  2400              MOVS     r4,#0                 ;672
000612  206f              MOVS     r0,#0x6f              ;673
000614  7030              STRB     r0,[r6,#0]            ;673
000616  4620              MOV      r0,r4                 ;674
000618  e72c              B        |L1.1140|
                  |L1.1562|
00061a  bf00              NOP                            ;618
00061c  f7fffffe          BL       OS_Sched
000620  f7fffffe          BL       OS_CPU_SR_Save
000624  9001              STR      r0,[sp,#4]            ;678
000626  48a4              LDR      r0,|L1.2232|
000628  6800              LDR      r0,[r0,#0]            ;679  ; OSTCBCur
00062a  f8900031          LDRB     r0,[r0,#0x31]         ;679
00062e  b320              CBZ      r0,|L1.1658|
000630  48a1              LDR      r0,|L1.2232|
000632  6800              LDR      r0,[r0,#0]            ;680  ; OSTCBCur
000634  f890b031          LDRB     r11,[r0,#0x31]        ;680
000638  2000              MOVS     r0,#0                 ;681
00063a  499f              LDR      r1,|L1.2232|
00063c  6809              LDR      r1,[r1,#0]            ;681  ; OSTCBCur
00063e  f8810031          STRB     r0,[r1,#0x31]         ;681
000642  a802              ADD      r0,sp,#8              ;682
000644  f7fffffe          BL       OS_FlagUnlink
000648  2000              MOVS     r0,#0                 ;683
00064a  499b              LDR      r1,|L1.2232|
00064c  6809              LDR      r1,[r1,#0]            ;683  ; OSTCBCur
00064e  f8810030          STRB     r0,[r1,#0x30]         ;683
000652  9801              LDR      r0,[sp,#4]            ;684
000654  f7fffffe          BL       OS_CPU_SR_Restore
000658  2400              MOVS     r4,#0                 ;685
00065a  f1bb0f01          CMP      r11,#1                ;686
00065e  d006              BEQ      |L1.1646|
000660  f1bb0f02          CMP      r11,#2                ;686
000664  d102              BNE      |L1.1644|
000666  200e              MOVS     r0,#0xe               ;688
000668  7030              STRB     r0,[r6,#0]            ;688
00066a  e003              B        |L1.1652|
                  |L1.1644|
00066c  bf00              NOP                            ;691
                  |L1.1646|
00066e  200a              MOVS     r0,#0xa               ;693
000670  7030              STRB     r0,[r6,#0]            ;693
000672  bf00              NOP                            ;694
                  |L1.1652|
000674  bf00              NOP                            ;689
000676  4620              MOV      r0,r4                 ;696
000678  e6fc              B        |L1.1140|
                  |L1.1658|
00067a  488f              LDR      r0,|L1.2232|
00067c  6800              LDR      r0,[r0,#0]            ;698  ; OSTCBCur
00067e  8d84              LDRH     r4,[r0,#0x2c]         ;698
000680  f1b80f01          CMP      r8,#1                 ;699
000684  d11e              BNE      |L1.1732|
000686  f1b90f00          CMP      r9,#0                 ;700
00068a  d00e              BEQ      |L1.1706|
00068c  f1b90f01          CMP      r9,#1                 ;700
000690  d00c              BEQ      |L1.1708|
000692  f1b90f02          CMP      r9,#2                 ;700
000696  d003              BEQ      |L1.1696|
000698  f1b90f03          CMP      r9,#3                 ;700
00069c  d10a              BNE      |L1.1716|
00069e  e000              B        |L1.1698|
                  |L1.1696|
0006a0  bf00              NOP                            ;702
                  |L1.1698|
0006a2  8928              LDRH     r0,[r5,#8]            ;703
0006a4  43a0              BICS     r0,r0,r4              ;703
0006a6  8128              STRH     r0,[r5,#8]            ;703
0006a8  e00b              B        |L1.1730|
                  |L1.1706|
0006aa  bf00              NOP                            ;708
                  |L1.1708|
0006ac  8928              LDRH     r0,[r5,#8]            ;709
0006ae  4320              ORRS     r0,r0,r4              ;709
0006b0  8128              STRH     r0,[r5,#8]            ;709
0006b2  e006              B        |L1.1730|
                  |L1.1716|
0006b4  9801              LDR      r0,[sp,#4]            ;713
0006b6  f7fffffe          BL       OS_CPU_SR_Restore
0006ba  206f              MOVS     r0,#0x6f              ;714
0006bc  7030              STRB     r0,[r6,#0]            ;714
0006be  2000              MOVS     r0,#0                 ;715
0006c0  e6d8              B        |L1.1140|
                  |L1.1730|
0006c2  bf00              NOP                            ;704
                  |L1.1732|
0006c4  9801              LDR      r0,[sp,#4]            ;718
0006c6  f7fffffe          BL       OS_CPU_SR_Restore
0006ca  2000              MOVS     r0,#0                 ;719
0006cc  7030              STRB     r0,[r6,#0]            ;719
0006ce  4620              MOV      r0,r4                 ;720
0006d0  e6d0              B        |L1.1140|
;;;722    /*$PAGE*/
                          ENDP

                  OSFlagPendGetFlagsRdy PROC
;;;737    
;;;738    OS_FLAGS  OSFlagPendGetFlagsRdy (void)
0006d2  b570              PUSH     {r4-r6,lr}
;;;739    {
;;;740        OS_FLAGS      flags;
;;;741    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;742        OS_CPU_SR     cpu_sr = 0;
0006d4  2500              MOVS     r5,#0
;;;743    #endif
;;;744    
;;;745    
;;;746    
;;;747        OS_ENTER_CRITICAL();
0006d6  f7fffffe          BL       OS_CPU_SR_Save
0006da  4605              MOV      r5,r0
;;;748        flags = OSTCBCur->OSTCBFlagsRdy;
0006dc  4876              LDR      r0,|L1.2232|
0006de  6800              LDR      r0,[r0,#0]  ; OSTCBCur
0006e0  8d84              LDRH     r4,[r0,#0x2c]
;;;749        OS_EXIT_CRITICAL();
0006e2  4628              MOV      r0,r5
0006e4  f7fffffe          BL       OS_CPU_SR_Restore
;;;750        return (flags);
0006e8  4620              MOV      r0,r4
;;;751    }
0006ea  bd70              POP      {r4-r6,pc}
;;;752    
                          ENDP

                  OSFlagPost PROC
;;;794    */
;;;795    OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
0006ec  e92d5ffc          PUSH     {r2-r12,lr}
;;;796    {
0006f0  4604              MOV      r4,r0
0006f2  4689              MOV      r9,r1
0006f4  4692              MOV      r10,r2
0006f6  461e              MOV      r6,r3
;;;797        OS_FLAG_NODE *pnode;
;;;798        BOOLEAN       sched;
;;;799        OS_FLAGS      flags_cur;
;;;800        OS_FLAGS      flags_rdy;
;;;801        BOOLEAN       rdy;
;;;802    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;803        OS_CPU_SR     cpu_sr = 0;
0006f8  2000              MOVS     r0,#0
0006fa  9000              STR      r0,[sp,#0]
;;;804    #endif
;;;805    
;;;806    
;;;807    
;;;808    #if OS_ARG_CHK_EN > 0
;;;809        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
0006fc  b90e              CBNZ     r6,|L1.1794|
                  |L1.1790|
;;;810            return ((OS_FLAGS)0);
;;;811        }
;;;812        if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
;;;813            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;814            return ((OS_FLAGS)0);
;;;815        }
;;;816    #endif
;;;817        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
;;;818            *perr = OS_ERR_EVENT_TYPE;
;;;819            return ((OS_FLAGS)0);
;;;820        }
;;;821    /*$PAGE*/
;;;822        OS_ENTER_CRITICAL();
;;;823        switch (opt) {
;;;824            case OS_FLAG_CLR:
;;;825                 pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
;;;826                 break;
;;;827    
;;;828            case OS_FLAG_SET:
;;;829                 pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
;;;830                 break;
;;;831    
;;;832            default:
;;;833                 OS_EXIT_CRITICAL();                     /* INVALID option                                 */
;;;834                 *perr = OS_ERR_FLAG_INVALID_OPT;
;;;835                 return ((OS_FLAGS)0);
;;;836        }
;;;837        sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
;;;838        pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
;;;839        while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
;;;840            switch (pnode->OSFlagNodeWaitType) {
;;;841                case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
;;;842                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;843                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;844                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;845                         if (rdy == OS_TRUE) {
;;;846                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;847                         }
;;;848                     }
;;;849                     break;
;;;850    
;;;851                case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
;;;852                     flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;853                     if (flags_rdy != (OS_FLAGS)0) {
;;;854                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;855                         if (rdy == OS_TRUE) {
;;;856                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;857                         }
;;;858                     }
;;;859                     break;
;;;860    
;;;861    #if OS_FLAG_WAIT_CLR_EN > 0
;;;862                case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
;;;863                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;864                     if (flags_rdy == pnode->OSFlagNodeFlags) {
;;;865                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;866                         if (rdy == OS_TRUE) {
;;;867                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;868                         }
;;;869                     }
;;;870                     break;
;;;871    
;;;872                case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
;;;873                     flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
;;;874                     if (flags_rdy != (OS_FLAGS)0) {
;;;875                         rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
;;;876                         if (rdy == OS_TRUE) {
;;;877                             sched = OS_TRUE;                     /* When done we will reschedule          */
;;;878                         }
;;;879                     }
;;;880                     break;
;;;881    #endif
;;;882                default:
;;;883                     OS_EXIT_CRITICAL();
;;;884                     *perr = OS_ERR_FLAG_WAIT_TYPE;
;;;885                     return ((OS_FLAGS)0);
;;;886            }
;;;887            pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
;;;888        }
;;;889        OS_EXIT_CRITICAL();
;;;890        if (sched == OS_TRUE) {
;;;891            OS_Sched();
;;;892        }
;;;893        OS_ENTER_CRITICAL();
;;;894        flags_cur = pgrp->OSFlagFlags;
;;;895        OS_EXIT_CRITICAL();
;;;896        *perr     = OS_ERR_NONE;
;;;897        return (flags_cur);
;;;898    }
0006fe  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.1794|
000702  b91c              CBNZ     r4,|L1.1804|
000704  206e              MOVS     r0,#0x6e              ;813
000706  7030              STRB     r0,[r6,#0]            ;813
000708  2000              MOVS     r0,#0                 ;814
00070a  e7f8              B        |L1.1790|
                  |L1.1804|
00070c  7820              LDRB     r0,[r4,#0]            ;817
00070e  2805              CMP      r0,#5                 ;817
000710  d003              BEQ      |L1.1818|
000712  2001              MOVS     r0,#1                 ;818
000714  7030              STRB     r0,[r6,#0]            ;818
000716  2000              MOVS     r0,#0                 ;819
000718  e7f1              B        |L1.1790|
                  |L1.1818|
00071a  f7fffffe          BL       OS_CPU_SR_Save
00071e  9000              STR      r0,[sp,#0]            ;822
000720  f1ba0f00          CMP      r10,#0                ;823
000724  d003              BEQ      |L1.1838|
000726  f1ba0f01          CMP      r10,#1                ;823
00072a  d10a              BNE      |L1.1858|
00072c  e004              B        |L1.1848|
                  |L1.1838|
00072e  8920              LDRH     r0,[r4,#8]            ;825
000730  ea200009          BIC      r0,r0,r9              ;825
000734  8120              STRH     r0,[r4,#8]            ;825
000736  e00b              B        |L1.1872|
                  |L1.1848|
000738  8920              LDRH     r0,[r4,#8]            ;829
00073a  ea400009          ORR      r0,r0,r9              ;829
00073e  8120              STRH     r0,[r4,#8]            ;829
000740  e006              B        |L1.1872|
                  |L1.1858|
000742  9800              LDR      r0,[sp,#0]            ;833
000744  f7fffffe          BL       OS_CPU_SR_Restore
000748  2071              MOVS     r0,#0x71              ;834
00074a  7030              STRB     r0,[r6,#0]            ;834
00074c  2000              MOVS     r0,#0                 ;835
00074e  e7d6              B        |L1.1790|
                  |L1.1872|
000750  bf00              NOP                            ;826
000752  f04f0b00          MOV      r11,#0                ;837
000756  6865              LDR      r5,[r4,#4]            ;838
000758  e055              B        |L1.2054|
                  |L1.1882|
00075a  7ca8              LDRB     r0,[r5,#0x12]         ;840
00075c  b340              CBZ      r0,|L1.1968|
00075e  2801              CMP      r0,#1                 ;840
000760  d038              BEQ      |L1.2004|
000762  2802              CMP      r0,#2                 ;840
000764  d002              BEQ      |L1.1900|
000766  2803              CMP      r0,#3                 ;840
000768  d144              BNE      |L1.2036|
00076a  e011              B        |L1.1936|
                  |L1.1900|
00076c  8920              LDRH     r0,[r4,#8]            ;842
00076e  8a29              LDRH     r1,[r5,#0x10]         ;842
000770  ea000701          AND      r7,r0,r1              ;842
000774  8a28              LDRH     r0,[r5,#0x10]         ;843
000776  42b8              CMP      r0,r7                 ;843
000778  d109              BNE      |L1.1934|
00077a  4639              MOV      r1,r7                 ;844
00077c  4628              MOV      r0,r5                 ;844
00077e  f7fffffe          BL       OS_FlagTaskRdy
000782  4680              MOV      r8,r0                 ;844
000784  f1b80f01          CMP      r8,#1                 ;845
000788  d101              BNE      |L1.1934|
00078a  f04f0b01          MOV      r11,#1                ;846
                  |L1.1934|
00078e  e038              B        |L1.2050|
                  |L1.1936|
000790  8920              LDRH     r0,[r4,#8]            ;852
000792  8a29              LDRH     r1,[r5,#0x10]         ;852
000794  ea000701          AND      r7,r0,r1              ;852
000798  b14f              CBZ      r7,|L1.1966|
00079a  4639              MOV      r1,r7                 ;854
00079c  4628              MOV      r0,r5                 ;854
00079e  f7fffffe          BL       OS_FlagTaskRdy
0007a2  4680              MOV      r8,r0                 ;854
0007a4  f1b80f01          CMP      r8,#1                 ;855
0007a8  d101              BNE      |L1.1966|
0007aa  f04f0b01          MOV      r11,#1                ;856
                  |L1.1966|
0007ae  e028              B        |L1.2050|
                  |L1.1968|
0007b0  8a28              LDRH     r0,[r5,#0x10]         ;863
0007b2  8921              LDRH     r1,[r4,#8]            ;863
0007b4  ea200701          BIC      r7,r0,r1              ;863
0007b8  8a28              LDRH     r0,[r5,#0x10]         ;864
0007ba  42b8              CMP      r0,r7                 ;864
0007bc  d109              BNE      |L1.2002|
0007be  4639              MOV      r1,r7                 ;865
0007c0  4628              MOV      r0,r5                 ;865
0007c2  f7fffffe          BL       OS_FlagTaskRdy
0007c6  4680              MOV      r8,r0                 ;865
0007c8  f1b80f01          CMP      r8,#1                 ;866
0007cc  d101              BNE      |L1.2002|
0007ce  f04f0b01          MOV      r11,#1                ;867
                  |L1.2002|
0007d2  e016              B        |L1.2050|
                  |L1.2004|
0007d4  8a28              LDRH     r0,[r5,#0x10]         ;873
0007d6  8921              LDRH     r1,[r4,#8]            ;873
0007d8  ea200701          BIC      r7,r0,r1              ;873
0007dc  b14f              CBZ      r7,|L1.2034|
0007de  4639              MOV      r1,r7                 ;875
0007e0  4628              MOV      r0,r5                 ;875
0007e2  f7fffffe          BL       OS_FlagTaskRdy
0007e6  4680              MOV      r8,r0                 ;875
0007e8  f1b80f01          CMP      r8,#1                 ;876
0007ec  d101              BNE      |L1.2034|
0007ee  f04f0b01          MOV      r11,#1                ;877
                  |L1.2034|
0007f2  e006              B        |L1.2050|
                  |L1.2036|
0007f4  9800              LDR      r0,[sp,#0]            ;883
0007f6  f7fffffe          BL       OS_CPU_SR_Restore
0007fa  206f              MOVS     r0,#0x6f              ;884
0007fc  7030              STRB     r0,[r6,#0]            ;884
0007fe  2000              MOVS     r0,#0                 ;885
000800  e77d              B        |L1.1790|
                  |L1.2050|
000802  bf00              NOP                            ;849
000804  682d              LDR      r5,[r5,#0]            ;887
                  |L1.2054|
000806  2d00              CMP      r5,#0                 ;839
000808  d1a7              BNE      |L1.1882|
00080a  9800              LDR      r0,[sp,#0]            ;889
00080c  f7fffffe          BL       OS_CPU_SR_Restore
000810  f1bb0f01          CMP      r11,#1                ;890
000814  d101              BNE      |L1.2074|
000816  f7fffffe          BL       OS_Sched
                  |L1.2074|
00081a  f7fffffe          BL       OS_CPU_SR_Save
00081e  9000              STR      r0,[sp,#0]            ;893
000820  8920              LDRH     r0,[r4,#8]            ;894
000822  9001              STR      r0,[sp,#4]            ;894
000824  9800              LDR      r0,[sp,#0]            ;895
000826  f7fffffe          BL       OS_CPU_SR_Restore
00082a  2000              MOVS     r0,#0                 ;896
00082c  7030              STRB     r0,[r6,#0]            ;896
00082e  9801              LDR      r0,[sp,#4]            ;897
000830  e765              B        |L1.1790|
;;;899    /*$PAGE*/
                          ENDP

                  OSFlagQuery PROC
;;;919    #if OS_FLAG_QUERY_EN > 0
;;;920    OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
000832  e92d41f0          PUSH     {r4-r8,lr}
;;;921    {
000836  4605              MOV      r5,r0
000838  460c              MOV      r4,r1
;;;922        OS_FLAGS   flags;
;;;923    #if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
;;;924        OS_CPU_SR  cpu_sr = 0;
00083a  2700              MOVS     r7,#0
;;;925    #endif
;;;926    
;;;927    
;;;928    
;;;929    #if OS_ARG_CHK_EN > 0
;;;930        if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
00083c  b914              CBNZ     r4,|L1.2116|
;;;931            return ((OS_FLAGS)0);
00083e  2000              MOVS     r0,#0
                  |L1.2112|
;;;932        }
;;;933        if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
;;;934            *perr = OS_ERR_FLAG_INVALID_PGRP;
;;;935            return ((OS_FLAGS)0);
;;;936        }
;;;937    #endif
;;;938        if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
;;;939            *perr = OS_ERR_EVENT_TYPE;
;;;940            return ((OS_FLAGS)0);
;;;941        }
;;;942        OS_ENTER_CRITICAL();
;;;943        flags = pgrp->OSFlagFlags;
;;;944        OS_EXIT_CRITICAL();
;;;945        *perr = OS_ERR_NONE;
;;;946        return (flags);                               /* Return the current value of the event flags       */
;;;947    }
000840  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2116|
000844  b91d              CBNZ     r5,|L1.2126|
000846  206e              MOVS     r0,#0x6e              ;934
000848  7020              STRB     r0,[r4,#0]            ;934
00084a  2000              MOVS     r0,#0                 ;935
00084c  e7f8              B        |L1.2112|
                  |L1.2126|
00084e  7828              LDRB     r0,[r5,#0]            ;938
000850  2805              CMP      r0,#5                 ;938
000852  d003              BEQ      |L1.2140|
000854  2001              MOVS     r0,#1                 ;939
000856  7020              STRB     r0,[r4,#0]            ;939
000858  2000              MOVS     r0,#0                 ;940
00085a  e7f1              B        |L1.2112|
                  |L1.2140|
00085c  f7fffffe          BL       OS_CPU_SR_Save
000860  4607              MOV      r7,r0                 ;942
000862  892e              LDRH     r6,[r5,#8]            ;943
000864  4638              MOV      r0,r7                 ;944
000866  f7fffffe          BL       OS_CPU_SR_Restore
00086a  2000              MOVS     r0,#0                 ;945
00086c  7020              STRB     r0,[r4,#0]            ;945
00086e  4630              MOV      r0,r6                 ;946
000870  e7e6              B        |L1.2112|
;;;948    #endif
                          ENDP

                  OS_FlagInit PROC
;;;1034   
;;;1035   void  OS_FlagInit (void)
000872  b570              PUSH     {r4-r6,lr}
;;;1036   {
;;;1037   #if OS_MAX_FLAGS == 1
;;;1038       OSFlagFreeList                 = (OS_FLAG_GRP *)&OSFlagTbl[0];  /* Only ONE event flag group!      */
;;;1039       OSFlagFreeList->OSFlagType     = OS_EVENT_TYPE_UNUSED;
;;;1040       OSFlagFreeList->OSFlagWaitList = (void *)0;
;;;1041       OSFlagFreeList->OSFlagFlags    = (OS_FLAGS)0;
;;;1042   #if OS_FLAG_NAME_SIZE > 1
;;;1043       OSFlagFreeList->OSFlagName[0]  = '?';
;;;1044       OSFlagFreeList->OSFlagName[1]  = OS_ASCII_NUL;
;;;1045   #endif
;;;1046   #endif
;;;1047   
;;;1048   #if OS_MAX_FLAGS >= 2
;;;1049       INT16U       i;
;;;1050       OS_FLAG_GRP *pgrp1;
;;;1051       OS_FLAG_GRP *pgrp2;
;;;1052   
;;;1053   
;;;1054       OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
000874  218c              MOVS     r1,#0x8c
000876  4811              LDR      r0,|L1.2236|
000878  f7fffffe          BL       OS_MemClr
;;;1055       pgrp1 = &OSFlagTbl[0];
00087c  4c0f              LDR      r4,|L1.2236|
;;;1056       pgrp2 = &OSFlagTbl[1];
00087e  f104061c          ADD      r6,r4,#0x1c
;;;1057       for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
000882  2500              MOVS     r5,#0
000884  e00a              B        |L1.2204|
                  |L1.2182|
;;;1058           pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
000886  2000              MOVS     r0,#0
000888  7020              STRB     r0,[r4,#0]
;;;1059           pgrp1->OSFlagWaitList = (void *)pgrp2;
00088a  6066              STR      r6,[r4,#4]
;;;1060   #if OS_FLAG_NAME_SIZE > 1
;;;1061           pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
00088c  203f              MOVS     r0,#0x3f
00088e  72a0              STRB     r0,[r4,#0xa]
;;;1062           pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
000890  2100              MOVS     r1,#0
000892  72e1              STRB     r1,[r4,#0xb]
;;;1063   #endif
;;;1064           pgrp1++;
000894  341c              ADDS     r4,r4,#0x1c
;;;1065           pgrp2++;
000896  361c              ADDS     r6,r6,#0x1c
000898  1c68              ADDS     r0,r5,#1              ;1057
00089a  b285              UXTH     r5,r0                 ;1057
                  |L1.2204|
00089c  2d04              CMP      r5,#4                 ;1057
00089e  dbf2              BLT      |L1.2182|
;;;1066       }
;;;1067       pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
0008a0  2000              MOVS     r0,#0
0008a2  7020              STRB     r0,[r4,#0]
;;;1068       pgrp1->OSFlagWaitList = (void *)0;
0008a4  6060              STR      r0,[r4,#4]
;;;1069   #if OS_FLAG_NAME_SIZE > 1
;;;1070       pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
0008a6  203f              MOVS     r0,#0x3f
0008a8  72a0              STRB     r0,[r4,#0xa]
;;;1071       pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
0008aa  2100              MOVS     r1,#0
0008ac  72e1              STRB     r1,[r4,#0xb]
;;;1072   #endif
;;;1073       OSFlagFreeList        = &OSFlagTbl[0];
0008ae  4803              LDR      r0,|L1.2236|
0008b0  4903              LDR      r1,|L1.2240|
0008b2  6008              STR      r0,[r1,#0]  ; OSFlagFreeList
;;;1074   #endif
;;;1075   }
0008b4  bd70              POP      {r4-r6,pc}
;;;1076   
                          ENDP

0008b6  0000              DCW      0x0000
                  |L1.2232|
                          DCD      OSTCBCur
                  |L1.2236|
                          DCD      OSFlagTbl
                  |L1.2240|
                          DCD      OSFlagFreeList
