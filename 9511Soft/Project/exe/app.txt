; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\app.o --depend=.\exe\app.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\app.crf ..\Source\APP\app.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  App_GetDelay PROC
;;;259    
;;;260    static  u32  App_GetDelay (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;261    {
;;;262        static  const   u8      TaskPrio[]  =   {
;;;263            APP_TASK_START_PRIO,
;;;264            APP_TASK_MOTO_ODD_PRIO,
;;;265            APP_TASK_MOTO_EVEN_PRIO,
;;;266            APP_TASK_IN_SCAN_PRIO,
;;;267            APP_TASK_HDLED_ODD_PRIO,
;;;268            APP_TASK_HDLED_EVEN_PRIO,
;;;269            APP_TASK_USER_IF_PRIO,
;;;270        };
;;;271        
;;;272        u32             i;
;;;273        OS_STK_DATA     StkData;
;;;274        
;;;275        
;;;276        for (i = 0; i < (sizeof(TaskPrio) / sizeof(TaskPrio[0])); i++) {
000002  2400              MOVS     r4,#0
000004  e00c              B        |L1.32|
                  |L1.6|
;;;277            if ((OSTaskStkChk(TaskPrio[i], &StkData) != OS_ERR_NONE) || (StkData.OSFree < StkData.OSUsed)) {
000006  497d              LDR      r1,|L1.508|
000008  5d08              LDRB     r0,[r1,r4]
00000a  4669              MOV      r1,sp
00000c  f7fffffe          BL       OSTaskStkChk
000010  b918              CBNZ     r0,|L1.26|
000012  e9dd0100          LDRD     r0,r1,[sp,#0]
000016  4288              CMP      r0,r1
000018  d201              BCS      |L1.30|
                  |L1.26|
;;;278                return  250;
00001a  20fa              MOVS     r0,#0xfa
                  |L1.28|
;;;279            }
;;;280        }
;;;281        
;;;282        if (BSP_Is924) {
;;;283            return  500;
;;;284        } else {
;;;285            return  750;
;;;286        }
;;;287    }
00001c  bd1c              POP      {r2-r4,pc}
                  |L1.30|
00001e  1c64              ADDS     r4,r4,#1              ;276
                  |L1.32|
000020  2c07              CMP      r4,#7                 ;276
000022  d3f0              BCC      |L1.6|
000024  4876              LDR      r0,|L1.512|
000026  7800              LDRB     r0,[r0,#0]            ;282  ; BSP_Is924
000028  b110              CBZ      r0,|L1.48|
00002a  f44f70fa          MOV      r0,#0x1f4             ;283
00002e  e7f5              B        |L1.28|
                  |L1.48|
000030  f24020ee          MOV      r0,#0x2ee             ;285
000034  e7f2              B        |L1.28|
;;;288    
                          ENDP

                  App_TaskUserIF PROC
;;;293    /// -----------------------------------------------------------------------------------------------------
;;;294    static  void  App_TaskUserIF (void *p_arg)
000036  bf00              NOP      
                  |L1.56|
;;;295    {
;;;296    	 u32 id;
;;;297        (void)p_arg;                        /// 实际无参数, 避免编译报错
;;;298       
;;;299        for ( ; ; ) {
;;;300            OSTimeDlyHMSM(0, 0, 0, App_GetDelay());
000038  f7fffffe          BL       App_GetDelay
00003c  b285              UXTH     r5,r0
00003e  462b              MOV      r3,r5
000040  2200              MOVS     r2,#0
000042  4611              MOV      r1,r2
000044  4610              MOV      r0,r2
000046  f7fffffe          BL       OSTimeDlyHMSM
;;;301            BSP_LED_Toggle(0);
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       BSP_LED_Toggle
;;;302    		if(Secrit_For_LED!=0) //密码不一致
000050  486c              LDR      r0,|L1.516|
000052  7800              LDRB     r0,[r0,#0]  ; Secrit_For_LED
000054  2800              CMP      r0,#0
000056  d0ef              BEQ      |L1.56|
;;;303    		{
;;;304    			BSP_LED_Toggle(1);
000058  2001              MOVS     r0,#1
00005a  f7fffffe          BL       BSP_LED_Toggle
;;;305    			for(id=0;id<BSP_DEVICE_ID_N;id++)
00005e  2400              MOVS     r4,#0
000060  e005              B        |L1.110|
                  |L1.98|
;;;306    				HDLED_Sparkle((BSP_ID_TypeDef)id,1 << 30);
000062  f04f4180          MOV      r1,#0x40000000
000066  b2e0              UXTB     r0,r4
000068  f7fffffe          BL       HDLED_Sparkle
00006c  1c64              ADDS     r4,r4,#1              ;305
                  |L1.110|
00006e  2c02              CMP      r4,#2                 ;305
000070  d2e2              BCS      |L1.56|
000072  e7f6              B        |L1.98|
;;;307    		}
;;;308    
;;;309        }
;;;310    }
;;;311    
                          ENDP

                  App_TaskCreate PROC
;;;234    /// -----------------------------------------------------------------------------------------------------
;;;235    static  void  App_TaskCreate (void)
000074  b500              PUSH     {lr}
;;;236    {
000076  b087              SUB      sp,sp,#0x1c
;;;237        INT8U       os_err;
;;;238        
;;;239        
;;;240        /// 建立用户信息显示任务, 并命名
;;;241        os_err = OSTaskCreateExt((void (*)(void *)) App_TaskUserIF,
000078  2303              MOVS     r3,#3
00007a  2200              MOVS     r2,#0
00007c  2180              MOVS     r1,#0x80
00007e  4862              LDR      r0,|L1.520|
000080  e9cd2303          STRD     r2,r3,[sp,#0xc]
000084  e9cd0101          STRD     r0,r1,[sp,#4]
000088  2317              MOVS     r3,#0x17
00008a  f50072fe          ADD      r2,r0,#0x1fc
00008e  2100              MOVS     r1,#0
000090  485e              LDR      r0,|L1.524|
000092  9300              STR      r3,[sp,#0]
000094  f7fffffe          BL       OSTaskCreateExt
000098  9006              STR      r0,[sp,#0x18]
;;;242                                 (void          * ) 0,
;;;243                                 (OS_STK        * )&App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE - 1],
;;;244                                 (INT8U           ) APP_TASK_USER_IF_PRIO,
;;;245                                 (INT16U          ) APP_TASK_USER_IF_PRIO,
;;;246                                 (OS_STK        * )&App_TaskUserIFStk[0],
;;;247                                 (INT32U          ) APP_TASK_USER_IF_STK_SIZE,
;;;248                                 (void          * ) 0,
;;;249                                 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;250        
;;;251    #if (OS_TASK_NAME_SIZE > 12)
;;;252        OSTaskNameSet(APP_TASK_USER_IF_PRIO, "User IF Task", &os_err);
00009a  aa06              ADD      r2,sp,#0x18
00009c  a15c              ADR      r1,|L1.528|
00009e  2017              MOVS     r0,#0x17
0000a0  f7fffffe          BL       OSTaskNameSet
;;;253    #endif
;;;254        
;;;255    }
0000a4  b007              ADD      sp,sp,#0x1c
0000a6  bd00              POP      {pc}
;;;256    
                          ENDP

                  App_TaskStart PROC
;;;99     /// -----------------------------------------------------------------------------------------------------
;;;100    static  void  App_TaskStart (void *p_arg)
0000a8  f7fffffe          BL       BSP_Init
;;;101    {
;;;102        u16     rx;//,buf[10]={0x00,0x11,0xaa45,0x7788,0x9923,0xee34,0x99,0xdd,0x55,0xeeff};
;;;103        u32     i;
;;;104        
;;;105        (void)p_arg;                                            /// 实际无参数, 避免编译报错
;;;106        
;;;107        BSP_Init();                                             /// Initialize BSP functions.
;;;108        
;;;109                                                                /// 此函数不在OS核内, 移植者提供在os_cpu_c.c
;;;110        OS_CPU_SysTickInit();                                   /// Initialize the SysTick.
0000ac  f7fffffe          BL       OS_CPU_SysTickInit
;;;111    
;;;112    #if (OS_TASK_STAT_EN > 0)
;;;113        OSStatInit();                                           /// Determine CPU capacity. 统计
0000b0  f7fffffe          BL       OSStatInit
;;;114    #endif
;;;115        
;;;116        ////////////////////////////////////////////////////////////
;;;117        //// 是否加入"OSTimeDlyHMSM(0, 0, 1, 0);" ,使统计任务有时间初始化
;;;118        ////////////////////////////////////////////////////////////
;;;119        /// 不用等待了, 其工作由OSStatInit()完成.
;;;120        /// 只是在统计任务没有运行前, OSIdleCtrMax 为0.1S内的累加和; 运行后为1mS内的累加和, 即除100.
;;;121        ///  !! 另外, OSIdleCtrMax 没有包括系统节拍中断的时间, 实际上应该更大. 
;;;122        ///     如果系统节拍钩子函数占用大量时间, 则CPU使用率统计不准确.
;;;123        ///  !! 另外, OSIdleCtrMax 还受到按时间优化影响(1.4倍). 但是, 也许使用率不受优化影响.
;;;124        ///  统计任务执行周期为0.1S
;;;125        
;;;126        
;;;127        C491_Init();                    /// 无任务, 使用中断
0000b4  f7fffffe          BL       C491_Init
;;;128        IN_Init();                      /// 有输入扫描任务
0000b8  f7fffffe          BL       IN_Init
;;;129        HDLED_Init();                   /// 有闪灯任务
0000bc  f7fffffe          BL       HDLED_Init
;;;130        SECURITY_9511_STAT=FALSE;
0000c0  2000              MOVS     r0,#0
0000c2  4957              LDR      r1,|L1.544|
0000c4  7008              STRB     r0,[r1,#0]
;;;131    	MAIN_SECURITY_STAT=FALSE;
0000c6  4957              LDR      r1,|L1.548|
0000c8  7008              STRB     r0,[r1,#0]
;;;132    //                                    /// 开环电机初始化 或 老化
;;;133    //    if (DBG_IsDebug() == FALSE) {   /// 不老化, 正常工作
;;;134    //        if (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP) {
;;;135    //            MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
;;;136    //        } else {
;;;137    //            MOTO_Init(MOTO_USE_CUT, MOTO_USE_CUT);
;;;138    //        }
;;;139    //    } else {
;;;140    ////        MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
;;;141    //        if (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP) {
;;;142    //            MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
;;;143    //        } else {
;;;144    //            MOTO_Init(MOTO_USE_CUT, MOTO_USE_CUT);
;;;145    //        }
;;;146    //        DBG_ALL(8);                 /// 老化8小时
;;;147    //    }
;;;148        
;;;149    //    DBG_IsDebug();              /// !!!!!!!! TEST
;;;150    //    
;;;151    //    if (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP) {
;;;152    //        MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
;;;153    //        if (DBG_IsDebug() != FALSE) {
;;;154    //            DBG_ALL(8);                 /// 老化8小时
;;;155    //        }
;;;156    //    } else {
;;;157    //        MOTO_Init(MOTO_USE_CUT, MOTO_USE_CUT);
;;;158    //    }
;;;159    
;;;160        if (DBG_IsDebug() == FALSE) {       /// 不老化, 正常工作
0000ca  f7fffffe          BL       DBG_IsDebug
0000ce  b960              CBNZ     r0,|L1.234|
;;;161            if (BSP_DIP_BDFunc == BSP_DIP_BD_FUNC_UP) {
0000d0  4855              LDR      r0,|L1.552|
0000d2  7800              LDRB     r0,[r0,#0]  ; BSP_DIP_BDFunc
0000d4  b920              CBNZ     r0,|L1.224|
;;;162                MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
0000d6  2100              MOVS     r1,#0
0000d8  4608              MOV      r0,r1
0000da  f7fffffe          BL       MOTO_Init
0000de  e00e              B        |L1.254|
                  |L1.224|
;;;163            } else {
;;;164                MOTO_Init(MOTO_USE_CUT, MOTO_USE_CUT);
0000e0  2101              MOVS     r1,#1
0000e2  4608              MOV      r0,r1
0000e4  f7fffffe          BL       MOTO_Init
0000e8  e009              B        |L1.254|
                  |L1.234|
;;;165            }
;;;166        } else {                            /// 老化
;;;167            BSP_DIP_BDFunc  =   BSP_DIP_BD_FUNC_UP;
0000ea  2000              MOVS     r0,#0
0000ec  494e              LDR      r1,|L1.552|
0000ee  7008              STRB     r0,[r1,#0]
;;;168            MOTO_Init(MOTO_USE_HGH, MOTO_USE_HGH);
0000f0  2100              MOVS     r1,#0
0000f2  4608              MOV      r0,r1
0000f4  f7fffffe          BL       MOTO_Init
;;;169            DBG_ALL(8);                     /// 8小时
0000f8  2008              MOVS     r0,#8
0000fa  f7fffffe          BL       DBG_ALL
                  |L1.254|
;;;170        }
;;;171    	//memcpy(Key, "012345678901234567890123", sizeof(Key));
;;;172    	Des3PeriKeyInit(&ds3_crypto_des3_ctx_t,Key,sizeof(Key));
0000fe  2218              MOVS     r2,#0x18
000100  494a              LDR      r1,|L1.556|
000102  484b              LDR      r0,|L1.560|
000104  f7fffffe          BL       Des3PeriKeyInit
;;;173      	//crypto_des3_set_key(&ds3_crypto_des3_ctx_t, Key, sizeof(Key));
;;;174       	UID_Change2_D(Get_D,ID_ShunXu);	
000108  494a              LDR      r1,|L1.564|
00010a  484b              LDR      r0,|L1.568|
00010c  f7fffffe          BL       UID_Change2_D
;;;175    	Caculate_120(Get_D,Get_Result);
000110  494a              LDR      r1,|L1.572|
000112  4849              LDR      r0,|L1.568|
000114  f7fffffe          BL       Caculate_120
;;;176    	Get_9511_ID();
000118  f7fffffe          BL       Get_9511_ID
;;;177    	Get_Main_ID();
00011c  f7fffffe          BL       Get_Main_ID
;;;178    //	COM_MainSetPssW(buf, 10);
;;;179    //	COM_MainErasPssW(buf, 10);
;;;180    	if(SECURITY_9511_STAT==TRUE)//如果9511加密了，运行权限降低，等到主控发验证后升高运行权限
000120  483f              LDR      r0,|L1.544|
000122  7800              LDRB     r0,[r0,#0]  ; SECURITY_9511_STAT
000124  2801              CMP      r0,#1
000126  d102              BNE      |L1.302|
;;;181    	{
;;;182    		TreahHold_9511=5;		
000128  2005              MOVS     r0,#5
00012a  4945              LDR      r1,|L1.576|
00012c  7008              STRB     r0,[r1,#0]
                  |L1.302|
;;;183    	}
;;;184    	//如果9511不加密，运行门限是0，所以要将运行门限初始化为0，所有指令都能运行
;;;185     /*	if((Get_Result[0]!=PRO_9511_ID[0])||(Get_Result[1]!=PRO_9511_ID[1])||(Get_Result[3]!=PRO_9511_ID[3])||(Get_Result[2]!=PRO_9511_ID[2]))
;;;186    		{
;;;187    			ID_Sta_9511=FALSE;
;;;188    			while(1)
;;;189    			{
;;;190    				for(i=0;i<0xA0000;i++)
;;;191    					i++;
;;;192    				BSP_LED_Toggle(1);
;;;193    			}
;;;194    		} */ 
;;;195     if(SECURITY_9511_STAT==TRUE)
00012e  483c              LDR      r0,|L1.544|
000130  7800              LDRB     r0,[r0,#0]  ; SECURITY_9511_STAT
000132  2801              CMP      r0,#1
000134  d105              BNE      |L1.322|
;;;196     {
;;;197     	TreahHold_9511=5;
000136  2005              MOVS     r0,#5
000138  4941              LDR      r1,|L1.576|
00013a  7008              STRB     r0,[r1,#0]
;;;198    	Secrit_For_LED=1;
00013c  2001              MOVS     r0,#1
00013e  4931              LDR      r1,|L1.516|
000140  7008              STRB     r0,[r1,#0]
                  |L1.322|
;;;199     }
;;;200        App_TaskCreate();                                       /// Create application tasks.
000142  f7fffffe          BL       App_TaskCreate
;;;201        
;;;202        
;;;203        COM_Init();
000146  f7fffffe          BL       COM_Init
;;;204        
;;;205        
;;;206        
;;;207        for (i = 0; i < BSP_LED_ID_N; i++) {
00014a  2400              MOVS     r4,#0
00014c  e004              B        |L1.344|
                  |L1.334|
;;;208           // IO_Init(io_id_led[i], GPIO_Mode_Out_OD);
;;;209            BSP_LED_Set(i, BSP_LED_OFF);
00014e  2101              MOVS     r1,#1
000150  b2e0              UXTB     r0,r4
000152  f7fffffe          BL       BSP_LED_Set
000156  1c64              ADDS     r4,r4,#1              ;207
                  |L1.344|
000158  2c02              CMP      r4,#2                 ;207
00015a  d3f8              BCC      |L1.334|
;;;210        }
;;;211        while (TRUE) {                                      /// Task body, infinite loop
00015c  e011              B        |L1.386|
                  |L1.350|
;;;212    //        BSP_LED_Toggle(1);
;;;213    ////        OSTimeDlyHMSM(0, 0, 0, 500);
;;;214    //        OSTimeDlyHMSM(0, 0, 0, (BSP_POT_GetAve(BSP_ID_ODD) + BSP_POT_GetAve(BSP_ID_EVEN)) >> 6);
;;;215            
;;;216    //        COM_Init();
;;;217    //        COM_9511();
;;;218    
;;;219            rx  =   C491_ReceiveOne(100);
00015e  2064              MOVS     r0,#0x64
000160  f7fffffe          BL       C491_ReceiveOne
000164  4605              MOV      r5,r0
;;;220            if (rx != C491_R_OVRETIME_NODATA) {
000166  f5a5407f          SUB      r0,r5,#0xff00
00016a  38ff              SUBS     r0,r0,#0xff
00016c  d002              BEQ      |L1.372|
;;;221                COM_RxHandle(rx);
00016e  4628              MOV      r0,r5
000170  f7fffffe          BL       COM_RxHandle
                  |L1.372|
;;;222            }
;;;223            COM_KeyHandle();
000174  f7fffffe          BL       COM_KeyHandle
;;;224        if (BSP_DIP_RedIsSpkl)
000178  4832              LDR      r0,|L1.580|
00017a  7800              LDRB     r0,[r0,#0]  ; BSP_DIP_RedIsSpkl
00017c  b108              CBZ      r0,|L1.386|
;;;225    		COM_DXSparkel();
00017e  f7fffffe          BL       COM_DXSparkel
                  |L1.386|
000182  e7ec              B        |L1.350|
;;;226        }
;;;227    }
;;;228    
                          ENDP

                  main PROC
;;;62     /// -----------------------------------------------------------------------------------------------------
;;;63     int  main (void)
000184  b500              PUSH     {lr}
;;;64     {
000186  b087              SUB      sp,sp,#0x1c
;;;65         INT8U       os_err;
;;;66     //    u32 i;
;;;67         
;;;68     //    BSP_IntDisAll();                        /// Disable all ints until we are ready to accept them
;;;69         SystemInit();
000188  f7fffffe          BL       SystemInit
;;;70         /// if need remap vector,  NVIC_SetVectorTable(,)
;;;71       	
;;;72         OSInit();                               /// Initialize "uC/OS-II, The Real-Time Kernel"
00018c  f7fffffe          BL       OSInit
;;;73         
;;;74         os_err = OSTaskCreateExt((void (*)(void *)) App_TaskStart,              /// 起始任务代码指针
000190  2303              MOVS     r3,#3
000192  2200              MOVS     r2,#0
000194  2180              MOVS     r1,#0x80
000196  482c              LDR      r0,|L1.584|
000198  e9cd2303          STRD     r2,r3,[sp,#0xc]
00019c  f50072fe          ADD      r2,r0,#0x1fc
0001a0  e9cd3000          STRD     r3,r0,[sp,#0]
0001a4  9102              STR      r1,[sp,#8]
0001a6  2100              MOVS     r1,#0
0001a8  4828              LDR      r0,|L1.588|
0001aa  f7fffffe          BL       OSTaskCreateExt
0001ae  9006              STR      r0,[sp,#0x18]
;;;75                                  (void          * ) 0,                          /// 参数指针
;;;76                                                                                 /// 栈顶指针
;;;77                                  (OS_STK        * )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],
;;;78                                  (INT8U           ) APP_TASK_START_PRIO,        /// 优先级
;;;79                                  (INT16U          ) APP_TASK_START_PRIO,        /// 标识, 暂与优先级相同
;;;80                                  (OS_STK        * )&App_TaskStartStk[0],        /// 栈底指针
;;;81                                  (INT32U          ) APP_TASK_START_STK_SIZE,    /// 栈空间大小, 单位为OS_STK
;;;82                                  (void          * ) 0,                          /// TCB扩展, 附属信息
;;;83                                                                                 /// 操作信息
;;;84                                  (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
;;;85     
;;;86     #if (OS_TASK_NAME_SIZE >= 11)                                               /// 任务命名
;;;87         OSTaskNameSet(APP_TASK_START_PRIO, (INT8U      *)"Start Task", &os_err);
0001b0  aa06              ADD      r2,sp,#0x18
0001b2  a127              ADR      r1,|L1.592|
0001b4  2003              MOVS     r0,#3
0001b6  f7fffffe          BL       OSTaskNameSet
;;;88     #endif
;;;89     
;;;90         OSStart();                              /// Start multitasking (i.e. give control to uC/OS-II).
0001ba  f7fffffe          BL       OSStart
;;;91     
;;;92         return (0);
0001be  2000              MOVS     r0,#0
;;;93     }
0001c0  b007              ADD      sp,sp,#0x1c
0001c2  bd00              POP      {pc}
;;;94     
                          ENDP

                  App_TaskCreateHook PROC
;;;343    
;;;344    void  App_TaskCreateHook (OS_TCB *ptcb)
0001c4  4770              BX       lr
;;;345    {
;;;346        
;;;347    }
;;;348    
                          ENDP

                  App_TaskDelHook PROC
;;;360    
;;;361    void  App_TaskDelHook (OS_TCB *ptcb)
0001c6  4770              BX       lr
;;;362    {
;;;363        (void)ptcb;
;;;364    }
;;;365    
                          ENDP

                  App_TaskIdleHook PROC
;;;379    #if OS_VERSION >= 251
;;;380    void  App_TaskIdleHook (void)
0001c8  4770              BX       lr
;;;381    {
;;;382        
;;;383    }
;;;384    #endif
                          ENDP

                  App_TaskStatHook PROC
;;;396    
;;;397    void  App_TaskStatHook (void)
0001ca  4770              BX       lr
;;;398    {
;;;399        
;;;400    }
;;;401    
                          ENDP

                  App_TaskSwHook PROC
;;;419    #if OS_TASK_SW_HOOK_EN > 0
;;;420    void  App_TaskSwHook (void)
0001cc  4770              BX       lr
;;;421    {
;;;422        
;;;423    }
;;;424    #endif
                          ENDP

                  App_TCBInitHook PROC
;;;439    #if OS_VERSION >= 204
;;;440    void  App_TCBInitHook (OS_TCB *ptcb)
0001ce  4770              BX       lr
;;;441    {
;;;442        (void)ptcb;
;;;443    }
;;;444    #endif
                          ENDP

                  App_TimeTickHook PROC
;;;459    u32  Tick_cnt =   OS_TICKS_PER_SEC;
;;;460    void  App_TimeTickHook (void)
0001d0  b510              PUSH     {r4,lr}
;;;461    {
;;;462       #if OS_CRITICAL_METHOD == 3             /// Allocate storage for CPU status register
;;;463        OS_CPU_SR  cpu_sr = 0;
0001d2  2400              MOVS     r4,#0
;;;464    #endif
;;;465        
;;;466        
;;;467        Tick_cnt--;
0001d4  4821              LDR      r0,|L1.604|
0001d6  6800              LDR      r0,[r0,#0]  ; Tick_cnt
0001d8  1e40              SUBS     r0,r0,#1
0001da  4920              LDR      r1,|L1.604|
0001dc  6008              STR      r0,[r1,#0]  ; Tick_cnt
;;;468        if (Tick_cnt == 0) {
0001de  4608              MOV      r0,r1
0001e0  6800              LDR      r0,[r0,#0]  ; Tick_cnt
0001e2  b950              CBNZ     r0,|L1.506|
;;;469            Tick_cnt =   OS_TICKS_PER_SEC/2;
0001e4  f44f70fa          MOV      r0,#0x1f4
0001e8  6008              STR      r0,[r1,#0]  ; Tick_cnt
;;;470            OS_ENTER_CRITICAL();
0001ea  f7fffffe          BL       OS_CPU_SR_Save
0001ee  4604              MOV      r4,r0
;;;471            BSP_SOL_TmrProc();
0001f0  f7fffffe          BL       BSP_SOL_TmrProc
;;;472            OS_EXIT_CRITICAL();
0001f4  4620              MOV      r0,r4
0001f6  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.506|
;;;473        } 
;;;474    }
0001fa  bd10              POP      {r4,pc}
;;;475    #endif
                          ENDP

                  |L1.508|
                          DCD      TaskPrio
                  |L1.512|
                          DCD      BSP_Is924
                  |L1.516|
                          DCD      Secrit_For_LED
                  |L1.520|
                          DCD      App_TaskUserIFStk
                  |L1.524|
                          DCD      App_TaskUserIF
                  |L1.528|
000210  55736572          DCB      "User IF Task",0
000214  20494620
000218  5461736b
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L1.544|
                          DCD      SECURITY_9511_STAT
                  |L1.548|
                          DCD      MAIN_SECURITY_STAT
                  |L1.552|
                          DCD      BSP_DIP_BDFunc
                  |L1.556|
                          DCD      Key
                  |L1.560|
                          DCD      ds3_crypto_des3_ctx_t
                  |L1.564|
                          DCD      ID_ShunXu
                  |L1.568|
                          DCD      Get_D
                  |L1.572|
                          DCD      Get_Result
                  |L1.576|
                          DCD      TreahHold_9511
                  |L1.580|
                          DCD      BSP_DIP_RedIsSpkl
                  |L1.584|
                          DCD      App_TaskStartStk
                  |L1.588|
                          DCD      App_TaskStart
                  |L1.592|
000250  53746172          DCB      "Start Task",0
000254  74205461
000258  736b00  
00025b  00                DCB      0
                  |L1.604|
                          DCD      Tick_cnt

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  App_TaskStartStk
                          %        512
                  App_TaskUserIFStk
                          %        512
                  ds3_crypto_des3_ctx_t
                          %        384
                  Key
                          %        24
                  Get_D
                          %        12
                  Stream_9511_To_Main
                          %        10

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  TaskPrio
000000  030b0c0f          DCB      0x03,0x0b,0x0c,0x0f
000004  131417            DCB      0x13,0x14,0x17

                          AREA ||.data||, DATA, ALIGN=2

                  ds3_key_len
000000  08                DCB      0x08
                  ID_ShunXu
000001  010804            DCB      0x01,0x08,0x04
000004  0300050b          DCB      0x03,0x00,0x05,0x0b
000008  0206070a          DCB      0x02,0x06,0x07,0x0a
00000c  09                DCB      0x09
                  TreahHold_9511
00000d  00                DCB      0x00
                  Secrit_For_LED
00000e  00                DCB      0x00
                  ID_Sta_9511
00000f  01                DCB      0x01
                  ds3_src_tmp
000010  0000ffff          DCB      0x00,0x00,0xff,0xff
000014  ffffffff          DCB      0xff,0xff,0xff,0xff
                  Confirm_status
000018  0000              DCB      0x00,0x00
                  Sec_Number
00001a  0000              DCW      0x0000
                  thir_status
00001c  00                DCB      0x00
                  Speed_pare
00001d  82786e            DCB      0x82,0x78,0x6e
000020  645a              DCB      0x64,0x5a
                  HeadUpDown_Status
000022  0000              DCB      0x00,0x00
                  HeadUpDown
000024  0000              DCB      0x00,0x00
                  UpHeadSpeed
000026  6400              DCB      0x64,0x00
                  Tick_cnt
                          DCD      0x000003e8
                  Get_Result
                          DCD      0x00000000
                  Main_Securit
                          DCD      0x00000000

                  __ARM_use_no_argv EQU 0
