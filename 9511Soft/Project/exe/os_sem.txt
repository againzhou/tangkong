; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\os_sem.o --depend=.\exe\os_sem.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\os_sem.crf ..\Source\OS\uCOS-II\Source\os_sem.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSSemAccept PROC
;;;48     #if OS_SEM_ACCEPT_EN > 0
;;;49     INT16U  OSSemAccept (OS_EVENT *pevent)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  4604              MOV      r4,r0
;;;51         INT16U     cnt;
;;;52     #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;53         OS_CPU_SR  cpu_sr = 0;
000004  2600              MOVS     r6,#0
;;;54     #endif
;;;55     
;;;56     
;;;57     
;;;58     #if OS_ARG_CHK_EN > 0
;;;59         if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000006  b90c              CBNZ     r4,|L1.12|
;;;60             return (0);
000008  2000              MOVS     r0,#0
                  |L1.10|
;;;61         }
;;;62     #endif
;;;63         if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
;;;64             return (0);
;;;65         }
;;;66         OS_ENTER_CRITICAL();
;;;67         cnt = pevent->OSEventCnt;
;;;68         if (cnt > 0) {                                    /* See if resource is available                  */
;;;69             pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
;;;70         }
;;;71         OS_EXIT_CRITICAL();
;;;72         return (cnt);                                     /* Return semaphore count                        */
;;;73     }
00000a  bd70              POP      {r4-r6,pc}
                  |L1.12|
00000c  7820              LDRB     r0,[r4,#0]            ;63
00000e  2803              CMP      r0,#3                 ;63
000010  d001              BEQ      |L1.22|
000012  2000              MOVS     r0,#0                 ;64
000014  e7f9              B        |L1.10|
                  |L1.22|
000016  f7fffffe          BL       OS_CPU_SR_Save
00001a  4606              MOV      r6,r0                 ;66
00001c  8925              LDRH     r5,[r4,#8]            ;67
00001e  2d00              CMP      r5,#0                 ;68
000020  dd02              BLE      |L1.40|
000022  8920              LDRH     r0,[r4,#8]            ;69
000024  1e40              SUBS     r0,r0,#1              ;69
000026  8120              STRH     r0,[r4,#8]            ;69
                  |L1.40|
000028  4630              MOV      r0,r6                 ;71
00002a  f7fffffe          BL       OS_CPU_SR_Restore
00002e  4628              MOV      r0,r5                 ;72
000030  e7eb              B        |L1.10|
;;;74     #endif
                          ENDP

                  OSSemCreate PROC
;;;93     
;;;94     OS_EVENT  *OSSemCreate (INT16U cnt)
000032  b570              PUSH     {r4-r6,lr}
;;;95     {
000034  4605              MOV      r5,r0
;;;96         OS_EVENT  *pevent;
;;;97     #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;98         OS_CPU_SR  cpu_sr = 0;
000036  2600              MOVS     r6,#0
;;;99     #endif
;;;100    
;;;101    
;;;102    
;;;103        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
000038  48f1              LDR      r0,|L1.1024|
00003a  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00003c  2800              CMP      r0,#0
00003e  dd01              BLE      |L1.68|
;;;104            return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
000040  2000              MOVS     r0,#0
                  |L1.66|
;;;105        }
;;;106        OS_ENTER_CRITICAL();
;;;107        pevent = OSEventFreeList;                              /* Get next free event control block        */
;;;108        if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
;;;109            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;110        }
;;;111        OS_EXIT_CRITICAL();
;;;112        if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
;;;113            pevent->OSEventType    = OS_EVENT_TYPE_SEM;
;;;114            pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
;;;115            pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
;;;116    #if OS_EVENT_NAME_SIZE > 1
;;;117            pevent->OSEventName[0] = '?';                      /* Unknown name                             */
;;;118            pevent->OSEventName[1] = OS_ASCII_NUL;
;;;119    #endif
;;;120            OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
;;;121        }
;;;122        return (pevent);
;;;123    }
000042  bd70              POP      {r4-r6,pc}
                  |L1.68|
000044  f7fffffe          BL       OS_CPU_SR_Save
000048  4606              MOV      r6,r0                 ;106
00004a  48ee              LDR      r0,|L1.1028|
00004c  6804              LDR      r4,[r0,#0]            ;107  ; OSEventFreeList
00004e  6800              LDR      r0,[r0,#0]            ;108  ; OSEventFreeList
000050  b120              CBZ      r0,|L1.92|
000052  48ec              LDR      r0,|L1.1028|
000054  6800              LDR      r0,[r0,#0]            ;109  ; OSEventFreeList
000056  6840              LDR      r0,[r0,#4]            ;109
000058  49ea              LDR      r1,|L1.1028|
00005a  6008              STR      r0,[r1,#0]            ;109  ; OSEventFreeList
                  |L1.92|
00005c  4630              MOV      r0,r6                 ;111
00005e  f7fffffe          BL       OS_CPU_SR_Restore
000062  b15c              CBZ      r4,|L1.124|
000064  2003              MOVS     r0,#3                 ;113
000066  7020              STRB     r0,[r4,#0]            ;113
000068  8125              STRH     r5,[r4,#8]            ;114
00006a  2000              MOVS     r0,#0                 ;115
00006c  6060              STR      r0,[r4,#4]            ;115
00006e  203f              MOVS     r0,#0x3f              ;117
000070  73e0              STRB     r0,[r4,#0xf]          ;117
000072  2100              MOVS     r1,#0                 ;118
000074  7421              STRB     r1,[r4,#0x10]         ;118
000076  4620              MOV      r0,r4                 ;120
000078  f7fffffe          BL       OS_EventWaitListInit
                  |L1.124|
00007c  4620              MOV      r0,r4                 ;122
00007e  e7e0              B        |L1.66|
;;;124    
                          ENDP

                  OSSemDel PROC
;;;163    #if OS_SEM_DEL_EN > 0
;;;164    OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000080  e92d47f0          PUSH     {r4-r10,lr}
;;;165    {
000084  4604              MOV      r4,r0
000086  4688              MOV      r8,r1
000088  4615              MOV      r5,r2
;;;166        BOOLEAN    tasks_waiting;
;;;167        OS_EVENT  *pevent_return;
;;;168    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;169        OS_CPU_SR  cpu_sr = 0;
00008a  f04f0900          MOV      r9,#0
;;;170    #endif
;;;171    
;;;172    
;;;173    
;;;174    #if OS_ARG_CHK_EN > 0
;;;175        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00008e  b915              CBNZ     r5,|L1.150|
;;;176            return (pevent);
000090  4620              MOV      r0,r4
                  |L1.146|
;;;177        }
;;;178        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;179            *perr = OS_ERR_PEVENT_NULL;
;;;180            return (pevent);
;;;181        }
;;;182    #endif
;;;183        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
;;;184            *perr = OS_ERR_EVENT_TYPE;
;;;185            return (pevent);
;;;186        }
;;;187        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;188            *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
;;;189            return (pevent);
;;;190        }
;;;191        OS_ENTER_CRITICAL();
;;;192        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
;;;193            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;194        } else {
;;;195            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;196        }
;;;197        switch (opt) {
;;;198            case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
;;;199                 if (tasks_waiting == OS_FALSE) {
;;;200    #if OS_EVENT_NAME_SIZE > 1
;;;201                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;202                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;203    #endif
;;;204                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;205                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;206                     pevent->OSEventCnt     = 0;
;;;207                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;208                     OS_EXIT_CRITICAL();
;;;209                     *perr                  = OS_ERR_NONE;
;;;210                     pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
;;;211                 } else {
;;;212                     OS_EXIT_CRITICAL();
;;;213                     *perr                  = OS_ERR_TASK_WAITING;
;;;214                     pevent_return          = pevent;
;;;215                 }
;;;216                 break;
;;;217    
;;;218            case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
;;;219                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
;;;220                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;221                 }
;;;222    #if OS_EVENT_NAME_SIZE > 1
;;;223                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;224                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;225    #endif
;;;226                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;227                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;228                 pevent->OSEventCnt     = 0;
;;;229                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;230                 OS_EXIT_CRITICAL();
;;;231                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;232                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;233                 }
;;;234                 *perr                  = OS_ERR_NONE;
;;;235                 pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
;;;236                 break;
;;;237    
;;;238            default:
;;;239                 OS_EXIT_CRITICAL();
;;;240                 *perr                  = OS_ERR_INVALID_OPT;
;;;241                 pevent_return          = pevent;
;;;242                 break;
;;;243        }
;;;244        return (pevent_return);
;;;245    }
000092  e8bd87f0          POP      {r4-r10,pc}
                  |L1.150|
000096  b91c              CBNZ     r4,|L1.160|
000098  2004              MOVS     r0,#4                 ;179
00009a  7028              STRB     r0,[r5,#0]            ;179
00009c  4620              MOV      r0,r4                 ;180
00009e  e7f8              B        |L1.146|
                  |L1.160|
0000a0  7820              LDRB     r0,[r4,#0]            ;183
0000a2  2803              CMP      r0,#3                 ;183
0000a4  d003              BEQ      |L1.174|
0000a6  2001              MOVS     r0,#1                 ;184
0000a8  7028              STRB     r0,[r5,#0]            ;184
0000aa  4620              MOV      r0,r4                 ;185
0000ac  e7f1              B        |L1.146|
                  |L1.174|
0000ae  48d4              LDR      r0,|L1.1024|
0000b0  7800              LDRB     r0,[r0,#0]            ;187  ; OSIntNesting
0000b2  2800              CMP      r0,#0                 ;187
0000b4  dd03              BLE      |L1.190|
0000b6  200f              MOVS     r0,#0xf               ;188
0000b8  7028              STRB     r0,[r5,#0]            ;188
0000ba  4620              MOV      r0,r4                 ;189
0000bc  e7e9              B        |L1.146|
                  |L1.190|
0000be  f7fffffe          BL       OS_CPU_SR_Save
0000c2  4681              MOV      r9,r0                 ;191
0000c4  7aa0              LDRB     r0,[r4,#0xa]          ;192
0000c6  b108              CBZ      r0,|L1.204|
0000c8  2701              MOVS     r7,#1                 ;193
0000ca  e000              B        |L1.206|
                  |L1.204|
0000cc  2700              MOVS     r7,#0                 ;195
                  |L1.206|
0000ce  f1b80f00          CMP      r8,#0                 ;197
0000d2  d003              BEQ      |L1.220|
0000d4  f1b80f01          CMP      r8,#1                 ;197
0000d8  d13e              BNE      |L1.344|
0000da  e01b              B        |L1.276|
                  |L1.220|
0000dc  b99f              CBNZ     r7,|L1.262|
0000de  203f              MOVS     r0,#0x3f              ;201
0000e0  73e0              STRB     r0,[r4,#0xf]          ;201
0000e2  2100              MOVS     r1,#0                 ;202
0000e4  7421              STRB     r1,[r4,#0x10]         ;202
0000e6  2000              MOVS     r0,#0                 ;204
0000e8  7020              STRB     r0,[r4,#0]            ;204
0000ea  48c6              LDR      r0,|L1.1028|
0000ec  6800              LDR      r0,[r0,#0]            ;205  ; OSEventFreeList
0000ee  6060              STR      r0,[r4,#4]            ;205
0000f0  2000              MOVS     r0,#0                 ;206
0000f2  8120              STRH     r0,[r4,#8]            ;206
0000f4  48c3              LDR      r0,|L1.1028|
0000f6  6004              STR      r4,[r0,#0]            ;207  ; OSEventFreeList
0000f8  4648              MOV      r0,r9                 ;208
0000fa  f7fffffe          BL       OS_CPU_SR_Restore
0000fe  2000              MOVS     r0,#0                 ;209
000100  7028              STRB     r0,[r5,#0]            ;209
000102  2600              MOVS     r6,#0                 ;210
000104  e005              B        |L1.274|
                  |L1.262|
000106  4648              MOV      r0,r9                 ;212
000108  f7fffffe          BL       OS_CPU_SR_Restore
00010c  2049              MOVS     r0,#0x49              ;213
00010e  7028              STRB     r0,[r5,#0]            ;213
000110  4626              MOV      r6,r4                 ;214
                  |L1.274|
000112  e028              B        |L1.358|
                  |L1.276|
000114  e005              B        |L1.290|
                  |L1.278|
000116  2300              MOVS     r3,#0                 ;220
000118  2201              MOVS     r2,#1                 ;220
00011a  4619              MOV      r1,r3                 ;220
00011c  4620              MOV      r0,r4                 ;220
00011e  f7fffffe          BL       OS_EventTaskRdy
                  |L1.290|
000122  7aa0              LDRB     r0,[r4,#0xa]          ;219
000124  2800              CMP      r0,#0                 ;219
000126  d1f6              BNE      |L1.278|
000128  203f              MOVS     r0,#0x3f              ;223
00012a  73e0              STRB     r0,[r4,#0xf]          ;223
00012c  2100              MOVS     r1,#0                 ;224
00012e  7421              STRB     r1,[r4,#0x10]         ;224
000130  2000              MOVS     r0,#0                 ;226
000132  7020              STRB     r0,[r4,#0]            ;226
000134  48b3              LDR      r0,|L1.1028|
000136  6800              LDR      r0,[r0,#0]            ;227  ; OSEventFreeList
000138  6060              STR      r0,[r4,#4]            ;227
00013a  2000              MOVS     r0,#0                 ;228
00013c  8120              STRH     r0,[r4,#8]            ;228
00013e  48b1              LDR      r0,|L1.1028|
000140  6004              STR      r4,[r0,#0]            ;229  ; OSEventFreeList
000142  4648              MOV      r0,r9                 ;230
000144  f7fffffe          BL       OS_CPU_SR_Restore
000148  2f01              CMP      r7,#1                 ;231
00014a  d101              BNE      |L1.336|
00014c  f7fffffe          BL       OS_Sched
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;234
000152  7028              STRB     r0,[r5,#0]            ;234
000154  2600              MOVS     r6,#0                 ;235
000156  e006              B        |L1.358|
                  |L1.344|
000158  4648              MOV      r0,r9                 ;239
00015a  f7fffffe          BL       OS_CPU_SR_Restore
00015e  2007              MOVS     r0,#7                 ;240
000160  7028              STRB     r0,[r5,#0]            ;240
000162  4626              MOV      r6,r4                 ;241
000164  bf00              NOP                            ;242
                  |L1.358|
000166  bf00              NOP                            ;216
000168  4630              MOV      r0,r6                 ;244
00016a  e792              B        |L1.146|
;;;246    #endif
                          ENDP

                  OSSemPend PROC
;;;280    /*$PAGE*/
;;;281    void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
00016c  e92d41f0          PUSH     {r4-r8,lr}
;;;282    {
000170  4605              MOV      r5,r0
000172  460e              MOV      r6,r1
000174  4614              MOV      r4,r2
;;;283    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;284        OS_CPU_SR  cpu_sr = 0;
000176  2700              MOVS     r7,#0
;;;285    #endif
;;;286    
;;;287    
;;;288    
;;;289    #if OS_ARG_CHK_EN > 0
;;;290        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
000178  b90c              CBNZ     r4,|L1.382|
                  |L1.378|
;;;291            return;
;;;292        }
;;;293        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;294            *perr = OS_ERR_PEVENT_NULL;
;;;295            return;
;;;296        }
;;;297    #endif
;;;298        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
;;;299            *perr = OS_ERR_EVENT_TYPE;
;;;300            return;
;;;301        }
;;;302        if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
;;;303            *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
;;;304            return;
;;;305        }
;;;306        if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
;;;307            *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
;;;308            return;
;;;309        }
;;;310        OS_ENTER_CRITICAL();
;;;311        if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
;;;312            pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
;;;313            OS_EXIT_CRITICAL();
;;;314            *perr = OS_ERR_NONE;
;;;315            return;
;;;316        }
;;;317                                                          /* Otherwise, must wait until event occurs       */
;;;318        OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
;;;319        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;320        OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
;;;321        OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
;;;322        OS_EXIT_CRITICAL();
;;;323        OS_Sched();                                       /* Find next highest priority task ready         */
;;;324        OS_ENTER_CRITICAL();
;;;325        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;326            case OS_STAT_PEND_OK:
;;;327                 *perr = OS_ERR_NONE;
;;;328                 break;
;;;329    
;;;330            case OS_STAT_PEND_ABORT:
;;;331                 *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;332                 break;
;;;333    
;;;334            case OS_STAT_PEND_TO:
;;;335            default:        
;;;336                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;337                 *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;338                 break;
;;;339        }
;;;340        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;341        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;342        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;343    #if (OS_EVENT_MULTI_EN > 0)
;;;344        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;345    #endif
;;;346        OS_EXIT_CRITICAL();
;;;347    }
00017a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.382|
00017e  b915              CBNZ     r5,|L1.390|
000180  2004              MOVS     r0,#4                 ;294
000182  7020              STRB     r0,[r4,#0]            ;294
000184  e7f9              B        |L1.378|
                  |L1.390|
000186  7828              LDRB     r0,[r5,#0]            ;298
000188  2803              CMP      r0,#3                 ;298
00018a  d002              BEQ      |L1.402|
00018c  2001              MOVS     r0,#1                 ;299
00018e  7020              STRB     r0,[r4,#0]            ;299
000190  e7f3              B        |L1.378|
                  |L1.402|
000192  489b              LDR      r0,|L1.1024|
000194  7800              LDRB     r0,[r0,#0]            ;302  ; OSIntNesting
000196  2800              CMP      r0,#0                 ;302
000198  dd02              BLE      |L1.416|
00019a  2002              MOVS     r0,#2                 ;303
00019c  7020              STRB     r0,[r4,#0]            ;303
00019e  e7ec              B        |L1.378|
                  |L1.416|
0001a0  4899              LDR      r0,|L1.1032|
0001a2  7800              LDRB     r0,[r0,#0]            ;306  ; OSLockNesting
0001a4  2800              CMP      r0,#0                 ;306
0001a6  dd02              BLE      |L1.430|
0001a8  200d              MOVS     r0,#0xd               ;307
0001aa  7020              STRB     r0,[r4,#0]            ;307
0001ac  e7e5              B        |L1.378|
                  |L1.430|
0001ae  f7fffffe          BL       OS_CPU_SR_Save
0001b2  4607              MOV      r7,r0                 ;310
0001b4  8928              LDRH     r0,[r5,#8]            ;311
0001b6  2800              CMP      r0,#0                 ;311
0001b8  dd08              BLE      |L1.460|
0001ba  8928              LDRH     r0,[r5,#8]            ;312
0001bc  1e40              SUBS     r0,r0,#1              ;312
0001be  8128              STRH     r0,[r5,#8]            ;312
0001c0  4638              MOV      r0,r7                 ;313
0001c2  f7fffffe          BL       OS_CPU_SR_Restore
0001c6  2000              MOVS     r0,#0                 ;314
0001c8  7020              STRB     r0,[r4,#0]            ;314
0001ca  e7d6              B        |L1.378|
                  |L1.460|
0001cc  488f              LDR      r0,|L1.1036|
0001ce  6800              LDR      r0,[r0,#0]            ;318  ; OSTCBCur
0001d0  f8900030          LDRB     r0,[r0,#0x30]         ;318
0001d4  f0400001          ORR      r0,r0,#1              ;318
0001d8  498c              LDR      r1,|L1.1036|
0001da  6809              LDR      r1,[r1,#0]            ;318  ; OSTCBCur
0001dc  f8810030          STRB     r0,[r1,#0x30]         ;318
0001e0  2000              MOVS     r0,#0                 ;319
0001e2  498a              LDR      r1,|L1.1036|
0001e4  6809              LDR      r1,[r1,#0]            ;319  ; OSTCBCur
0001e6  f8810031          STRB     r0,[r1,#0x31]         ;319
0001ea  4888              LDR      r0,|L1.1036|
0001ec  6800              LDR      r0,[r0,#0]            ;320  ; OSTCBCur
0001ee  85c6              STRH     r6,[r0,#0x2e]         ;320
0001f0  4628              MOV      r0,r5                 ;321
0001f2  f7fffffe          BL       OS_EventTaskWait
0001f6  4638              MOV      r0,r7                 ;322
0001f8  f7fffffe          BL       OS_CPU_SR_Restore
0001fc  f7fffffe          BL       OS_Sched
000200  f7fffffe          BL       OS_CPU_SR_Save
000204  4607              MOV      r7,r0                 ;324
000206  4881              LDR      r0,|L1.1036|
000208  6800              LDR      r0,[r0,#0]            ;325  ; OSTCBCur
00020a  f8900031          LDRB     r0,[r0,#0x31]         ;325
00020e  b120              CBZ      r0,|L1.538|
000210  2801              CMP      r0,#1                 ;325
000212  d009              BEQ      |L1.552|
000214  2802              CMP      r0,#2                 ;325
000216  d106              BNE      |L1.550|
000218  e002              B        |L1.544|
                  |L1.538|
00021a  2000              MOVS     r0,#0                 ;327
00021c  7020              STRB     r0,[r4,#0]            ;327
00021e  e00b              B        |L1.568|
                  |L1.544|
000220  200e              MOVS     r0,#0xe               ;331
000222  7020              STRB     r0,[r4,#0]            ;331
000224  e008              B        |L1.568|
                  |L1.550|
000226  bf00              NOP                            ;334
                  |L1.552|
000228  4629              MOV      r1,r5                 ;336
00022a  4878              LDR      r0,|L1.1036|
00022c  6800              LDR      r0,[r0,#0]            ;336  ; OSTCBCur
00022e  f7fffffe          BL       OS_EventTaskRemove
000232  200a              MOVS     r0,#0xa               ;337
000234  7020              STRB     r0,[r4,#0]            ;337
000236  bf00              NOP                            ;338
                  |L1.568|
000238  bf00              NOP                            ;328
00023a  2000              MOVS     r0,#0                 ;340
00023c  4973              LDR      r1,|L1.1036|
00023e  6809              LDR      r1,[r1,#0]            ;340  ; OSTCBCur
000240  f8810030          STRB     r0,[r1,#0x30]         ;340
000244  4971              LDR      r1,|L1.1036|
000246  6809              LDR      r1,[r1,#0]            ;341  ; OSTCBCur
000248  f8810031          STRB     r0,[r1,#0x31]         ;341
00024c  496f              LDR      r1,|L1.1036|
00024e  6809              LDR      r1,[r1,#0]            ;342  ; OSTCBCur
000250  61c8              STR      r0,[r1,#0x1c]         ;342
000252  496e              LDR      r1,|L1.1036|
000254  6809              LDR      r1,[r1,#0]            ;344  ; OSTCBCur
000256  6208              STR      r0,[r1,#0x20]         ;344
000258  4638              MOV      r0,r7                 ;346
00025a  f7fffffe          BL       OS_CPU_SR_Restore
00025e  bf00              NOP      
000260  e78b              B        |L1.378|
;;;348    
                          ENDP

                  OSSemPendAbort PROC
;;;383    #if OS_SEM_PEND_ABORT_EN > 0
;;;384    INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000262  e92d41f0          PUSH     {r4-r8,lr}
;;;385    {
000266  4605              MOV      r5,r0
000268  460f              MOV      r7,r1
00026a  4614              MOV      r4,r2
;;;386        INT8U      nbr_tasks;
;;;387    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;388        OS_CPU_SR  cpu_sr = 0;
00026c  f04f0800          MOV      r8,#0
;;;389    #endif
;;;390    
;;;391    
;;;392    
;;;393    #if OS_ARG_CHK_EN > 0
;;;394        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
000270  b914              CBNZ     r4,|L1.632|
;;;395            return (0);
000272  2000              MOVS     r0,#0
                  |L1.628|
;;;396        }
;;;397        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;398            *perr = OS_ERR_PEVENT_NULL;
;;;399            return (0);
;;;400        }
;;;401    #endif
;;;402        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
;;;403            *perr = OS_ERR_EVENT_TYPE;
;;;404            return (0);
;;;405        }
;;;406        OS_ENTER_CRITICAL();
;;;407        if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
;;;408            nbr_tasks = 0;
;;;409            switch (opt) {
;;;410                case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
;;;411                     while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
;;;412                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;413                         nbr_tasks++;
;;;414                     }
;;;415                     break;
;;;416                     
;;;417                case OS_PEND_OPT_NONE:
;;;418                default:                                  /* No,  ready HPT       waiting on semaphore     */
;;;419                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
;;;420                     nbr_tasks++;
;;;421                     break;
;;;422            }
;;;423            OS_EXIT_CRITICAL();
;;;424            OS_Sched();                                   /* Find HPT ready to run                         */
;;;425            *perr = OS_ERR_PEND_ABORT;
;;;426            return (nbr_tasks);
;;;427        }
;;;428        OS_EXIT_CRITICAL();
;;;429        *perr = OS_ERR_NONE;
;;;430        return (0);                                       /* No tasks waiting on semaphore                 */
;;;431    }
000274  e8bd81f0          POP      {r4-r8,pc}
                  |L1.632|
000278  b91d              CBNZ     r5,|L1.642|
00027a  2004              MOVS     r0,#4                 ;398
00027c  7020              STRB     r0,[r4,#0]            ;398
00027e  2000              MOVS     r0,#0                 ;399
000280  e7f8              B        |L1.628|
                  |L1.642|
000282  7828              LDRB     r0,[r5,#0]            ;402
000284  2803              CMP      r0,#3                 ;402
000286  d003              BEQ      |L1.656|
000288  2001              MOVS     r0,#1                 ;403
00028a  7020              STRB     r0,[r4,#0]            ;403
00028c  2000              MOVS     r0,#0                 ;404
00028e  e7f1              B        |L1.628|
                  |L1.656|
000290  f7fffffe          BL       OS_CPU_SR_Save
000294  4680              MOV      r8,r0                 ;406
000296  7aa8              LDRB     r0,[r5,#0xa]          ;407
000298  b320              CBZ      r0,|L1.740|
00029a  2600              MOVS     r6,#0                 ;408
00029c  b17f              CBZ      r7,|L1.702|
00029e  2f01              CMP      r7,#1                 ;409
0002a0  d10c              BNE      |L1.700|
0002a2  e007              B        |L1.692|
                  |L1.676|
0002a4  2302              MOVS     r3,#2                 ;412
0002a6  2201              MOVS     r2,#1                 ;412
0002a8  2100              MOVS     r1,#0                 ;412
0002aa  4628              MOV      r0,r5                 ;412
0002ac  f7fffffe          BL       OS_EventTaskRdy
0002b0  1c70              ADDS     r0,r6,#1              ;413
0002b2  b2c6              UXTB     r6,r0                 ;413
                  |L1.692|
0002b4  7aa8              LDRB     r0,[r5,#0xa]          ;411
0002b6  2800              CMP      r0,#0                 ;411
0002b8  d1f4              BNE      |L1.676|
0002ba  e009              B        |L1.720|
                  |L1.700|
0002bc  bf00              NOP                            ;417
                  |L1.702|
0002be  2302              MOVS     r3,#2                 ;419
0002c0  2201              MOVS     r2,#1                 ;419
0002c2  2100              MOVS     r1,#0                 ;419
0002c4  4628              MOV      r0,r5                 ;419
0002c6  f7fffffe          BL       OS_EventTaskRdy
0002ca  1c70              ADDS     r0,r6,#1              ;420
0002cc  b2c6              UXTB     r6,r0                 ;420
0002ce  bf00              NOP                            ;421
                  |L1.720|
0002d0  bf00              NOP                            ;415
0002d2  4640              MOV      r0,r8                 ;423
0002d4  f7fffffe          BL       OS_CPU_SR_Restore
0002d8  f7fffffe          BL       OS_Sched
0002dc  200e              MOVS     r0,#0xe               ;425
0002de  7020              STRB     r0,[r4,#0]            ;425
0002e0  4630              MOV      r0,r6                 ;426
0002e2  e7c7              B        |L1.628|
                  |L1.740|
0002e4  4640              MOV      r0,r8                 ;428
0002e6  f7fffffe          BL       OS_CPU_SR_Restore
0002ea  2000              MOVS     r0,#0                 ;429
0002ec  7020              STRB     r0,[r4,#0]            ;429
0002ee  bf00              NOP                            ;430
0002f0  e7c0              B        |L1.628|
;;;432    #endif
                          ENDP

                  OSSemPost PROC
;;;452    
;;;453    INT8U  OSSemPost (OS_EVENT *pevent)
0002f2  b570              PUSH     {r4-r6,lr}
;;;454    {
0002f4  4604              MOV      r4,r0
;;;455    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;456        OS_CPU_SR  cpu_sr = 0;
0002f6  2500              MOVS     r5,#0
;;;457    #endif
;;;458    
;;;459    
;;;460    
;;;461    #if OS_ARG_CHK_EN > 0
;;;462        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
0002f8  b90c              CBNZ     r4,|L1.766|
;;;463            return (OS_ERR_PEVENT_NULL);
0002fa  2004              MOVS     r0,#4
                  |L1.764|
;;;464        }
;;;465    #endif
;;;466        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
;;;467            return (OS_ERR_EVENT_TYPE);
;;;468        }
;;;469        OS_ENTER_CRITICAL();
;;;470        if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
;;;471                                                          /* Ready HPT waiting on event                    */
;;;472            (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
;;;473            OS_EXIT_CRITICAL();
;;;474            OS_Sched();                                   /* Find HPT ready to run                         */
;;;475            return (OS_ERR_NONE);
;;;476        }
;;;477        if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
;;;478            pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
;;;479            OS_EXIT_CRITICAL();
;;;480            return (OS_ERR_NONE);
;;;481        }
;;;482        OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
;;;483        return (OS_ERR_SEM_OVF);
;;;484    }
0002fc  bd70              POP      {r4-r6,pc}
                  |L1.766|
0002fe  7820              LDRB     r0,[r4,#0]            ;466
000300  2803              CMP      r0,#3                 ;466
000302  d001              BEQ      |L1.776|
000304  2001              MOVS     r0,#1                 ;467
000306  e7f9              B        |L1.764|
                  |L1.776|
000308  f7fffffe          BL       OS_CPU_SR_Save
00030c  4605              MOV      r5,r0                 ;469
00030e  7aa0              LDRB     r0,[r4,#0xa]          ;470
000310  b160              CBZ      r0,|L1.812|
000312  2300              MOVS     r3,#0                 ;472
000314  2201              MOVS     r2,#1                 ;472
000316  4619              MOV      r1,r3                 ;472
000318  4620              MOV      r0,r4                 ;472
00031a  f7fffffe          BL       OS_EventTaskRdy
00031e  4628              MOV      r0,r5                 ;473
000320  f7fffffe          BL       OS_CPU_SR_Restore
000324  f7fffffe          BL       OS_Sched
000328  2000              MOVS     r0,#0                 ;475
00032a  e7e7              B        |L1.764|
                  |L1.812|
00032c  8920              LDRH     r0,[r4,#8]            ;477
00032e  f64f71ff          MOV      r1,#0xffff            ;477
000332  4288              CMP      r0,r1                 ;477
000334  d207              BCS      |L1.838|
000336  8920              LDRH     r0,[r4,#8]            ;478
000338  1c40              ADDS     r0,r0,#1              ;478
00033a  8120              STRH     r0,[r4,#8]            ;478
00033c  4628              MOV      r0,r5                 ;479
00033e  f7fffffe          BL       OS_CPU_SR_Restore
000342  2000              MOVS     r0,#0                 ;480
000344  e7da              B        |L1.764|
                  |L1.838|
000346  4628              MOV      r0,r5                 ;482
000348  f7fffffe          BL       OS_CPU_SR_Restore
00034c  2032              MOVS     r0,#0x32              ;483
00034e  e7d5              B        |L1.764|
;;;485    
                          ENDP

                  OSSemQuery PROC
;;;506    #if OS_SEM_QUERY_EN > 0
;;;507    INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
000350  e92d47f0          PUSH     {r4-r10,lr}
;;;508    {
000354  4604              MOV      r4,r0
000356  460d              MOV      r5,r1
;;;509    #if OS_LOWEST_PRIO <= 63
;;;510        INT8U     *psrc;
;;;511        INT8U     *pdest;
;;;512    #else
;;;513        INT16U    *psrc;
;;;514        INT16U    *pdest;
;;;515    #endif
;;;516        INT8U      i;
;;;517    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;518        OS_CPU_SR  cpu_sr = 0;
000358  f04f0900          MOV      r9,#0
;;;519    #endif
;;;520    
;;;521    
;;;522    
;;;523    #if OS_ARG_CHK_EN > 0
;;;524        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
00035c  b914              CBNZ     r4,|L1.868|
;;;525            return (OS_ERR_PEVENT_NULL);
00035e  2004              MOVS     r0,#4
                  |L1.864|
;;;526        }
;;;527        if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
;;;528            return (OS_ERR_PDATA_NULL);
;;;529        }
;;;530    #endif
;;;531        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
;;;532            return (OS_ERR_EVENT_TYPE);
;;;533        }
;;;534        OS_ENTER_CRITICAL();
;;;535        p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
;;;536        psrc                   = &pevent->OSEventTbl[0];
;;;537        pdest                  = &p_sem_data->OSEventTbl[0];
;;;538        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;539            *pdest++ = *psrc++;
;;;540        }
;;;541        p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
;;;542        OS_EXIT_CRITICAL();
;;;543        return (OS_ERR_NONE);
;;;544    }
000360  e8bd87f0          POP      {r4-r10,pc}
                  |L1.868|
000364  b90d              CBNZ     r5,|L1.874|
000366  2009              MOVS     r0,#9                 ;528
000368  e7fa              B        |L1.864|
                  |L1.874|
00036a  7820              LDRB     r0,[r4,#0]            ;531
00036c  2803              CMP      r0,#3                 ;531
00036e  d001              BEQ      |L1.884|
000370  2001              MOVS     r0,#1                 ;532
000372  e7f5              B        |L1.864|
                  |L1.884|
000374  f7fffffe          BL       OS_CPU_SR_Save
000378  4681              MOV      r9,r0                 ;534
00037a  7aa0              LDRB     r0,[r4,#0xa]          ;535
00037c  71a8              STRB     r0,[r5,#6]            ;535
00037e  f104070b          ADD      r7,r4,#0xb            ;536
000382  1cae              ADDS     r6,r5,#2              ;537
000384  f04f0800          MOV      r8,#0                 ;538
000388  e007              B        |L1.922|
                  |L1.906|
00038a  f8170b01          LDRB     r0,[r7],#1            ;539
00038e  f8060b01          STRB     r0,[r6],#1            ;539
000392  f1080001          ADD      r0,r8,#1              ;538
000396  f00008ff          AND      r8,r0,#0xff           ;538
                  |L1.922|
00039a  f1b80f04          CMP      r8,#4                 ;538
00039e  dbf4              BLT      |L1.906|
0003a0  8920              LDRH     r0,[r4,#8]            ;541
0003a2  8028              STRH     r0,[r5,#0]            ;541
0003a4  4648              MOV      r0,r9                 ;542
0003a6  f7fffffe          BL       OS_CPU_SR_Restore
0003aa  2000              MOVS     r0,#0                 ;543
0003ac  e7d8              B        |L1.864|
;;;545    #endif                                                     /* OS_SEM_QUERY_EN                          */
                          ENDP

                  OSSemSet PROC
;;;572    #if OS_SEM_SET_EN > 0
;;;573    void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
0003ae  e92d41f0          PUSH     {r4-r8,lr}
;;;574    {
0003b2  4604              MOV      r4,r0
0003b4  460e              MOV      r6,r1
0003b6  4615              MOV      r5,r2
;;;575    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;576        OS_CPU_SR  cpu_sr = 0;
0003b8  2700              MOVS     r7,#0
;;;577    #endif
;;;578    
;;;579    
;;;580    
;;;581    #if OS_ARG_CHK_EN > 0
;;;582        if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
0003ba  b90d              CBNZ     r5,|L1.960|
                  |L1.956|
;;;583            return;
;;;584        }
;;;585        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
;;;586            *perr = OS_ERR_PEVENT_NULL;
;;;587            return;
;;;588        }
;;;589    #endif
;;;590        if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
;;;591            *perr = OS_ERR_EVENT_TYPE;
;;;592            return;
;;;593        }
;;;594        OS_ENTER_CRITICAL();
;;;595        *perr = OS_ERR_NONE;
;;;596        if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
;;;597            pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
;;;598        } else {                                          /* No                                            */
;;;599            if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
;;;600                pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
;;;601            } else {
;;;602                *perr              = OS_ERR_TASK_WAITING;
;;;603            }
;;;604        }
;;;605        OS_EXIT_CRITICAL();
;;;606    }
0003bc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.960|
0003c0  b914              CBNZ     r4,|L1.968|
0003c2  2004              MOVS     r0,#4                 ;586
0003c4  7028              STRB     r0,[r5,#0]            ;586
0003c6  e7f9              B        |L1.956|
                  |L1.968|
0003c8  7820              LDRB     r0,[r4,#0]            ;590
0003ca  2803              CMP      r0,#3                 ;590
0003cc  d002              BEQ      |L1.980|
0003ce  2001              MOVS     r0,#1                 ;591
0003d0  7028              STRB     r0,[r5,#0]            ;591
0003d2  e7f3              B        |L1.956|
                  |L1.980|
0003d4  f7fffffe          BL       OS_CPU_SR_Save
0003d8  4607              MOV      r7,r0                 ;594
0003da  2000              MOVS     r0,#0                 ;595
0003dc  7028              STRB     r0,[r5,#0]            ;595
0003de  8920              LDRH     r0,[r4,#8]            ;596
0003e0  2800              CMP      r0,#0                 ;596
0003e2  dd01              BLE      |L1.1000|
0003e4  8126              STRH     r6,[r4,#8]            ;597
0003e6  e005              B        |L1.1012|
                  |L1.1000|
0003e8  7aa0              LDRB     r0,[r4,#0xa]          ;599
0003ea  b908              CBNZ     r0,|L1.1008|
0003ec  8126              STRH     r6,[r4,#8]            ;600
0003ee  e001              B        |L1.1012|
                  |L1.1008|
0003f0  2049              MOVS     r0,#0x49              ;602
0003f2  7028              STRB     r0,[r5,#0]            ;602
                  |L1.1012|
0003f4  4638              MOV      r0,r7                 ;605
0003f6  f7fffffe          BL       OS_CPU_SR_Restore
0003fa  bf00              NOP      
0003fc  e7de              B        |L1.956|
;;;607    #endif
                          ENDP

0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      OSIntNesting
                  |L1.1028|
                          DCD      OSEventFreeList
                  |L1.1032|
                          DCD      OSLockNesting
                  |L1.1036|
                          DCD      OSTCBCur
