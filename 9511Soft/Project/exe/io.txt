; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\io.o --depend=.\exe\io.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\io.crf ..\Source\BSP\io.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IO_IdToPortPin PROC
;;;86     /// -----------------------------------------------------------------------------------------------------
;;;87     static  __INLINE  void  IO_IdToPortPin (IO_ID_TypeDef   id,
000000  1103              ASRS     r3,r0,#4
;;;88                                             GPIO_TypeDef**  port,
;;;89                                             u32*            pin)
;;;90     {
;;;91         /// switch - case 结构汇编后, 情况类似于查表而非条件跳转, 实际不影响速度
;;;92         /// 使用数组后, 程序空间增加, 所以不使用数组
;;;93     //    GPIO_TypeDef*  gpio[7]  =   {GPIOA, GPIOB, GPIOC, GPIOD, GPIOE, GPIOF, GPIOG};
;;;94     //    
;;;95     //    
;;;96     //    *port   =   gpio[id >> IO_ID_BITS_PIN];
;;;97         
;;;98         switch (id >> IO_ID_BITS_PIN) {
000002  2b07              CMP      r3,#7
000004  d217              BCS      |L1.54|
000006  e8dff003          TBB      [pc,r3]
00000a  0407              DCB      0x04,0x07
00000c  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000010  1700              DCB      0x17,0x00
;;;99         case 0:
;;;100            *port   =   GPIOA;
000012  4b86              LDR      r3,|L1.556|
000014  600b              STR      r3,[r1,#0]
;;;101            break;
000016  e012              B        |L1.62|
;;;102            
;;;103        case 1:
;;;104            *port   =   GPIOB;
000018  4b85              LDR      r3,|L1.560|
00001a  600b              STR      r3,[r1,#0]
;;;105            break;
00001c  e00f              B        |L1.62|
;;;106            
;;;107        case 2:
;;;108            *port   =   GPIOC;
00001e  4b85              LDR      r3,|L1.564|
000020  600b              STR      r3,[r1,#0]
;;;109            break;
000022  e00c              B        |L1.62|
;;;110            
;;;111        case 3:
;;;112            *port   =   GPIOD;
000024  4b84              LDR      r3,|L1.568|
000026  600b              STR      r3,[r1,#0]
;;;113            break;
000028  e009              B        |L1.62|
;;;114            
;;;115        case 4:
;;;116            *port   =   GPIOE;
00002a  4b84              LDR      r3,|L1.572|
00002c  600b              STR      r3,[r1,#0]
;;;117            break;
00002e  e006              B        |L1.62|
;;;118            
;;;119        case 5:
;;;120            *port   =   GPIOF;
000030  4b83              LDR      r3,|L1.576|
000032  600b              STR      r3,[r1,#0]
;;;121            break;
000034  e003              B        |L1.62|
                  |L1.54|
;;;122            
;;;123        case 6:
000036  bf00              NOP      
;;;124        default:                /// continue
;;;125            *port   =   GPIOG;
000038  4b82              LDR      r3,|L1.580|
00003a  600b              STR      r3,[r1,#0]
;;;126            break;
00003c  bf00              NOP      
                  |L1.62|
00003e  bf00              NOP                            ;101
;;;127        }
;;;128        
;;;129        *pin    =   id & ((1 << IO_ID_BITS_PIN) - 1);
000040  f000030f          AND      r3,r0,#0xf
000044  6013              STR      r3,[r2,#0]
;;;130    }
000046  4770              BX       lr
;;;131    
                          ENDP

                  IO_IdsToPortPinMsk PROC
;;;140    /// -----------------------------------------------------------------------------------------------------
;;;141    static  __INLINE  void  IO_IdsToPortPinMsk (IO_ID_TypeDef   id,
000048  e92d43f8          PUSH     {r3-r9,lr}
;;;142                                                u32             nbit,
;;;143                                                GPIO_TypeDef**  port,
;;;144                                                u32*            pin,
;;;145                                                u32*            mask)
;;;146    {
00004c  4680              MOV      r8,r0
00004e  460c              MOV      r4,r1
000050  4615              MOV      r5,r2
000052  461e              MOV      r6,r3
000054  f8dd9020          LDR      r9,[sp,#0x20]
;;;147        u32     np;
;;;148        u32     nb;
;;;149        
;;;150        
;;;151        IO_IdToPortPin(id, port, &np);
000058  466a              MOV      r2,sp
00005a  4629              MOV      r1,r5
00005c  4640              MOV      r0,r8
00005e  f7fffffe          BL       IO_IdToPortPin
;;;152        
;;;153        nb      =   (1 << IO_ID_BITS_PIN) - np;
000062  9800              LDR      r0,[sp,#0]
000064  f1c00710          RSB      r7,r0,#0x10
;;;154        nb      =   (nbit <= nb) ? nbit : nb;
000068  42bc              CMP      r4,r7
00006a  d801              BHI      |L1.112|
00006c  4620              MOV      r0,r4
00006e  e000              B        |L1.114|
                  |L1.112|
000070  4638              MOV      r0,r7
                  |L1.114|
000072  4607              MOV      r7,r0
;;;155        
;;;156        *pin    =   np;
000074  9800              LDR      r0,[sp,#0]
000076  6030              STR      r0,[r6,#0]
;;;157        *mask   =   (1 << nb) - 1;
000078  2001              MOVS     r0,#1
00007a  40b8              LSLS     r0,r0,r7
00007c  1e40              SUBS     r0,r0,#1
00007e  f8c90000          STR      r0,[r9,#0]
;;;158    }
000082  e8bd83f8          POP      {r3-r9,pc}
;;;159    
                          ENDP

                  IO_Init PROC
;;;222    /// -----------------------------------------------------------------------------------------------------
;;;223    void  IO_Init (IO_ID_TypeDef id, GPIOMode_TypeDef mode)
000086  b53e              PUSH     {r1-r5,lr}
;;;224    {
000088  4605              MOV      r5,r0
00008a  460c              MOV      r4,r1
;;;225        GPIO_TypeDef*       port;
;;;226        u32                 pin;
;;;227        GPIO_InitTypeDef    sGPIOInit;
;;;228        
;;;229        
;;;230        IO_IdToPortPin(id, &port, &pin);
00008c  aa01              ADD      r2,sp,#4
00008e  a902              ADD      r1,sp,#8
000090  4628              MOV      r0,r5
000092  f7fffffe          BL       IO_IdToPortPin
;;;231        
;;;232        sGPIOInit.GPIO_Pin      =   (uint16_t)(1 << pin);
000096  2001              MOVS     r0,#1
000098  9901              LDR      r1,[sp,#4]
00009a  4088              LSLS     r0,r0,r1
00009c  b280              UXTH     r0,r0
00009e  f8ad0000          STRH     r0,[sp,#0]
;;;233        sGPIOInit.GPIO_Mode     =   mode;
0000a2  f88d4003          STRB     r4,[sp,#3]
;;;234        sGPIOInit.GPIO_Speed    =   GPIO_Speed_50MHz;
0000a6  2003              MOVS     r0,#3
0000a8  f88d0002          STRB     r0,[sp,#2]
;;;235        GPIO_Init(port, &sGPIOInit);
0000ac  4669              MOV      r1,sp
0000ae  9802              LDR      r0,[sp,#8]
0000b0  f7fffffe          BL       GPIO_Init
;;;236    }
0000b4  bd3e              POP      {r1-r5,pc}
;;;237    
                          ENDP

                  IO_MultiInit PROC
;;;245    /// -----------------------------------------------------------------------------------------------------
;;;246    void  IO_MultiInit (IO_ID_TypeDef id, u32 nbit, GPIOMode_TypeDef mode)
0000b6  b570              PUSH     {r4-r6,lr}
;;;247    {
0000b8  b086              SUB      sp,sp,#0x18
0000ba  4605              MOV      r5,r0
0000bc  460e              MOV      r6,r1
0000be  4614              MOV      r4,r2
;;;248        GPIO_TypeDef*       port;
;;;249        u32                 pin;
;;;250        u32                 mask;
;;;251        GPIO_InitTypeDef    sGPIOInit;
;;;252        
;;;253        
;;;254        IO_IdsToPortPinMsk(id, nbit, &port, &pin, &mask);
0000c0  ab03              ADD      r3,sp,#0xc
0000c2  9300              STR      r3,[sp,#0]
0000c4  ab04              ADD      r3,sp,#0x10
0000c6  aa05              ADD      r2,sp,#0x14
0000c8  4631              MOV      r1,r6
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       IO_IdsToPortPinMsk
;;;255        
;;;256        sGPIOInit.GPIO_Pin      =   (uint16_t)(mask << pin);
0000d0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000d4  4088              LSLS     r0,r0,r1
0000d6  b280              UXTH     r0,r0
0000d8  f8ad0008          STRH     r0,[sp,#8]
;;;257        sGPIOInit.GPIO_Mode     =   mode;
0000dc  f88d400b          STRB     r4,[sp,#0xb]
;;;258        sGPIOInit.GPIO_Speed    =   GPIO_Speed_50MHz;
0000e0  2003              MOVS     r0,#3
0000e2  f88d000a          STRB     r0,[sp,#0xa]
;;;259        GPIO_Init(port, &sGPIOInit);
0000e6  a902              ADD      r1,sp,#8
0000e8  9805              LDR      r0,[sp,#0x14]
0000ea  f7fffffe          BL       GPIO_Init
;;;260    }
0000ee  b006              ADD      sp,sp,#0x18
0000f0  bd70              POP      {r4-r6,pc}
;;;261    
                          ENDP

                  IO_InGet PROC
;;;315    /// -----------------------------------------------------------------------------------------------------
;;;316    u32  IO_InGet (IO_ID_TypeDef id)
0000f2  b51c              PUSH     {r2-r4,lr}
;;;317    {
0000f4  4604              MOV      r4,r0
;;;318        GPIO_TypeDef*       port;
;;;319        u32                 pin;
;;;320        
;;;321        
;;;322        IO_IdToPortPin(id, &port, &pin);
0000f6  466a              MOV      r2,sp
0000f8  a901              ADD      r1,sp,#4
0000fa  4620              MOV      r0,r4
0000fc  f7fffffe          BL       IO_IdToPortPin
;;;323        return  (u32)(((port->IDR) >> pin) & 1);
000100  9801              LDR      r0,[sp,#4]
000102  6880              LDR      r0,[r0,#8]
000104  9900              LDR      r1,[sp,#0]
000106  40c8              LSRS     r0,r0,r1
000108  f0000001          AND      r0,r0,#1
;;;324    }
00010c  bd1c              POP      {r2-r4,pc}
;;;325    
                          ENDP

                  IO_MultiInGet PROC
;;;333    /// -----------------------------------------------------------------------------------------------------
;;;334    u32  IO_MultiInGet (IO_ID_TypeDef id, u32 nbit)
00010e  b57f              PUSH     {r0-r6,lr}
;;;335    {
000110  4604              MOV      r4,r0
000112  460d              MOV      r5,r1
;;;336        GPIO_TypeDef*       port;
;;;337        u32                 pin;
;;;338        u32                 mask;
;;;339        
;;;340        
;;;341        IO_IdsToPortPinMsk(id, nbit, &port, &pin, &mask);
000114  ab01              ADD      r3,sp,#4
000116  9300              STR      r3,[sp,#0]
000118  ab02              ADD      r3,sp,#8
00011a  aa03              ADD      r2,sp,#0xc
00011c  4629              MOV      r1,r5
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       IO_IdsToPortPinMsk
;;;342        return  (u32)(((port->IDR) >> pin) & mask);
000124  9803              LDR      r0,[sp,#0xc]
000126  6880              LDR      r0,[r0,#8]
000128  9902              LDR      r1,[sp,#8]
00012a  40c8              LSRS     r0,r0,r1
00012c  9901              LDR      r1,[sp,#4]
00012e  4008              ANDS     r0,r0,r1
;;;343    }
000130  b004              ADD      sp,sp,#0x10
000132  bd70              POP      {r4-r6,pc}
;;;344    
                          ENDP

                  IO_OutGet PROC
;;;397    /// -----------------------------------------------------------------------------------------------------
;;;398    u32  IO_OutGet (IO_ID_TypeDef id)
000134  b51c              PUSH     {r2-r4,lr}
;;;399    {
000136  4604              MOV      r4,r0
;;;400        GPIO_TypeDef*       port;
;;;401        u32                 pin;
;;;402        
;;;403        
;;;404        IO_IdToPortPin(id, &port, &pin);
000138  466a              MOV      r2,sp
00013a  a901              ADD      r1,sp,#4
00013c  4620              MOV      r0,r4
00013e  f7fffffe          BL       IO_IdToPortPin
;;;405        return  (u32)(((port->ODR) >> pin) & 1);
000142  9801              LDR      r0,[sp,#4]
000144  68c0              LDR      r0,[r0,#0xc]
000146  9900              LDR      r1,[sp,#0]
000148  40c8              LSRS     r0,r0,r1
00014a  f0000001          AND      r0,r0,#1
;;;406    }
00014e  bd1c              POP      {r2-r4,pc}
;;;407    
                          ENDP

                  IO_MultiOutGet PROC
;;;415    /// -----------------------------------------------------------------------------------------------------
;;;416    u32  IO_MultiOutGet (IO_ID_TypeDef id, u32 nbit)
000150  b57f              PUSH     {r0-r6,lr}
;;;417    {
000152  4604              MOV      r4,r0
000154  460d              MOV      r5,r1
;;;418        GPIO_TypeDef*       port;
;;;419        u32                 pin;
;;;420        u32                 mask;
;;;421        
;;;422        
;;;423        IO_IdsToPortPinMsk(id, nbit, &port, &pin, &mask);
000156  ab01              ADD      r3,sp,#4
000158  9300              STR      r3,[sp,#0]
00015a  ab02              ADD      r3,sp,#8
00015c  aa03              ADD      r2,sp,#0xc
00015e  4629              MOV      r1,r5
000160  4620              MOV      r0,r4
000162  f7fffffe          BL       IO_IdsToPortPinMsk
;;;424        return  (u32)(((port->ODR) >> pin) & mask);
000166  9803              LDR      r0,[sp,#0xc]
000168  68c0              LDR      r0,[r0,#0xc]
00016a  9902              LDR      r1,[sp,#8]
00016c  40c8              LSRS     r0,r0,r1
00016e  9901              LDR      r1,[sp,#4]
000170  4008              ANDS     r0,r0,r1
;;;425    }
000172  b004              ADD      sp,sp,#0x10
000174  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

                  IO_OutSet PROC
;;;503    /// -----------------------------------------------------------------------------------------------------
;;;504    u32  IO_OutSet (IO_ID_TypeDef id, u32 value)
000176  b57c              PUSH     {r2-r6,lr}
;;;505    {
000178  4606              MOV      r6,r0
00017a  460c              MOV      r4,r1
;;;506        GPIO_TypeDef*       port;
;;;507        u32                 pin;
;;;508        u32                 tmp;
;;;509        
;;;510        
;;;511        IO_IdToPortPin(id, &port, &pin);
00017c  466a              MOV      r2,sp
00017e  a901              ADD      r1,sp,#4
000180  4630              MOV      r0,r6
000182  f7fffffe          BL       IO_IdToPortPin
;;;512        tmp         =   (port->ODR) & (~(1 << pin)) | ((value & 1) << pin);
000186  9801              LDR      r0,[sp,#4]
000188  68c0              LDR      r0,[r0,#0xc]
00018a  2101              MOVS     r1,#1
00018c  9a00              LDR      r2,[sp,#0]
00018e  4091              LSLS     r1,r1,r2
000190  4388              BICS     r0,r0,r1
000192  f0040101          AND      r1,r4,#1
000196  4091              LSLS     r1,r1,r2
000198  ea400501          ORR      r5,r0,r1
;;;513        (port->ODR) =   tmp;
00019c  9801              LDR      r0,[sp,#4]
00019e  60c5              STR      r5,[r0,#0xc]
;;;514        return  tmp;
0001a0  4628              MOV      r0,r5
;;;515    }
0001a2  bd7c              POP      {r2-r6,pc}
;;;516    
                          ENDP

                  IO_MultiOutSet PROC
;;;524    /// -----------------------------------------------------------------------------------------------------
;;;525    u32  IO_MultiOutSet (IO_ID_TypeDef id, u32 nbit, u32 value)
0001a4  e92d41ff          PUSH     {r0-r8,lr}
;;;526    {
0001a8  4606              MOV      r6,r0
0001aa  460f              MOV      r7,r1
0001ac  4614              MOV      r4,r2
;;;527        GPIO_TypeDef*       port;
;;;528        u32                 pin;
;;;529        u32                 mask;
;;;530        u32                 tmp;
;;;531        
;;;532        
;;;533        IO_IdsToPortPinMsk(id, nbit, &port, &pin, &mask);
0001ae  ab01              ADD      r3,sp,#4
0001b0  9300              STR      r3,[sp,#0]
0001b2  ab02              ADD      r3,sp,#8
0001b4  aa03              ADD      r2,sp,#0xc
0001b6  4639              MOV      r1,r7
0001b8  4630              MOV      r0,r6
0001ba  f7fffffe          BL       IO_IdsToPortPinMsk
;;;534        tmp         =   (port->ODR) & (~(mask << pin)) | ((value & mask) << pin);
0001be  9803              LDR      r0,[sp,#0xc]
0001c0  68c0              LDR      r0,[r0,#0xc]
0001c2  e9dd1201          LDRD     r1,r2,[sp,#4]
0001c6  4091              LSLS     r1,r1,r2
0001c8  4388              BICS     r0,r0,r1
0001ca  9a01              LDR      r2,[sp,#4]
0001cc  ea040102          AND      r1,r4,r2
0001d0  9a02              LDR      r2,[sp,#8]
0001d2  4091              LSLS     r1,r1,r2
0001d4  ea400501          ORR      r5,r0,r1
;;;535        (port->ODR) =   tmp;
0001d8  9803              LDR      r0,[sp,#0xc]
0001da  60c5              STR      r5,[r0,#0xc]
;;;536        return  tmp;
0001dc  4628              MOV      r0,r5
;;;537    }
0001de  b004              ADD      sp,sp,#0x10
0001e0  e8bd81f0          POP      {r4-r8,pc}
;;;538    
                          ENDP

                  IO_OutToggle PROC
;;;598    /// -----------------------------------------------------------------------------------------------------
;;;599    void  IO_OutToggle (IO_ID_TypeDef id)
0001e4  b51c              PUSH     {r2-r4,lr}
;;;600    {
0001e6  4604              MOV      r4,r0
;;;601        GPIO_TypeDef*       port;
;;;602        u32                 pin;
;;;603        
;;;604        
;;;605        IO_IdToPortPin(id, &port, &pin);
0001e8  466a              MOV      r2,sp
0001ea  a901              ADD      r1,sp,#4
0001ec  4620              MOV      r0,r4
0001ee  f7fffffe          BL       IO_IdToPortPin
;;;606        (port->ODR)    ^=   (1 << pin);
0001f2  9801              LDR      r0,[sp,#4]
0001f4  68c0              LDR      r0,[r0,#0xc]
0001f6  2101              MOVS     r1,#1
0001f8  9a00              LDR      r2,[sp,#0]
0001fa  4091              LSLS     r1,r1,r2
0001fc  4048              EORS     r0,r0,r1
0001fe  9901              LDR      r1,[sp,#4]
000200  60c8              STR      r0,[r1,#0xc]
;;;607    }
000202  bd1c              POP      {r2-r4,pc}
;;;608    
                          ENDP

                  IO_MultiOutToggle PROC
;;;615    /// -----------------------------------------------------------------------------------------------------
;;;616    void  IO_MultiOutToggle (IO_ID_TypeDef id, u32 nbit)
000204  b57f              PUSH     {r0-r6,lr}
;;;617    {
000206  4604              MOV      r4,r0
000208  460d              MOV      r5,r1
;;;618        GPIO_TypeDef*       port;
;;;619        u32                 pin;
;;;620        u32                 mask;
;;;621        
;;;622        
;;;623        IO_IdsToPortPinMsk(id, nbit, &port, &pin, &mask);
00020a  ab01              ADD      r3,sp,#4
00020c  9300              STR      r3,[sp,#0]
00020e  ab02              ADD      r3,sp,#8
000210  aa03              ADD      r2,sp,#0xc
000212  4629              MOV      r1,r5
000214  4620              MOV      r0,r4
000216  f7fffffe          BL       IO_IdsToPortPinMsk
;;;624        (port->ODR)    ^=   (mask << pin);
00021a  9803              LDR      r0,[sp,#0xc]
00021c  68c0              LDR      r0,[r0,#0xc]
00021e  e9dd1201          LDRD     r1,r2,[sp,#4]
000222  4091              LSLS     r1,r1,r2
000224  4048              EORS     r0,r0,r1
000226  9903              LDR      r1,[sp,#0xc]
000228  60c8              STR      r0,[r1,#0xc]
;;;625    }
00022a  bd7f              POP      {r0-r6,pc}
;;;626    
                          ENDP

                  |L1.556|
                          DCD      0x40010800
                  |L1.560|
                          DCD      0x40010c00
                  |L1.564|
                          DCD      0x40011000
                  |L1.568|
                          DCD      0x40011400
                  |L1.572|
                          DCD      0x40011800
                  |L1.576|
                          DCD      0x40011c00
                  |L1.580|
                          DCD      0x40012000
