; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_iwdg.o --depend=.\exe\stm32f10x_iwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_iwdg.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_iwdg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  IWDG_WriteAccessCmd PROC
;;;90       */
;;;91     void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
000000  490e              LDR      r1,|L1.60|
;;;92     {
;;;93       /* Check the parameters */
;;;94       assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
;;;95       IWDG->KR = IWDG_WriteAccess;
000002  6008              STR      r0,[r1,#0]
;;;96     }
000004  4770              BX       lr
;;;97     
                          ENDP

                  IWDG_SetPrescaler PROC
;;;110      */
;;;111    void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
000006  490d              LDR      r1,|L1.60|
;;;112    {
;;;113      /* Check the parameters */
;;;114      assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
;;;115      IWDG->PR = IWDG_Prescaler;
000008  6048              STR      r0,[r1,#4]
;;;116    }
00000a  4770              BX       lr
;;;117    
                          ENDP

                  IWDG_SetReload PROC
;;;123      */
;;;124    void IWDG_SetReload(uint16_t Reload)
00000c  490b              LDR      r1,|L1.60|
;;;125    {
;;;126      /* Check the parameters */
;;;127      assert_param(IS_IWDG_RELOAD(Reload));
;;;128      IWDG->RLR = Reload;
00000e  6088              STR      r0,[r1,#8]
;;;129    }
000010  4770              BX       lr
;;;130    
                          ENDP

                  IWDG_ReloadCounter PROC
;;;136      */
;;;137    void IWDG_ReloadCounter(void)
000012  f64a20aa          MOV      r0,#0xaaaa
;;;138    {
;;;139      IWDG->KR = KR_KEY_Reload;
000016  4909              LDR      r1,|L1.60|
000018  6008              STR      r0,[r1,#0]
;;;140    }
00001a  4770              BX       lr
;;;141    
                          ENDP

                  IWDG_Enable PROC
;;;146      */
;;;147    void IWDG_Enable(void)
00001c  f64c40cc          MOV      r0,#0xcccc
;;;148    {
;;;149      IWDG->KR = KR_KEY_Enable;
000020  4906              LDR      r1,|L1.60|
000022  6008              STR      r0,[r1,#0]
;;;150    }
000024  4770              BX       lr
;;;151    
                          ENDP

                  IWDG_GetFlagStatus PROC
;;;159      */
;;;160    FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
000026  4601              MOV      r1,r0
;;;161    {
;;;162      FlagStatus bitstatus = RESET;
000028  2000              MOVS     r0,#0
;;;163      /* Check the parameters */
;;;164      assert_param(IS_IWDG_FLAG(IWDG_FLAG));
;;;165      if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
00002a  4a04              LDR      r2,|L1.60|
00002c  68d2              LDR      r2,[r2,#0xc]
00002e  420a              TST      r2,r1
000030  d001              BEQ      |L1.54|
;;;166      {
;;;167        bitstatus = SET;
000032  2001              MOVS     r0,#1
000034  e000              B        |L1.56|
                  |L1.54|
;;;168      }
;;;169      else
;;;170      {
;;;171        bitstatus = RESET;
000036  2000              MOVS     r0,#0
                  |L1.56|
;;;172      }
;;;173      /* Return the flag status */
;;;174      return bitstatus;
;;;175    }
000038  4770              BX       lr
;;;176    
                          ENDP

00003a  0000              DCW      0x0000
                  |L1.60|
                          DCD      0x40003000
