<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\exe\103V8.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\exe\103V8.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Dec 24 11:47:35 2013
<BR><P>
<H3>Maximum Stack Usage =        208 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
App_TaskStart &rArr; DBG_ALL &rArr; DBG_C491IsOK &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[c34fbc]">OS_CPU_SR_Save</a>
 <LI><a href="#[c34ff8]">OS_CPU_SR_Restore</a>
 <LI><a href="#[c2c6a0]">OSStartHighRdy</a>
 <LI><a href="#[c2c664]">OSCtxSw</a>
 <LI><a href="#[c2c628]">OSIntCtxSw</a>
 <LI><a href="#[c2c5ec]">OS_CPU_PendSVHandler</a>
 <LI><a href="#[c8b864]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c8b558]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c8b558]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c8b738]">Reset_Handler</a>
 <LI><a href="#[c349e0]">NMI_Handler</a>
 <LI><a href="#[c349a4]">HardFault_Handler</a>
 <LI><a href="#[c34968]">MemManage_Handler</a>
 <LI><a href="#[c3492c]">BusFault_Handler</a>
 <LI><a href="#[c348f0]">UsageFault_Handler</a>
 <LI><a href="#[c348b4]">SVC_Handler</a>
 <LI><a href="#[c34878]">DebugMon_Handler</a>
 <LI><a href="#[c2c5ec]">OS_CPU_PendSVHandler</a>
 <LI><a href="#[c2bbd8]">OS_CPU_SysTickHandler</a>
 <LI><a href="#[16d85e0]">WWDG_IRQHandler</a>
 <LI><a href="#[c8b030]">PVD_IRQHandler</a>
 <LI><a href="#[16d8928]">TAMPER_IRQHandler</a>
 <LI><a href="#[16d89dc]">RTC_IRQHandler</a>
 <LI><a href="#[c8b15c]">FLASH_IRQHandler</a>
 <LI><a href="#[16d8a54]">RCC_IRQHandler</a>
 <LI><a href="#[c8b300]">EXTI0_IRQHandler</a>
 <LI><a href="#[c8b288]">EXTI1_IRQHandler</a>
 <LI><a href="#[c8b24c]">EXTI2_IRQHandler</a>
 <LI><a href="#[c8b210]">EXTI3_IRQHandler</a>
 <LI><a href="#[c8b1d4]">EXTI4_IRQHandler</a>
 <LI><a href="#[c8b4a4]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[c8b468]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[c8b42c]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[c8b3f0]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[c8b3b4]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[c8b378]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[c8b33c]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[c8b558]">ADC1_2_IRQHandler</a>
 <LI><a href="#[16d8658]">USB_HP_CAN1_TX_IRQHandler</a>
 <LI><a href="#[16d861c]">USB_LP_CAN1_RX0_IRQHandler</a>
 <LI><a href="#[c8b51c]">CAN1_RX1_IRQHandler</a>
 <LI><a href="#[c8b4e0]">CAN1_SCE_IRQHandler</a>
 <LI><a href="#[c8b198]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[16d88ec]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[16d8838]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[16d8874]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[c3474c]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[16d87fc]">TIM2_IRQHandler</a>
 <LI><a href="#[16d87c0]">TIM3_IRQHandler</a>
 <LI><a href="#[16d8784]">TIM4_IRQHandler</a>
 <LI><a href="#[c8b0e4]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[c8b120]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[c8b06c]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[c8b0a8]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[16d89a0]">SPI1_IRQHandler</a>
 <LI><a href="#[16d8964]">SPI2_IRQHandler</a>
 <LI><a href="#[c34788]">USART1_IRQHandler</a>
 <LI><a href="#[16d870c]">USART2_IRQHandler</a>
 <LI><a href="#[16d86d0]">USART3_IRQHandler</a>
 <LI><a href="#[c8b2c4]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[16d8a18]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[16d8694]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[c385e0]">App_TaskUserIF</a>
 <LI><a href="#[c38568]">App_TaskStart</a>
 <LI><a href="#[c32604]">MOTO_TaskCutOdd</a>
 <LI><a href="#[c32640]">MOTO_TaskHghOdd</a>
 <LI><a href="#[c3267c]">MOTO_TaskCutEven</a>
 <LI><a href="#[c32898]">MOTO_TaskHghEven</a>
 <LI><a href="#[c3186c]">IN_TaskScan</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2ef68]">HDLED_TaskSparkling</a>
 <LI><a href="#[c2c484]">OSTaskSwHook</a>
 <LI><a href="#[16d690c]">__main</a>
 <LI><a href="#[16d2a78]">__I$use$semihosting</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a5c]">COM_HighTo0</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a20]">COM_HighTo1</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c309e4]">COM_HighTo2</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c309a8]">COM_HighTo3</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c3096c]">COM_HighTo4</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30930]">COM_HighTo5</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c308f4]">COM_HighTo6</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c308b8]">COM_HighTo7</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c3087c]">COM_HighTo8</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30840]">COM_HighTo9</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30804]">COM_HighTo10</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2fb20]">COM_9511SetSol</a>
 <LI><a href="#[c2fb20]">COM_9511SetSol</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c307c8]">COM_9511FaultOff</a>
 <LI><a href="#[c307c8]">COM_9511FaultOff</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c306d8]">COM_9511DnToUpBrk</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30624]">COM_9511DnEnable</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2f6ac]">COM_MainSetPssW</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2f724]">COM_MainErasPssW</a>
 <LI><a href="#[c2f724]">COM_MainErasPssW</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2f6ac]">COM_MainSetPssW</a>
 <LI><a href="#[c2fb5c]">COM_MainCh9511</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2fb5c]">COM_MainCh9511</a>
 <LI><a href="#[c2fb98]">COM_MainConfirm</a>
 <LI><a href="#[c2fb98]">COM_MainConfirm</a>
 <LI><a href="#[c307c8]">COM_9511FaultOff</a>
 <LI><a href="#[c307c8]">COM_9511FaultOff</a>
 <LI><a href="#[c3078c]">COM_9511DataCheck</a>
 <LI><a href="#[c3078c]">COM_9511DataCheck</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c306d8]">COM_9511DnToUpBrk</a>
 <LI><a href="#[c3069c]">COM_9511BrkDetMod</a>
 <LI><a href="#[c3069c]">COM_9511BrkDetMod</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30660]">COM_9511GetIsSqnUp</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30624]">COM_9511DnEnable</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c305e8]">COM_9511CutBack</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c305ac]">COM_9511CutHalf</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30570]">COM_9511CutFull</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30534]">COM_9511CutSetPara</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c304f8]">COM_9511GetVersion</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c304bc]">COM_9511SetRedOdd</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30480]">COM_9511SetGreOdd</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30444]">COM_9511SetOraOdd</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30408]">COM_9511TestEnter</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c303cc]">COM_9511TestExit</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30390]">COM_9511SetRedEven</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30354]">COM_9511SetGreEven</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30318]">COM_9511SetOraEven</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c302dc]">COM_9511MAOrgOut</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c302a0]">COM_9511GetHghOdd</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30264]">COM_9511GetHghEven</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30228]">COM_9511GetADOdd</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c301ec]">COM_9511GetADEven</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c301b0]">COM_9511MAOneLoop</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30174]">COM_9511SetGreALL</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c300fc]">COM_9511PatchExit</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30084]">COM_9511PatchEnter</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30048]">COM_9511GetHDLed</a>
 <LI><a href="#[c2fea4]">COM_9511GetCutOrg</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2fe68]">COM_9511GetDnErr</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c3000c]">COM_9511MAOrgIn</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c30a98]">COM_CmdDoNothing</a>
 <LI><a href="#[c2fe2c]">COM_9511GetUpErr</a>
 <LI><a href="#[c2ff58]">COM_9511MAStop</a>
 <LI><a href="#[c2ff58]">COM_9511MAStop</a>
 <LI><a href="#[c2ff94]">COM_9511MAStartUp</a>
 <LI><a href="#[c2ff94]">COM_9511MAStartUp</a>
 <LI><a href="#[c2fee0]">COM_9511BrkDetect</a>
 <LI><a href="#[c2fee0]">COM_9511BrkDetect</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16d690c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[16d03cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[16d67e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16d03cc]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[16d690c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16d0390]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16d67e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16d0354]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16d0318]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16d04f8]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[16d04bc]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[16d0174]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[16d59d0]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16d6330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[16d3ea0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[16d3f18]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[16d42d8]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[16d4170]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[16d3db0]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[16d3e28]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[16d41e8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[16d40f8]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[16d46d4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[16d4530]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[16d44b8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[16d4440]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[16d43c8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16d4350]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[16d45e4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[16d3d74]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[16d4260]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[16d4080]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[16d465c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[16d2dc0]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16d35f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16d2154]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[16d1f74]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[16d1f38]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[16d20a0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[16d2208]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[16d2028]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[16d67e0]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16d0390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[16d690c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16d63e4]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[16d6060]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16d5f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16d6330]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[16d59d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16d636c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[16d627c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[16d5dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16d62b8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[16d5250]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[16d5dcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16d35f4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[16d2dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16d3630]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[16d35b8]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16d32ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c358e0]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c34f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c35160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d627c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c358a4]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2bd7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[c35868]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2bd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[c3582c]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2bd04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[c357f0]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2bcc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[c357b4]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2c484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[c35778]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2bc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[c3573c]"></a>App_TimeTickHook</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = App_TimeTickHook &rArr; BSP_SOL_TmrProc &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c355d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_TmrProc
</UL>
<BR>[Called By]<UL><LI><a href="#[c2bc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[c349e0]"></a>NMI_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NMI_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c349a4]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HardFault_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c34968]"></a>MemManage_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemManage_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c3492c]"></a>BusFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BusFault_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c348f0]"></a>UsageFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UsageFault_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c348b4]"></a>SVC_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SVC_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c34878]"></a>DebugMon_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DebugMon_Handler &rArr; DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c3483c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[c34800]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text), UNUSED)

<P><STRONG><a name="[c347c4]"></a>PPP_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_it.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c34788]"></a>USART1_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; C491_IrqToRxBuf &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c345a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[c345e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c346d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqTx
<LI><a href="#[c34710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqToRxBuf
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c3474c]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TIM1_CC_IRQHandler &rArr; MOTO_IRQandClr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c34698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_IRQandClr
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c35598]"></a>C491_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = C491_Init &rArr; BSP_491_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c33d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c34710]"></a>C491_IrqToRxBuf</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = C491_IrqToRxBuf &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c3555c]"></a>C491_ReceiveOne</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = C491_ReceiveOne &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c337d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_C491IsOK
<LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c346d4]"></a>C491_IrqTx</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = C491_IrqTx &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c33c48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c33c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c33db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_DeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c33e64]"></a>C491_SendBuf</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c33c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c33db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_DeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c337d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_C491IsOK
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>

<P><STRONG><a name="[c33e28]"></a>C491_SendOne</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, c491.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c33e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainCh9511
<LI><a href="#[c2fe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetUpErr
<LI><a href="#[c2fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetDnErr
<LI><a href="#[c2fea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetCutOrg
<LI><a href="#[c30048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHDLed
<LI><a href="#[c301ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADEven
<LI><a href="#[c30228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADOdd
<LI><a href="#[c30264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghEven
<LI><a href="#[c302a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghOdd
<LI><a href="#[c304f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetVersion
<LI><a href="#[c30660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetIsSqnUp
</UL>

<P><STRONG><a name="[c33dec]"></a>C491_Send</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, c491.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c33c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c33db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_DeSet
</UL>

<P><STRONG><a name="[c353b8]"></a>DBG_IsDebug</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DBG_IsDebug &rArr; BSP_HD_KeyGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_KeyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c335b8]"></a>DBG_SolideOK</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DBG_SolideOK &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c353f4]"></a>DBG_ALL</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DBG_ALL &rArr; DBG_C491IsOK &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c332e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghSetCmd
<LI><a href="#[c33324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetState
<LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
<LI><a href="#[c33504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_GetAve
<LI><a href="#[c3357c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Get
<LI><a href="#[c335b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SolideOK
<LI><a href="#[c337d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_C491IsOK
<LI><a href="#[c33810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SqnSwiIsOK
<LI><a href="#[c3384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_HD
<LI><a href="#[c33888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_EndAlarm
<LI><a href="#[c338c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_StartAlarmTestLed
<LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c351d8]"></a>MOTO_Init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MOTO_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c33d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c32334]"></a>MOTO_SetSpdEngine</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutSetPara
</UL>

<P><STRONG><a name="[c322f8]"></a>MOTO_CutSetFullAngle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutSetPara
</UL>

<P><STRONG><a name="[c322bc]"></a>MOTO_CutSetHalfAngle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutSetPara
</UL>

<P><STRONG><a name="[c32280]"></a>MOTO_CutGetState</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MOTO_CutGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetDnErr
</UL>

<P><STRONG><a name="[c32244]"></a>MOTO_CutGetIsActing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetCutOrg
</UL>

<P><STRONG><a name="[c32208]"></a>MOTO_CutSetCmd</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MOTO_CutSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c30570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutFull
<LI><a href="#[c305ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutHalf
<LI><a href="#[c305e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511CutBack
</UL>

<P><STRONG><a name="[c321cc]"></a>MOTO_HghGetHeight</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetUpErr
<LI><a href="#[c30264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghEven
<LI><a href="#[c302a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghOdd
</UL>

<P><STRONG><a name="[c32190]"></a>MOTO_HghTestIsUp</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MOTO_HghTestIsUp &rArr; BSP_POT_GetOne
</UL>
<BR>[Calls]<UL><LI><a href="#[c31fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_GetOne
<LI><a href="#[c32a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetFromPot
</UL>
<BR>[Called By]<UL><LI><a href="#[c30264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghEven
<LI><a href="#[c302a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghOdd
</UL>

<P><STRONG><a name="[c33324]"></a>MOTO_HghGetState</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = MOTO_HghGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetUpErr
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c32154]"></a>MOTO_HghGetIsActing</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c301ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADEven
<LI><a href="#[c30228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADOdd
<LI><a href="#[c30264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghEven
<LI><a href="#[c302a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHghOdd
<LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
</UL>

<P><STRONG><a name="[c332e8]"></a>MOTO_HghSetCmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c34698]"></a>MOTO_IRQandClr</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MOTO_IRQandClr &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c31f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[c31f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[c3474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[c35250]"></a>IN_Init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = IN_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c315d8]"></a>IN_HDKey_GetSt</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Init
<LI><a href="#[c2fe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetUpErr
<LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
</UL>

<P><STRONG><a name="[c3159c]"></a>IN_BRK_SetIsDn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3069c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511BrkDetMod
</UL>

<P><STRONG><a name="[c31560]"></a>IN_BRK_SampleBegin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IN_BRK_SampleBegin
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ff94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAStartUp
</UL>

<P><STRONG><a name="[c31524]"></a>IN_BRK_SentXJ</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IN_BRK_SentXJ
</UL>
<BR>[Calls]<UL><LI><a href="#[c318a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_GetBrkIsWork
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ff1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_XJ_3
</UL>

<P><STRONG><a name="[c314e8]"></a>IN_BRK_SampleStop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IN_BRK_SampleStop
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ff58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAStop
</UL>

<P><STRONG><a name="[c314ac]"></a>IN_BRK_GetIsBrk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IN_BRK_GetIsBrk
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fe68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetDnErr
<LI><a href="#[c2fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511BrkDetect
</UL>

<P><STRONG><a name="[c3546c]"></a>COM_RxHandle</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_RxHandle &rArr; COM_9511RxHandle &rArr; BSP_LED_Toggle &rArr; IO_OutToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2fc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_924RxHandle
<LI><a href="#[c2fc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511RxHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c354a8]"></a>COM_KeyHandle</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_KeyHandle &rArr; COM_UpStByKeyDn &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyDn
<LI><a href="#[c2fdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyMd
<LI><a href="#[c2fdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyUp
<LI><a href="#[c315d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_HDKey_GetSt
<LI><a href="#[c32154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetIsActing
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c354e4]"></a>COM_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = COM_Init &rArr; COM_9511Init &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2fbd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_924Init
<LI><a href="#[c2fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c31fb0]"></a>COM_JogIsEn</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
</UL>

<P><STRONG><a name="[c35520]"></a>COM_DXSparkel</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = COM_DXSparkel &rArr; HDLED_Sparkle &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2f760]"></a>Get_Stream</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Get_Stream &rArr; Get_Main_ID &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStreamEncode
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainSetPssW
<LI><a href="#[c2f724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainErasPssW
<LI><a href="#[c2fb5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainCh9511
</UL>

<P><STRONG><a name="[c2f724]"></a>COM_MainErasPssW</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = COM_MainErasPssW &rArr; Get_Stream &rArr; Get_Main_ID &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c2f544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c2f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2f6e8]"></a>PRO_MainSetPssW</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PRO_MainSetPssW &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c2f508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c2f544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c2f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainSetPssW
</UL>

<P><STRONG><a name="[c2f6ac]"></a>COM_MainSetPssW</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = COM_MainSetPssW &rArr; Get_Stream &rArr; Get_Main_ID &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
<LI><a href="#[c2f5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStreamDecode
<LI><a href="#[c2f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_MainSetPssW
<LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c352c8]"></a>HDLED_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, hdled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = HDLED_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2ecd4]"></a>HDLED_Get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hdled.o(.text), UNUSED)

<P><STRONG><a name="[c3339c]"></a>HDLED_Set</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hdled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ec98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_LedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c30174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetGreALL
<LI><a href="#[c30318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetOraEven
<LI><a href="#[c30354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetGreEven
<LI><a href="#[c30390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetRedEven
<LI><a href="#[c30444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetOraOdd
<LI><a href="#[c30480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetGreOdd
<LI><a href="#[c304bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetRedOdd
<LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
<LI><a href="#[c3384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_HD
</UL>

<P><STRONG><a name="[c3528c]"></a>HDLED_Sparkle</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hdled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = HDLED_Sparkle &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ec5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ff94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAStartUp
<LI><a href="#[c301b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAOneLoop
<LI><a href="#[c33888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_EndAlarm
<LI><a href="#[c35520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_DXSparkel
<LI><a href="#[c385e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskUserIF
</UL>

<P><STRONG><a name="[c333d8]"></a>BSP_TM8M_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c337d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_C491IsOK
</UL>

<P><STRONG><a name="[c33414]"></a>BSP_TM8M_Delay</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TM8M_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Init
<LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c33810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SqnSwiIsOK
</UL>

<P><STRONG><a name="[c2d618]"></a>BSP_TM_CNT_SpdSet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2cd6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
</UL>

<P><STRONG><a name="[c2d5dc]"></a>BSP_TM_CNT_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[c334c8]"></a>BSP_SQN_EmbStSend</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_Init
<LI><a href="#[c30b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SqnUpdate
<LI><a href="#[c33810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SqnSwiIsOK
</UL>

<P><STRONG><a name="[c32028]"></a>BSP_MOTO_TQSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiOutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
</UL>

<P><STRONG><a name="[c320dc]"></a>BSP_MOTO_ClkSet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_MOTO_ClkSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
<LI><a href="#[c34698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_IRQandClr
</UL>

<P><STRONG><a name="[c2f634]"></a>BSP_SOL_Set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Init
<LI><a href="#[c2fb20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetSol
<LI><a href="#[c355d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_TmrProc
</UL>

<P><STRONG><a name="[c2ec98]"></a>BSP_HD_LedSet</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_Init
<LI><a href="#[c2ef68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_TaskSparkling
<LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>

<P><STRONG><a name="[c3564c]"></a>BSP_LED_Set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[c338c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_StartAlarmTestLed
<LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
<LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c3357c]"></a>BSP_DIP_Get</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_DIP_Get &rArr; IO_MultiInGet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Init
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c356c4]"></a>BSP_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = BSP_Init &rArr; BSP_POT_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2db40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Init
<LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c2dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_IndexEn
<LI><a href="#[c2dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[c2dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_Init
<LI><a href="#[c2dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Init
<LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c2dce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_Init
<LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
<LI><a href="#[c2dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_Init
<LI><a href="#[c2dd98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Judge924
<LI><a href="#[c2ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM_CNT_Init
<LI><a href="#[c2de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Init
<LI><a href="#[c2de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NVIC_Cfg
<LI><a href="#[c2de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnPeriph
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c35610]"></a>BSP_LED_Toggle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_LED_Toggle &rArr; IO_OutToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d03c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511RxHandle
<LI><a href="#[c338c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_StartAlarmTestLed
<LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
<LI><a href="#[c385e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskUserIF
</UL>

<P><STRONG><a name="[c33540]"></a>BSP_HD_KeyGet</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_HD_KeyGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TaskScan
<LI><a href="#[c3384c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_HD
<LI><a href="#[c353b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_IsDebug
</UL>

<P><STRONG><a name="[c32064]"></a>BSP_MOTO_StatusGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_MOTO_StatusGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c3285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Step
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
</UL>

<P><STRONG><a name="[c2d5a0]"></a>BSP_MOTO_ClkGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutGet
</UL>

<P><STRONG><a name="[c320a0]"></a>BSP_MOTO_DirSet</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_MOTO_DirSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
</UL>

<P><STRONG><a name="[c2d564]"></a>BSP_ENC_CntSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[c2d528]"></a>BSP_ENC_CntGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[c3348c]"></a>BSP_SWI_FiGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SWI_FiGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetCutOrg
<LI><a href="#[c31920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenGetOne
<LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
<LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c33810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SqnSwiIsOK
</UL>

<P><STRONG><a name="[c33450]"></a>BSP_SWI_SeGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SWI_SeGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c30660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetIsSqnUp
<LI><a href="#[c31920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenGetOne
<LI><a href="#[c33810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SqnSwiIsOK
</UL>

<P><STRONG><a name="[c31fec]"></a>BSP_POT_GetOne</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_POT_GetOne
</UL>
<BR>[Called By]<UL><LI><a href="#[c32190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghTestIsUp
</UL>

<P><STRONG><a name="[c33504]"></a>BSP_POT_GetAve</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c301ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADEven
<LI><a href="#[c30228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetADOdd
<LI><a href="#[c32a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghPotGetAve
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c33db0]"></a>BSP_491_DeSet</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_491_DeSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
<LI><a href="#[c33dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_Send
<LI><a href="#[c33e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendBuf
<LI><a href="#[c346d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqTx
</UL>

<P><STRONG><a name="[c33d74]"></a>BSP_491_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BSP_491_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[c2ccf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c33c84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[c33db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_DeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c35598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_Init
</UL>

<P><STRONG><a name="[c34ecc]"></a>UID_Change2_D</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UID_Change2_D
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c35340]"></a>Get_9511_ID</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c35304]"></a>Get_Main_ID</STRONG> (Thumb, 858 bytes, Stack size 40 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Get_Main_ID &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2db04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID_Status
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
<LI><a href="#[c2f4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[c2f544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[c2f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
<LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c355d4]"></a>BSP_SOL_TmrProc</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_SOL_TmrProc &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[c2d168]"></a>IO_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2c844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c2dbf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[c2dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_Init
<LI><a href="#[c2dc6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Init
<LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c2dce4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_Init
<LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
<LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
</UL>

<P><STRONG><a name="[c2d0f0]"></a>IO_MultiInit</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_MultiInit &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2c844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Init
<LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c2dd5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_Init
</UL>

<P><STRONG><a name="[c2d1a4]"></a>IO_InGet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c32064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_StatusGet
<LI><a href="#[c33450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_SeGet
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
<LI><a href="#[c33540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_KeyGet
</UL>

<P><STRONG><a name="[c2d12c]"></a>IO_MultiInGet</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IO_MultiInGet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
</UL>
<BR>[Called By]<UL><LI><a href="#[c3357c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Get
</UL>

<P><STRONG><a name="[c2d078]"></a>IO_OutGet</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2d5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkGet
</UL>

<P><STRONG><a name="[c2c8bc]"></a>IO_MultiOutGet</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
</UL>

<P><STRONG><a name="[c33360]"></a>IO_OutSet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_Init
<LI><a href="#[c2ec98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_LedSet
<LI><a href="#[c2f634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Set
<LI><a href="#[c320a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_DirSet
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c335b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_SolideOK
<LI><a href="#[c33db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_DeSet
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
<LI><a href="#[c3564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Set
</UL>

<P><STRONG><a name="[c2d0b4]"></a>IO_MultiOutSet</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
</UL>
<BR>[Called By]<UL><LI><a href="#[c32028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_TQSet
<LI><a href="#[c334c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_EmbStSend
</UL>

<P><STRONG><a name="[c2d03c]"></a>IO_OutToggle</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IO_OutToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>

<P><STRONG><a name="[c2c880]"></a>IO_MultiOutToggle</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
</UL>

<P><STRONG><a name="[c34fbc]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2bb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c2bbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[c2ec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c2ec5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c314ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_GetIsBrk
<LI><a href="#[c314e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleStop
<LI><a href="#[c31524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SentXJ
<LI><a href="#[c31560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleBegin
<LI><a href="#[c318e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenSample
<LI><a href="#[c32280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutGetState
<LI><a href="#[c33324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetState
<LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c33d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c34710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqToRxBuf
<LI><a href="#[c3474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c347c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IRQHandler
<LI><a href="#[c35070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c35124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c3555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_ReceiveOne
<LI><a href="#[c3573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[c96b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[c96bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[c96bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[c96f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[c96fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[c96fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c9709c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c970d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c9745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[c97498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c974d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c97510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c9754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[c978d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c9790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c97948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c97984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c979c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c979fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c97a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[c97a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c97ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c97aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[c9835c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[c98398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[c983d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[c98410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[c9844c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[c98488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[c98d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[c98d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c98dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[c98de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c98e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[c98e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[c98e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c98f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[c98f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c9961c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c99658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[c9970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[c997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c998b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[c99928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[c34ff8]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2bb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c2bbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[c2ec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c2ec5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c314ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_GetIsBrk
<LI><a href="#[c314e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleStop
<LI><a href="#[c31524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SentXJ
<LI><a href="#[c31560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleBegin
<LI><a href="#[c318e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenSample
<LI><a href="#[c32280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutGetState
<LI><a href="#[c33324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetState
<LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c33d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c34710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqToRxBuf
<LI><a href="#[c3474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c347c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IRQHandler
<LI><a href="#[c35070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c35124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c3555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_ReceiveOne
<LI><a href="#[c3573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[c96b74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[c96bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[c96bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[c96f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[c96fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[c96fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c9709c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c970d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c9745c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[c97498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[c974d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c97510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c9754c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[c978d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQQuery
<LI><a href="#[c9790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c97948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c97984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c979c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c979fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c97a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[c97a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c97ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[c97aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQAccept
<LI><a href="#[c9835c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemQuery
<LI><a href="#[c98398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[c983d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[c98410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[c9844c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[c98488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[c98d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[c98d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c98dac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[c98de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c98e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[c98e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[c98e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c98f14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[c98f50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c9961c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c99658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[c9970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[c997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c998b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[c99928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[c2c6a0]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c35160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[c2c664]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c2c628]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[c2c5ec]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c2bdf4]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2bdb8]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2bd7c]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c358a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c2bd40]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c35868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[c2bd04]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3582c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c9970c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[c2bcc8]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c357f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c2bc8c]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c9709c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[c2c484]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c357b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[c2bc50]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c35778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[c2bc14]"></a>OSTimeTickHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; App_TimeTickHook &rArr; BSP_SOL_TmrProc &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3573c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c2bb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[c2bbd8]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; BSP_SOL_TmrProc &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2bb9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c34f80]"></a>OS_CPU_SysTickInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2ac9c]"></a>OSDebugInit</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, os_dbg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c99964]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c96fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[c983d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[c98410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameGet
<LI><a href="#[c98e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[c98e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[c998b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[c99928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[c99928]"></a>OSEventNameGet</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c998ec]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c983d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemNameSet
<LI><a href="#[c98e24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[c998b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[c998b0]"></a>OSEventNameSet</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c998ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c99874]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[c99838]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c2c664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c2ec5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c96bec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c9709c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[c970d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskChangePrio
<LI><a href="#[c974d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c97510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c9790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c97948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c97984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c979c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c979fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c97a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
<LI><a href="#[c98d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c98de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c98e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c9961c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[c997fc]"></a>OS_EventTaskWaitMulti</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c997c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventPendMulti
</UL>

<P><STRONG><a name="[c997c0]"></a>OSEventPendMulti</STRONG> (Thumb, 824 bytes, Stack size 56 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c997fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWaitMulti
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c99874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[c99784]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c35070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c99748]"></a>OS_TaskStat</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2bcc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[c2ec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[c99784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[c9970c]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2bd04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c996d0]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2a7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[c2a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[c9934c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c99388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c993c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
</UL>

<P><STRONG><a name="[c3519c]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2a774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[c2a7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[c2a7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[c2a828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[c2a864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[c2a8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c2ac9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[c2bdb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[c2bdf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[c9934c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[c99388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[c993c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c99694]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c3465c]"></a>OSIntExit</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c2c628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2bbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[c3474c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c347c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPP_IRQHandler
</UL>

<P><STRONG><a name="[c99658]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c9961c]"></a>OSSchedUnlock</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c35160]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c2a8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c2c6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c35124]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c2bb9c]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; BSP_SOL_TmrProc &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2bc14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2bbd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[c995e0]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[c995a4]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[c99568]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c979fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[c9952c]"></a>OS_EventTaskRdy</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c99568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[c99874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[c33cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[c974d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[c97510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[c9790c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostOpt
<LI><a href="#[c97948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPostFront
<LI><a href="#[c97984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[c979c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPendAbort
<LI><a href="#[c97a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQDel
</UL>

<P><STRONG><a name="[c994f0]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c979fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[c994b4]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c33d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[c97ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[c99478]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c96f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[c9943c]"></a>OS_TCBInit</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2bc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[c2bd7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[c9709c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>

<P><STRONG><a name="[c98f50]"></a>OSFlagAccept</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c98f14]"></a>OSFlagCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c98ed8]"></a>OS_FlagUnlink</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c97024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[c98de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[c990b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[c98e9c]"></a>OSFlagDel</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c990b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c98e60]"></a>OSFlagNameGet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c98e24]"></a>OSFlagNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c998ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c98de8]"></a>OSFlagPend</STRONG> (Thumb, 668 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c98ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c9907c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c98dac]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c98d70]"></a>OSFlagPost</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c990b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c98d34]"></a>OSFlagQuery</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c993c4]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c98488]"></a>OSMemCreate</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c9844c]"></a>OSMemGet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c98410]"></a>OSMemNameGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c983d4]"></a>OSMemNameSet</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c998ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c98398]"></a>OSMemPut</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c9835c]"></a>OSMemQuery</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c99388]"></a>OS_MemInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c97aec]"></a>OSQAccept</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c97ab0]"></a>OSQCreate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c994b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>

<P><STRONG><a name="[c97a74]"></a>OSQDel</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c97a38]"></a>OSQFlush</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c979fc]"></a>OSQPend</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c994f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[c99568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c979c0]"></a>OSQPendAbort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c97984]"></a>OSQPost</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c97948]"></a>OSQPostFront</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c9790c]"></a>OSQPostOpt</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c978d0]"></a>OSQQuery</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, os_q.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c9934c]"></a>OS_QInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os_q.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c9754c]"></a>OSSemAccept</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c33d38]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c994b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c351d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Init
<LI><a href="#[c35598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_Init
</UL>

<P><STRONG><a name="[c97510]"></a>OSSemDel</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c33cfc]"></a>OSSemPend</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c994f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[c99568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
<LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c3285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Step
<LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
<LI><a href="#[c33e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendBuf
<LI><a href="#[c3555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_ReceiveOne
</UL>

<P><STRONG><a name="[c974d4]"></a>OSSemPendAbort</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c33cc0]"></a>OSSemPost</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9952c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c32208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetCmd
<LI><a href="#[c332e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghSetCmd
<LI><a href="#[c34698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_IRQandClr
<LI><a href="#[c346d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqTx
<LI><a href="#[c34710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqToRxBuf
</UL>

<P><STRONG><a name="[c97498]"></a>OSSemQuery</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c9745c]"></a>OSSemSet</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c970d8]"></a>OSTaskChangePrio</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c9709c]"></a>OSTaskCreate</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2bc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c97060]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[c350e8]"></a>OSTaskCreateExt</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c2bc8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c97060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[c9943c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c2a864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[c2a8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c351d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Init
<LI><a href="#[c35250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_Init
<LI><a href="#[c352c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Init
<LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c385a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[c97024]"></a>OSTaskDel</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2bd40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c98ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[c99568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[c995a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[c99874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
</UL>

<P><STRONG><a name="[c96fe8]"></a>OSTaskDelReq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c96fac]"></a>OSTaskNameGet</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[c350ac]"></a>OSTaskNameSet</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c998ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[c99964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[c2a864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[c2a8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c385a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>

<P><STRONG><a name="[c2ec5c]"></a>OSTaskResume</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
</UL>

<P><STRONG><a name="[c35070]"></a>OSTaskStkChk</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c3861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetDelay
<LI><a href="#[c99784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[c2ec20]"></a>OSTaskSuspend</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ef68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_TaskSparkling
<LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c96f70]"></a>OSTaskQuery</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>

<P><STRONG><a name="[c99400]"></a>OSTimeDly</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c35124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c99748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[c35034]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c99400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ef68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_TaskSparkling
<LI><a href="#[c3186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TaskScan
<LI><a href="#[c3276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutFull
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
<LI><a href="#[c33888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_EndAlarm
<LI><a href="#[c338c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_StartAlarmTestLed
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
<LI><a href="#[c385e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskUserIF
</UL>

<P><STRONG><a name="[c96bec]"></a>OSTimeDlyResume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c96bb0]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c96b74]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c2cfc4]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NVIC_Cfg
</UL>

<P><STRONG><a name="[c2d000]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2de4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_NVIC_Cfg
</UL>

<P><STRONG><a name="[c96610]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[c965d4]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[c96598]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[c96214]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c95bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c2d3c0]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c961d8]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c2d4ec]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d4b0]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c9619c]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c2d348]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d3fc]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d2d0]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d438]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d30c]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c96160]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c96124]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c960e8]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c2d384]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c2d474]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c960ac]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c96070]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c96034]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95ff8]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95fbc]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95f80]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95f44]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95f08]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95ecc]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95e90]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95e54]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95e18]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95ddc]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95da0]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95d64]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95d28]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95cec]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95cb0]"></a>ADC_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95c74]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c95c38]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[c93b2c]"></a>DMA_DeInit</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c2d258]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c93af0]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c2d294]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c93ab4]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c93a78]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c93a3c]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c93a00]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c939c4]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c93988]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[c93604]"></a>EXTI_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c2d21c]"></a>EXTI_Init</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_IndexEn
</UL>

<P><STRONG><a name="[c935c8]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c9358c]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c93550]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c93514]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c934d8]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c9349c]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[c930dc]"></a>FLASH_SetLatency</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c930a0]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c93064]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c2f4cc]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_MainSetPssW
<LI><a href="#[c2f724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainErasPssW
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>

<P><STRONG><a name="[c2f544]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_MainSetPssW
<LI><a href="#[c2f724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainErasPssW
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>

<P><STRONG><a name="[c93028]"></a>FLASH_GetStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92fec]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c93028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[c93208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[c2f580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[c92e48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[c92e84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[c92ec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[c92efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[c92f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[c92f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[c92fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[c2f580]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_MainSetPssW
<LI><a href="#[c2f724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainErasPssW
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>

<P><STRONG><a name="[c92fb0]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92f74]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92f38]"></a>FLASH_ProgramWord</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c2f508]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRO_MainSetPssW
</UL>

<P><STRONG><a name="[c92efc]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92ec0]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92e84]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92e48]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c92e0c]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92dd0]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92d94]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92d58]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92d1c]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92ce0]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92ca4]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[c92164]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c95bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c92128]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c95bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c2c844]"></a>GPIO_Init</STRONG> (Thumb, 268 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[c920ec]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c920b0]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c92074]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c92038]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91ffc]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91fc0]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91f84]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91f48]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91f0c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91ed0]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91e94]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91e58]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c91e1c]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c2d1e0]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2dbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_IndexEn
</UL>

<P><STRONG><a name="[c91de0]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[c90454]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90418]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c903dc]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c903a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[c903a0]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c903dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[c90364]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90328]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c902ec]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c902b0]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90274]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90238]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c901fc]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c901c0]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90184]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90148]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9010c]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c2cf88]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2dd20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_Init
</UL>

<P><STRONG><a name="[c900d0]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90094]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c90058]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c9001c]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c912dc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ccb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[c2cf4c]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnPeriph
</UL>

<P><STRONG><a name="[c2ced4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnPeriph
</UL>

<P><STRONG><a name="[c2cf10]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2de88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EnPeriph
</UL>

<P><STRONG><a name="[c95bfc]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8cb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c8e0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[c92128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[c92164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[c96214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[c94d74]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8cb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c8e0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[c955a8]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8ffe0]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8ffa4]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8ff68]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8ff2c]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8fef0]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8e0f0]"></a>TIM_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c94d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[c95bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c2cd30]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c2ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM_CNT_Init
<LI><a href="#[c2de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Init
</UL>

<P><STRONG><a name="[c8e0b4]"></a>TIM_OC1Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8e078]"></a>TIM_OC2Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8e03c]"></a>TIM_OC3Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8e000]"></a>TIM_OC4Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8dfc4]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8df88]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8df4c]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c8ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[c8df10]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c8ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[c2cde4]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_ICInit &rArr; TI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[c8df10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[c8df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c8df88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[c8dfc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[c8e21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c8e258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[c8e294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[c8e2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
</UL>

<P><STRONG><a name="[c8ded4]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8df10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[c8df4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[c8e21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c8e258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[c8de98]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8de5c]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8de20]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c2cda8]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
</UL>

<P><STRONG><a name="[c8dde4]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c2ce5c]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c2ddd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM_CNT_Init
<LI><a href="#[c2de10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Init
</UL>

<P><STRONG><a name="[c8dda8]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c31efc]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
</UL>

<P><STRONG><a name="[c8dd6c]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8dd30]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8dcf4]"></a>TIM_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8dcb8]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8dc7c]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c8dc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[c8dc40]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8dc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[c8dc04]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8dc7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[c8e21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[c8e258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[c8dbc8]"></a>TIM_ETRConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8db50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[c8db8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[c8db8c]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8dbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[c8db50]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8dbc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[c2cd6c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2d618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM_CNT_SpdSet
</UL>

<P><STRONG><a name="[c8db14]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c2ce20]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_EncoderInterfaceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c2db7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ENC_Init
</UL>

<P><STRONG><a name="[c8dad8]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8da9c]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8da60]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8da24]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d9e8]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d9ac]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d970]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d934]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d8f8]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d8bc]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d880]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d844]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d808]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d7cc]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d790]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d754]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d718]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d6dc]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d6a0]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d664]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d628]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d5ec]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d5b0]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d574]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d538]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d4fc]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d4c0]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d484]"></a>TIM_CCxCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d448]"></a>TIM_CCxNCmd</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d40c]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d3d0]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d394]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d358]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d31c]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d2e0]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d2a4]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d268]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d22c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d1f0]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d1b4]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d178]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d13c]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d100]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d0c4]"></a>TIM_SetClockDivision</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d088]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d04c]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8d010]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8cfd4]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8cf98]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8cf5c]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8cf20]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c8cee4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[c31f38]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c34698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_IRQandClr
</UL>

<P><STRONG><a name="[c31f74]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c34698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_IRQandClr
</UL>

<P><STRONG><a name="[c8cb60]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c94d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[c95bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[c2ccb8]"></a>USART_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c912dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
</UL>

<P><STRONG><a name="[c8cb24]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8cae8]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8caac]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c2ccf4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
</UL>

<P><STRONG><a name="[c33c84]"></a>USART_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c33d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_491_Init
<LI><a href="#[c33dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_Send
<LI><a href="#[c33e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendBuf
<LI><a href="#[c346d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqTx
</UL>

<P><STRONG><a name="[c8ca70]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8ca34]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c9f8]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c9bc]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c980]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c944]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c33c48]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c346d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_IrqTx
</UL>

<P><STRONG><a name="[c345a8]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c8c908]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c8cc]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c890]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c854]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c818]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c7dc]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c7a0]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c764]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c728]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c8c6ec]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c345e4]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c34788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c8c6b0]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[c34f08]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c8be04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c358e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8b738]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b558]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c8b558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c8b558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b51c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b4e0]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b4a4]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b468]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b42c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b3f0]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b3b4]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b378]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b33c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b300]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b2c4]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b288]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b24c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b210]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b1d4]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b198]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b15c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b120]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b0e4]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b0a8]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b06c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b030]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8a54]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8a18]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d89dc]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d89a0]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8964]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8928]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d88ec]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8874]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8838]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d87fc]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d87c0]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8784]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d870c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d86d0]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8694]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d8658]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d861c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[16d85e0]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md_os.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md_os.o(RESET)
</UL>
<P><STRONG><a name="[c8b864]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md_os.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d5f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c2f5bc]"></a>BitStreamEncode</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BitStreamEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
</UL>

<P><STRONG><a name="[c2f5f8]"></a>BitStreamDecode</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, bitstream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BitStreamDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ror32
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainSetPssW
<LI><a href="#[c2fb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainConfirm
</UL>

<P><STRONG><a name="[16d77d0]"></a>crypto_des3_set_key</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, crypto_des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = crypto_des3_set_key &rArr; crypto_des_expand_key
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_expand_key
<LI><a href="#[16d7b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des_expand_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c3537c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3PeriKeyInit
</UL>

<P><STRONG><a name="[c2f418]"></a>crypto_des3_encrypt</STRONG> (Thumb, 1554 bytes, Stack size 56 bytes, crypto_des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = crypto_des3_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol32
<LI><a href="#[16d7b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ror32
<LI><a href="#[16d7bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le32_to_cpu
<LI><a href="#[16d7c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainSetPssW
<LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
</UL>

<P><STRONG><a name="[c2f454]"></a>crypto_des3_decrypt</STRONG> (Thumb, 1558 bytes, Stack size 56 bytes, crypto_des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol32
<LI><a href="#[16d7b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ror32
<LI><a href="#[16d7bcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le32_to_cpu
<LI><a href="#[16d7c08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_to_le32
</UL>
<BR>[Called By]<UL><LI><a href="#[c2f6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainSetPssW
<LI><a href="#[c2fb98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_MainConfirm
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>

<P><STRONG><a name="[16d72e4]"></a>Caculate_CRC16</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, uid_coun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Caculate_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[c35430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_120
</UL>

<P><STRONG><a name="[c35430]"></a>Caculate_120</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, uid_coun.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Caculate_120 &rArr; Caculate_CRC16
</UL>
<BR>[Calls]<UL><LI><a href="#[16d72e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c3537c]"></a>Des3PeriKeyInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, des3key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Des3PeriKeyInit &rArr; crypto_des3_set_key &rArr; crypto_des_expand_key
</UL>
<BR>[Calls]<UL><LI><a href="#[16d77d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[16d6a74]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16d6a38]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16d69fc]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[16d5f34]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c8b864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[16d5340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[16d6060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16d5dcc]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16d5250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d627c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[16d537c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16d5340]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d5f34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16d5304]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16d32ac]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d35b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[16d2a78]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[16d2a3c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[c3861c]"></a>App_GetDelay</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = App_GetDelay &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[c35070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[c385e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskUserIF
</UL>

<P><STRONG><a name="[c385e0]"></a>App_TaskUserIF</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = App_TaskUserIF &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
<LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[c3861c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_GetDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[c385a4]"></a>App_TaskCreate</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = App_TaskCreate &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c38568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStart
</UL>

<P><STRONG><a name="[c38568]"></a>App_TaskStart</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, app.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = App_TaskStart &rArr; DBG_ALL &rArr; DBG_C491IsOK &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c34ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UID_Change2_D
<LI><a href="#[c34f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickInit
<LI><a href="#[c35124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c351d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Init
<LI><a href="#[c35250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_Init
<LI><a href="#[c352c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Init
<LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
<LI><a href="#[c35340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_9511_ID
<LI><a href="#[c3537c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Des3PeriKeyInit
<LI><a href="#[c353b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_IsDebug
<LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
<LI><a href="#[c35430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Caculate_120
<LI><a href="#[c3546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_RxHandle
<LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
<LI><a href="#[c354e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
<LI><a href="#[c35520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_DXSparkel
<LI><a href="#[c3555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_ReceiveOne
<LI><a href="#[c35598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_Init
<LI><a href="#[c3564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Set
<LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[c385a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(.text)
</UL>
<P><STRONG><a name="[c34c38]"></a>IrqDelayMs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c34bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispErrNo
</UL>

<P><STRONG><a name="[c34bfc]"></a>DispErrNo</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = DispErrNo &rArr; BSP_LED_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c34c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqDelayMs
<LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[c3564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c34878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
<LI><a href="#[c348b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[c348f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[c3492c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[c34968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[c349a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[c349e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[c338c4]"></a>DBG_StartAlarmTestLed</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DBG_StartAlarmTestLed &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
<LI><a href="#[c3564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c33888]"></a>DBG_EndAlarm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = DBG_EndAlarm &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c3384c]"></a>DBG_HD</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DBG_HD &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
<LI><a href="#[c33540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_KeyGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c33810]"></a>DBG_SqnSwiIsOK</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DBG_SqnSwiIsOK &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c33414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Delay
<LI><a href="#[c33450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_SeGet
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
<LI><a href="#[c334c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_EmbStSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c337d4]"></a>DBG_C491IsOK</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, dbg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = DBG_C491IsOK &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c333d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Get
<LI><a href="#[c33e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendBuf
<LI><a href="#[c3555c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_ReceiveOne
</UL>
<BR>[Called By]<UL><LI><a href="#[c353f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_ALL
</UL>

<P><STRONG><a name="[c32a78]"></a>MOTO_HghGetFromPot</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, moto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c32190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghTestIsUp
<LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
</UL>

<P><STRONG><a name="[c32a3c]"></a>MOTO_HghPotGetAve</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOTO_HghPotGetAve
</UL>
<BR>[Calls]<UL><LI><a href="#[c33504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_GetAve
</UL>
<BR>[Called By]<UL><LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
</UL>

<P><STRONG><a name="[c32a00]"></a>MOTO_Stop</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MOTO_Stop &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c31efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c32028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_TQSet
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
<LI><a href="#[c32910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghChange
</UL>

<P><STRONG><a name="[c329c4]"></a>MOTO_SetSpd</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOTO_SetSpd
</UL>
<BR>[Called By]<UL><LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c3285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Step
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
</UL>

<P><STRONG><a name="[c32988]"></a>MOTO_HghStepUntil</STRONG> (Thumb, 274 bytes, Stack size 64 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MOTO_HghStepUntil &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_StatusGet
<LI><a href="#[c329c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_SetSpd
<LI><a href="#[c32a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghPotGetAve
<LI><a href="#[c32a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetFromPot
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[c32910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghChange
</UL>

<P><STRONG><a name="[c3294c]"></a>MOTO_Start</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c31efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c31f74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[c32028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_TQSet
<LI><a href="#[c320a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_DirSet
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c329c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_SetSpd
<LI><a href="#[c333d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
<LI><a href="#[c32910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghChange
</UL>

<P><STRONG><a name="[c32910]"></a>MOTO_HghChange</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MOTO_HghChange &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghStepUntil
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
</UL>

<P><STRONG><a name="[c328d4]"></a>MOTO_Hgh</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = MOTO_Hgh &rArr; MOTO_HghChange &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c31fb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_JogIsEn
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c32910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghChange
<LI><a href="#[c32a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghPotGetAve
<LI><a href="#[c32a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetFromPot
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[c32640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_TaskHghOdd
<LI><a href="#[c32898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_TaskHghEven
</UL>

<P><STRONG><a name="[c32898]"></a>MOTO_TaskHghEven</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MOTO_TaskHghEven &rArr; MOTO_Hgh &rArr; MOTO_HghChange &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moto.o(.text)
</UL>
<P><STRONG><a name="[c3285c]"></a>MOTO_Step</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MOTO_Step &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_StatusGet
<LI><a href="#[c329c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_SetSpd
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
</UL>

<P><STRONG><a name="[c32820]"></a>MOTO_CutStepUntil</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MOTO_CutStepUntil &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32064]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_StatusGet
<LI><a href="#[c329c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_SetSpd
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
</UL>

<P><STRONG><a name="[c327e4]"></a>MOTO_CutIn</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c3285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Step
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c326f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutBack
<LI><a href="#[c3276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutFull
<LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
</UL>

<P><STRONG><a name="[c327a8]"></a>MOTO_CutOut</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
<LI><a href="#[c32820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutStepUntil
<LI><a href="#[c3285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Step
<LI><a href="#[c3294c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Start
<LI><a href="#[c32a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Stop
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c32730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutHalf
<LI><a href="#[c3276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutFull
</UL>

<P><STRONG><a name="[c3276c]"></a>MOTO_CutFull</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MOTO_CutFull &rArr; MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
<LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
<LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
</UL>

<P><STRONG><a name="[c32730]"></a>MOTO_CutHalf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MOTO_CutHalf &rArr; MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c327a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutOut
</UL>
<BR>[Called By]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
</UL>

<P><STRONG><a name="[c326f4]"></a>MOTO_CutBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = MOTO_CutBack &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c327e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutIn
</UL>
<BR>[Called By]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
</UL>

<P><STRONG><a name="[c326b8]"></a>MOTO_Cut</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MOTO_Cut &rArr; MOTO_CutFull &rArr; MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c326f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutBack
<LI><a href="#[c32730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutHalf
<LI><a href="#[c3276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutFull
<LI><a href="#[c33cfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Called By]<UL><LI><a href="#[c32604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_TaskCutOdd
<LI><a href="#[c3267c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_TaskCutEven
</UL>

<P><STRONG><a name="[c3267c]"></a>MOTO_TaskCutEven</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MOTO_TaskCutEven &rArr; MOTO_Cut &rArr; MOTO_CutFull &rArr; MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moto.o(.text)
</UL>
<P><STRONG><a name="[c32640]"></a>MOTO_TaskHghOdd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MOTO_TaskHghOdd &rArr; MOTO_Hgh &rArr; MOTO_HghChange &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c328d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Hgh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moto.o(.text)
</UL>
<P><STRONG><a name="[c32604]"></a>MOTO_TaskCutOdd</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, moto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = MOTO_TaskCutOdd &rArr; MOTO_Cut &rArr; MOTO_CutFull &rArr; MOTO_CutOut &rArr; MOTO_CutIn &rArr; MOTO_Start &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c326b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_Cut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> moto.o(.text)
</UL>
<P><STRONG><a name="[c31920]"></a>IN_TenGetOne</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IN_TenGetOne &rArr; BSP_SWI_SeGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c33450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_SeGet
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c318e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenSample
</UL>

<P><STRONG><a name="[c318e4]"></a>IN_TenSample</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = IN_TenSample &rArr; IN_TenGetOne &rArr; BSP_SWI_SeGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c31920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenGetOne
<LI><a href="#[c34fbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c34ff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c3186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TaskScan
</UL>

<P><STRONG><a name="[c318a8]"></a>IN_GetBrkIsWork</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, in.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c31524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SentXJ
<LI><a href="#[c3186c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TaskScan
</UL>

<P><STRONG><a name="[c3186c]"></a>IN_TaskScan</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, in.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = IN_TaskScan &rArr; IN_TenSample &rArr; IN_TenGetOne &rArr; BSP_SWI_SeGet &rArr; IO_InGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c318a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_GetBrkIsWork
<LI><a href="#[c318e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_TenSample
<LI><a href="#[c33540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_KeyGet
<LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> in.o(.text)
</UL>
<P><STRONG><a name="[c30d2c]"></a>COM_GetIsBroken</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fe2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetUpErr
<LI><a href="#[c30174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511SetGreALL
</UL>

<P><STRONG><a name="[c30cf0]"></a>COM_GetIsDrop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511BrkDetect
<LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>

<P><STRONG><a name="[c30cb4]"></a>COM_GetHDLedSt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
</UL>

<P><STRONG><a name="[c30c78]"></a>COM_GetEmbSt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHDLed
</UL>

<P><STRONG><a name="[c30c3c]"></a>COM_GetSqnEmbSt</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SqnUpdate
</UL>

<P><STRONG><a name="[c30c00]"></a>COM_LedUpdate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_LedUpdate &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c30cb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetHDLedSt
<LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Init
<LI><a href="#[c303cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511TestExit
<LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
<LI><a href="#[c307c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511FaultOff
</UL>

<P><STRONG><a name="[c30bc4]"></a>COM_HghUpdate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetIsDrop
<LI><a href="#[c332e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyDn
<LI><a href="#[c2fdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyMd
<LI><a href="#[c2fdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyUp
<LI><a href="#[c3000c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAOrgIn
<LI><a href="#[c307c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511FaultOff
<LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>

<P><STRONG><a name="[c30b88]"></a>COM_SqnUpdate</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30c3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetSqnEmbSt
<LI><a href="#[c334c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_EmbStSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Init
<LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
<LI><a href="#[c307c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511FaultOff
</UL>

<P><STRONG><a name="[c30b4c]"></a>COM_9511EmbStToBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c30048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetHDLed
</UL>

<P><STRONG><a name="[c30b10]"></a>COM_HighCmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c30804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo10
<LI><a href="#[c30840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo9
<LI><a href="#[c3087c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo8
<LI><a href="#[c308b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo7
<LI><a href="#[c308f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo6
<LI><a href="#[c30930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo5
<LI><a href="#[c3096c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo4
<LI><a href="#[c309a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo3
<LI><a href="#[c309e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo2
<LI><a href="#[c30a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo1
<LI><a href="#[c30a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighTo0
</UL>

<P><STRONG><a name="[c30ad4]"></a>COM_9511Decode</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = COM_9511Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[c30624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511DnEnable
<LI><a href="#[c306d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511DnToUpBrk
<LI><a href="#[c307c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511FaultOff
</UL>

<P><STRONG><a name="[c30a98]"></a>COM_CmdDoNothing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, com.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> com.o(.text)
<LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30a5c]"></a>COM_HighTo0</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo0 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30a20]"></a>COM_HighTo1</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo1 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c309e4]"></a>COM_HighTo2</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo2 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c309a8]"></a>COM_HighTo3</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo3 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c3096c]"></a>COM_HighTo4</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo4 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30930]"></a>COM_HighTo5</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo5 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c308f4]"></a>COM_HighTo6</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo6 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c308b8]"></a>COM_HighTo7</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo7 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c3087c]"></a>COM_HighTo8</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo8 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30840]"></a>COM_HighTo9</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo9 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30804]"></a>COM_HighTo10</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = COM_HighTo10 &rArr; COM_HighCmd &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HighCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c307c8]"></a>COM_9511FaultOff</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = COM_9511FaultOff &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Decode
<LI><a href="#[c30b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SqnUpdate
<LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
<LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c3078c]"></a>COM_9511DataCheck</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, com.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30750]"></a>COM_9511UpStChange</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SqnUpdate
<LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyDn
<LI><a href="#[c2fdb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyMd
<LI><a href="#[c2fdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_UpStByKeyUp
<LI><a href="#[c2ffd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByMARun
<LI><a href="#[c300c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByEnterP
<LI><a href="#[c30138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByExitP
<LI><a href="#[c30714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByBroken
</UL>

<P><STRONG><a name="[c30714]"></a>COM_9511UpStByBroken</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = COM_9511UpStByBroken &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511BrkDetect
<LI><a href="#[c306d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511DnToUpBrk
</UL>

<P><STRONG><a name="[c306d8]"></a>COM_9511DnToUpBrk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = COM_9511DnToUpBrk &rArr; COM_9511UpStByBroken &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByBroken
<LI><a href="#[c30ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c3069c]"></a>COM_9511BrkDetMod</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = COM_9511BrkDetMod
</UL>
<BR>[Calls]<UL><LI><a href="#[c3159c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SetIsDn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30660]"></a>COM_9511GetIsSqnUp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetIsSqnUp &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c33450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_SeGet
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30624]"></a>COM_9511DnEnable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = COM_9511DnEnable &rArr; COM_9511Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[c30ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511Decode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c305e8]"></a>COM_9511CutBack</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = COM_9511CutBack &rArr; MOTO_CutSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c32208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c305ac]"></a>COM_9511CutHalf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = COM_9511CutHalf &rArr; MOTO_CutSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c32208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30570]"></a>COM_9511CutFull</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = COM_9511CutFull &rArr; MOTO_CutSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c32208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30534]"></a>COM_9511CutSetPara</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COM_9511CutSetPara
</UL>
<BR>[Calls]<UL><LI><a href="#[c322bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetHalfAngle
<LI><a href="#[c322f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutSetFullAngle
<LI><a href="#[c32334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_SetSpdEngine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c304f8]"></a>COM_9511GetVersion</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetVersion &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c304bc]"></a>COM_9511SetRedOdd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetRedOdd &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30480]"></a>COM_9511SetGreOdd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetGreOdd &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30444]"></a>COM_9511SetOraOdd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetOraOdd &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30408]"></a>COM_9511TestEnter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, com.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c303cc]"></a>COM_9511TestExit</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = COM_9511TestExit &rArr; COM_LedUpdate &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30390]"></a>COM_9511SetRedEven</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetRedEven &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30354]"></a>COM_9511SetGreEven</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetGreEven &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30318]"></a>COM_9511SetOraEven</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetOraEven &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c302dc]"></a>COM_9511MAOrgOut</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, com.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c302a0]"></a>COM_9511GetHghOdd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetHghOdd &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetIsActing
<LI><a href="#[c32190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghTestIsUp
<LI><a href="#[c321cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetHeight
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30264]"></a>COM_9511GetHghEven</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetHghEven &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetIsActing
<LI><a href="#[c32190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghTestIsUp
<LI><a href="#[c321cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetHeight
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30228]"></a>COM_9511GetADOdd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetADOdd &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetIsActing
<LI><a href="#[c33504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_GetAve
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c301ec]"></a>COM_9511GetADEven</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetADEven &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetIsActing
<LI><a href="#[c33504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_POT_GetAve
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c301b0]"></a>COM_9511MAOneLoop</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = COM_9511MAOneLoop &rArr; HDLED_Sparkle &rArr; OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30174]"></a>COM_9511SetGreALL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = COM_9511SetGreALL &rArr; HDLED_Set &rArr; BSP_HD_LedSet &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c30d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetIsBroken
<LI><a href="#[c3339c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30138]"></a>COM_9511UpStByExitP</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = COM_9511UpStByExitP &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
</UL>
<BR>[Called By]<UL><LI><a href="#[c300fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511PatchExit
</UL>

<P><STRONG><a name="[c300fc]"></a>COM_9511PatchExit</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = COM_9511PatchExit &rArr; COM_9511UpStByExitP &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByExitP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c300c0]"></a>COM_9511UpStByEnterP</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = COM_9511UpStByEnterP &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
</UL>
<BR>[Called By]<UL><LI><a href="#[c30084]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511PatchEnter
</UL>

<P><STRONG><a name="[c30084]"></a>COM_9511PatchEnter</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = COM_9511PatchEnter &rArr; COM_9511UpStByEnterP &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c300c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByEnterP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c30048]"></a>COM_9511GetHDLed</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = COM_9511GetHDLed &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511EmbStToBit
<LI><a href="#[c30c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetEmbSt
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c3000c]"></a>COM_9511MAOrgIn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = COM_9511MAOrgIn &rArr; COM_HghUpdate &rArr; MOTO_HghSetCmd &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2ffd0]"></a>COM_9511UpStByMARun</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = COM_9511UpStByMARun &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
</UL>
<BR>[Called By]<UL><LI><a href="#[c2ff94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511MAStartUp
</UL>

<P><STRONG><a name="[c2ff94]"></a>COM_9511MAStartUp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = COM_9511MAStartUp &rArr; COM_9511UpStByMARun &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ffd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByMARun
<LI><a href="#[c31560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleBegin
<LI><a href="#[c3528c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDLED_Sparkle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2ff58]"></a>COM_9511MAStop</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = COM_9511MAStop &rArr; IN_BRK_SampleStop
</UL>
<BR>[Calls]<UL><LI><a href="#[c314e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SampleStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2ff1c]"></a>COM_XJ_3</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = COM_XJ_3 &rArr; IN_BRK_SentXJ
</UL>
<BR>[Calls]<UL><LI><a href="#[c31524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_SentXJ
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fee0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511BrkDetect
</UL>

<P><STRONG><a name="[c2fee0]"></a>COM_9511BrkDetect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = COM_9511BrkDetect &rArr; COM_9511UpStByBroken &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ff1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_XJ_3
<LI><a href="#[c30714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStByBroken
<LI><a href="#[c30cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetIsDrop
<LI><a href="#[c314ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_GetIsBrk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fea4]"></a>COM_9511GetCutOrg</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = COM_9511GetCutOrg &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c32244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutGetIsActing
<LI><a href="#[c3348c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SWI_FiGet
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fe68]"></a>COM_9511GetDnErr</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = COM_9511GetDnErr &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c314ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_BRK_GetIsBrk
<LI><a href="#[c32280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_CutGetState
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fe2c]"></a>COM_9511GetUpErr</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = COM_9511GetUpErr &rArr; C491_SendOne &rArr; C491_SendBuf &rArr; OSSemPend &rArr; OS_EventTaskWait
</UL>
<BR>[Calls]<UL><LI><a href="#[c30d2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_GetIsBroken
<LI><a href="#[c315d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_HDKey_GetSt
<LI><a href="#[c321cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetHeight
<LI><a href="#[c33324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTO_HghGetState
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fdf0]"></a>COM_UpStByKeyUp</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = COM_UpStByKeyUp &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
<LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
</UL>

<P><STRONG><a name="[c2fdb4]"></a>COM_UpStByKeyMd</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = COM_UpStByKeyMd &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
<LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
</UL>

<P><STRONG><a name="[c2fd78]"></a>COM_UpStByKeyDn</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = COM_UpStByKeyDn &rArr; COM_9511UpStChange &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511UpStChange
<LI><a href="#[c30bc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_HghUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c354a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_KeyHandle
</UL>

<P><STRONG><a name="[c2fd3c]"></a>COM_9511IsAddr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511RxHandle
</UL>

<P><STRONG><a name="[c2fd00]"></a>COM_9511IsValidAddr</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2fc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511RxHandle
</UL>

<P><STRONG><a name="[c2fcc4]"></a>COM_9511GetCheckSum</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COM_9511GetCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[c2fc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511RxHandle
</UL>

<P><STRONG><a name="[c2fc88]"></a>COM_9511RxHandle</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = COM_9511RxHandle &rArr; BSP_LED_Toggle &rArr; IO_OutToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[c2fcc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511GetCheckSum
<LI><a href="#[c2fd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511IsValidAddr
<LI><a href="#[c2fd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_9511IsAddr
<LI><a href="#[c35610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[c3546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_RxHandle
</UL>

<P><STRONG><a name="[c2fc4c]"></a>COM_924RxHandle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3546c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_RxHandle
</UL>

<P><STRONG><a name="[c2fc10]"></a>COM_9511Init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = COM_9511Init &rArr; COM_SqnUpdate &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c30b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_SqnUpdate
<LI><a href="#[c30c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_LedUpdate
<LI><a href="#[c315d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IN_HDKey_GetSt
</UL>
<BR>[Called By]<UL><LI><a href="#[c354e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[c2fbd4]"></a>COM_924Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c354e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COM_Init
</UL>

<P><STRONG><a name="[c2fb98]"></a>COM_MainConfirm</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = COM_MainConfirm &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
<LI><a href="#[c2f5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStreamDecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fb5c]"></a>COM_MainCh9511</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = COM_MainCh9511 &rArr; Get_Stream &rArr; Get_Main_ID &rArr; crypto_des3_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Stream
<LI><a href="#[c33e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C491_SendOne
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2fb20]"></a>COM_9511SetSol</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = COM_9511SetSol &rArr; BSP_SOL_Set &rArr; IO_OutSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c2f634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> com.o(.constdata)
</UL>
<P><STRONG><a name="[c2ef68]"></a>HDLED_TaskSparkling</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hdled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = HDLED_TaskSparkling &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ec20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[c2ec98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_LedSet
<LI><a href="#[c35034]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hdled.o(.text)
</UL>
<P><STRONG><a name="[c2de88]"></a>BSP_EnPeriph</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_EnPeriph
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ced4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c2cf10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[c2cf4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2de4c]"></a>BSP_NVIC_Cfg</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_NVIC_Cfg &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cfc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[c2d000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2de10]"></a>BSP_TM8M_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_TM8M_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cd30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c2ce5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2ddd4]"></a>BSP_TM_CNT_Init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_TM_CNT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cd30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c2ce5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dd98]"></a>BSP_Judge924</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dd5c]"></a>BSP_SQN_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_SQN_Init &rArr; BSP_SQN_EmbStSend &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c334c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SQN_EmbStSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dd20]"></a>BSP_POT_Init</STRONG> (Thumb, 296 bytes, Stack size 72 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_POT_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cf88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c2d258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[c2d294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c2d2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[c2d30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[c2d348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[c2d384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[c2d3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[c2d3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[c2d438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[c2d474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ExternalTrigConvCmd
<LI><a href="#[c2d4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[c2d4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dce4]"></a>BSP_SWI_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_SWI_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dca8]"></a>BSP_MOTO_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_MOTO_Init &rArr; BSP_MOTO_TQSet &rArr; IO_MultiOutSet &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c32028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_TQSet
<LI><a href="#[c320dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTO_ClkSet
<LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
<LI><a href="#[c33414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dc6c]"></a>BSP_SOL_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_SOL_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c2f634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SOL_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dc30]"></a>BSP_HD_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_HD_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c2ec98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HD_LedSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dbf4]"></a>BSP_LED_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_LED_Init &rArr; IO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c3564c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2dbb8]"></a>BSP_ENC_IndexEn</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_ENC_IndexEn &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[c2d21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2db7c]"></a>BSP_ENC_Init</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_ENC_Init &rArr; IO_MultiInit &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2cd30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c2cda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICStructInit
<LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c2ce20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[c2ce5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c31efc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2db40]"></a>BSP_DIP_Init</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_DIP_Init &rArr; IO_MultiInit &rArr; IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c33414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TM8M_Delay
<LI><a href="#[c3357c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_DIP_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[c356c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[c2db04]"></a>Get_Main_ID_Status</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Main_ID_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[c35304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Main_ID
</UL>

<P><STRONG><a name="[c2ca24]"></a>IO_IdToPortPin</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2c9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdsToPortPinMsk
<LI><a href="#[c2d03c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutToggle
<LI><a href="#[c2d078]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutGet
<LI><a href="#[c2d168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[c2d1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_InGet
<LI><a href="#[c33360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_OutSet
</UL>

<P><STRONG><a name="[c2c9e8]"></a>IO_IdsToPortPinMsk</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IO_IdsToPortPinMsk
</UL>
<BR>[Calls]<UL><LI><a href="#[c2ca24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_IdToPortPin
</UL>
<BR>[Called By]<UL><LI><a href="#[c2c880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiOutToggle
<LI><a href="#[c2c8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiOutGet
<LI><a href="#[c2d0b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiOutSet
<LI><a href="#[c2d0f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInit
<LI><a href="#[c2d12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_MultiInGet
</UL>

<P><STRONG><a name="[c2a8dc]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3465c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[c35160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c99838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c2a8a0]"></a>OS_InitTaskStat</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2a864]"></a>OS_InitTaskIdle</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[c350ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[c350e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2a828]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[c996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2a7ec]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[c996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2a7b0]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c2a774]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3519c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c990b8]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c98ed8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[c98d70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[c98e9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[c9907c]"></a>OS_FlagBlock</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c98de8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[c93208]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c92fec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[c8e2d0]"></a>TI4_Config</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI4_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8e294]"></a>TI3_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[c8e258]"></a>TI2_Config</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c8dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c8ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[c8e21c]"></a>TI1_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[c2cde4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[c8dc04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[c8ded4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
</UL>

<P><STRONG><a name="[c8be40]"></a>SetSysClockTo72</STRONG> (Thumb, 198 bytes, Stack size 0 bytes, system_stm32f10x.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8be04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[c8be04]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[c8be40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[c34f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[16d7c08]"></a>cpu_to_le32</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crypto_des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
</UL>

<P><STRONG><a name="[16d7bcc]"></a>le32_to_cpu</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, crypto_des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
</UL>

<P><STRONG><a name="[16d7b90]"></a>ror32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, crypto_des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
<LI><a href="#[c2f5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitStreamDecode
</UL>

<P><STRONG><a name="[16d7b54]"></a>rol32</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, crypto_des3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2f418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_encrypt
<LI><a href="#[c2f454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_decrypt
<LI><a href="#[16d7adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_expand_key
<LI><a href="#[16d7b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des_expand_key
</UL>

<P><STRONG><a name="[16d7b18]"></a>crypto_des_expand_key</STRONG> (Thumb, 1974 bytes, Stack size 40 bytes, crypto_des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = crypto_des_expand_key
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol32
</UL>
<BR>[Called By]<UL><LI><a href="#[16d77d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_set_key
</UL>

<P><STRONG><a name="[16d7adc]"></a>crypto_des3_expand_key</STRONG> (Thumb, 1914 bytes, Stack size 32 bytes, crypto_des3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = crypto_des3_expand_key
</UL>
<BR>[Calls]<UL><LI><a href="#[16d7b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rol32
</UL>
<BR>[Called By]<UL><LI><a href="#[16d77d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_des3_set_key
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
