; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\dbg.o --depend=.\exe\dbg.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\dbg.crf ..\Source\APP\dbg.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  DBG_IsDebug PROC
;;;59     /// -----------------------------------------------------------------------------------------------------
;;;60     bool  DBG_IsDebug (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;61     {
;;;62         BSP_HD_KEY_TypeDef  up;
;;;63         BSP_HD_KEY_TypeDef  dn;
;;;64         
;;;65         
;;;66     //    DBG_MOTCAngSpd(BSP_DIP_9511Addr + 2);
;;;67     //    DBG_MOTCGoBack(BSP_DIP_9511Addr + 2);
;;;68         
;;;69         BSP_HD_KeyGet(BSP_ID_ODD, &up, &dn);
000002  466a              MOV      r2,sp
000004  a901              ADD      r1,sp,#4
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       BSP_HD_KeyGet
;;;70         if (up == BSP_HD_KEY_OFF) {
00000c  f89d0004          LDRB     r0,[sp,#4]
000010  b908              CBNZ     r0,|L1.22|
;;;71             return FALSE;
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;72         }
;;;73         BSP_HD_KeyGet(BSP_ID_EVEN, &up, &dn);
;;;74         if (up == BSP_HD_KEY_OFF) {
;;;75             return FALSE;
;;;76         }
;;;77         return TRUE;
;;;78     //    u32                 i;
;;;79     //    
;;;80     //    
;;;81     //    for (i = 0; i < BSP_DEVICE_ID_N; i++) {
;;;82     //        BSP_HD_KeyGet((BSP_ID_TypeDef)i, &up, &dn);
;;;83     //        if (up == BSP_HD_KEY_ON) {
;;;84     //            return TRUE;
;;;85     //        }
;;;86     //    }
;;;87     //    return FALSE;
;;;88     }
000014  bd1c              POP      {r2-r4,pc}
                  |L1.22|
000016  466a              MOV      r2,sp                 ;73
000018  a901              ADD      r1,sp,#4              ;73
00001a  2001              MOVS     r0,#1                 ;73
00001c  f7fffffe          BL       BSP_HD_KeyGet
000020  f89d0004          LDRB     r0,[sp,#4]            ;74
000024  b908              CBNZ     r0,|L1.42|
000026  2000              MOVS     r0,#0                 ;75
000028  e7f4              B        |L1.20|
                  |L1.42|
00002a  2001              MOVS     r0,#1                 ;77
00002c  e7f2              B        |L1.20|
;;;89     
                          ENDP

                  DBG_StartAlarmTestLed PROC
;;;94     /// -----------------------------------------------------------------------------------------------------
;;;95     static  void  DBG_StartAlarmTestLed (void)
00002e  b510              PUSH     {r4,lr}
;;;96     {
;;;97         u32     i;
;;;98         
;;;99         
;;;100        for (i = 0; i < 10; i++) {
000030  2400              MOVS     r4,#0
000032  e00a              B        |L1.74|
                  |L1.52|
;;;101            BSP_LED_Toggle(i & 1);
000034  f0040001          AND      r0,r4,#1
000038  f7fffffe          BL       BSP_LED_Toggle
;;;102            OSTimeDlyHMSM(0, 0, 0, 200);
00003c  23c8              MOVS     r3,#0xc8
00003e  2200              MOVS     r2,#0
000040  4611              MOV      r1,r2
000042  4610              MOV      r0,r2
000044  f7fffffe          BL       OSTimeDlyHMSM
000048  1c64              ADDS     r4,r4,#1              ;100
                  |L1.74|
00004a  2c0a              CMP      r4,#0xa               ;100
00004c  d3f2              BCC      |L1.52|
;;;103        }
;;;104        for (i = 0; i < BSP_LED_ID_N; i++) {
00004e  2400              MOVS     r4,#0
000050  e004              B        |L1.92|
                  |L1.82|
;;;105            BSP_LED_Set(i, BSP_LED_OFF);
000052  2101              MOVS     r1,#1
000054  b2e0              UXTB     r0,r4
000056  f7fffffe          BL       BSP_LED_Set
00005a  1c64              ADDS     r4,r4,#1              ;104
                  |L1.92|
00005c  2c02              CMP      r4,#2                 ;104
00005e  d3f8              BCC      |L1.82|
;;;106        }
;;;107    }
000060  bd10              POP      {r4,pc}
;;;108    
                          ENDP

                  DBG_EndAlarm PROC
;;;113    /// -----------------------------------------------------------------------------------------------------
;;;114    static  void  DBG_EndAlarm (void)
000062  bf00              NOP      
                  |L1.100|
;;;115    {
;;;116        u32     i;
;;;117        
;;;118        
;;;119        for ( ; ; ) {
;;;120            for (i = 0; i < BSP_DEVICE_ID_N; i++) {
000064  2400              MOVS     r4,#0
000066  e004              B        |L1.114|
                  |L1.104|
;;;121    
;;;122                HDLED_Sparkle((BSP_ID_TypeDef)i, 3);
000068  2103              MOVS     r1,#3
00006a  b2e0              UXTB     r0,r4
00006c  f7fffffe          BL       HDLED_Sparkle
000070  1c64              ADDS     r4,r4,#1              ;120
                  |L1.114|
000072  2c02              CMP      r4,#2                 ;120
000074  d3f8              BCC      |L1.104|
;;;123    
;;;124            }
;;;125            OSTimeDlyHMSM(0, 0, 1, 0);
000076  2300              MOVS     r3,#0
000078  2201              MOVS     r2,#1
00007a  4619              MOV      r1,r3
00007c  4618              MOV      r0,r3
00007e  f7fffffe          BL       OSTimeDlyHMSM
000082  e7ef              B        |L1.100|
;;;126        }
;;;127    }
;;;128    
                          ENDP

                  DBG_HD PROC
;;;133    /// -----------------------------------------------------------------------------------------------------
;;;134    static  void  DBG_HD (void)
000084  b57c              PUSH     {r2-r6,lr}
;;;135    {
;;;136        BSP_HD_KEY_TypeDef  up;
;;;137        BSP_HD_KEY_TypeDef  dn;
;;;138    //    BSP_LED_TypeDef     r;
;;;139    //    BSP_LED_TypeDef     g;
;;;140        HDLED_ST_TypeDef    st;
;;;141        u32                 i;
;;;142        
;;;143        
;;;144        for (i = 0; i < BSP_DEVICE_ID_N; i++) {
000086  2400              MOVS     r4,#0
000088  e019              B        |L1.190|
                  |L1.138|
;;;145            BSP_HD_KeyGet((BSP_ID_TypeDef)i, &up, &dn);
00008a  466a              MOV      r2,sp
00008c  a901              ADD      r1,sp,#4
00008e  b2e0              UXTB     r0,r4
000090  f7fffffe          BL       BSP_HD_KeyGet
;;;146    //        if (up == BSP_HD_KEY_OFF) {
;;;147    //            r   =   BSP_LED_OFF;
;;;148    //            if (dn == BSP_HD_KEY_OFF) {
;;;149    //                g   =   BSP_LED_ON;
;;;150    //            } else {
;;;151    //                g   =   BSP_LED_OFF;
;;;152    //            }
;;;153    //        } else {
;;;154    //            r   =   BSP_LED_ON;
;;;155    //            if (dn == BSP_HD_KEY_OFF) {
;;;156    //                g   =   BSP_LED_OFF;
;;;157    //            } else {
;;;158    //                g   =   BSP_LED_ON;
;;;159    //            }
;;;160    //        }
;;;161    //        BSP_HD_LedSet((BSP_ID_TypeDef)i, r, g);
;;;162            
;;;163            if (up == BSP_HD_KEY_OFF) {
000094  f89d0004          LDRB     r0,[sp,#4]
000098  b930              CBNZ     r0,|L1.168|
;;;164                if (dn == BSP_HD_KEY_OFF) {
00009a  f89d0000          LDRB     r0,[sp,#0]
00009e  b908              CBNZ     r0,|L1.164|
;;;165                    st  =   HDLED_ST_OFF;
0000a0  2503              MOVS     r5,#3
0000a2  e007              B        |L1.180|
                  |L1.164|
;;;166                } else {
;;;167                    st  =   HDLED_ST_GRE;
0000a4  2502              MOVS     r5,#2
0000a6  e005              B        |L1.180|
                  |L1.168|
;;;168                }
;;;169            } else {
;;;170                if (dn == BSP_HD_KEY_OFF) {
0000a8  f89d0000          LDRB     r0,[sp,#0]
0000ac  b908              CBNZ     r0,|L1.178|
;;;171                    st  =   HDLED_ST_RED;
0000ae  2501              MOVS     r5,#1
0000b0  e000              B        |L1.180|
                  |L1.178|
;;;172                } else {
;;;173                    st  =   HDLED_ST_ORA;
0000b2  2500              MOVS     r5,#0
                  |L1.180|
;;;174                }
;;;175            }
;;;176            HDLED_Set((BSP_ID_TypeDef)i, st);
0000b4  4629              MOV      r1,r5
0000b6  b2e0              UXTB     r0,r4
0000b8  f7fffffe          BL       HDLED_Set
0000bc  1c64              ADDS     r4,r4,#1              ;144
                  |L1.190|
0000be  2c02              CMP      r4,#2                 ;144
0000c0  d3e3              BCC      |L1.138|
;;;177        }
;;;178    }
0000c2  bd7c              POP      {r2-r6,pc}
;;;179    
                          ENDP

                  DBG_SqnSwiIsOK PROC
;;;545    #define     DBG_PHASE_MASK              0x07    /// 只有8个状态循环
;;;546    static  bool  DBG_SqnSwiIsOK (u8 phase)
0000c4  e92d47f0          PUSH     {r4-r10,lr}
;;;547    {
0000c8  4607              MOV      r7,r0
;;;548        BSP_EMB_ST_TypeDef  stodd;
;;;549        BSP_EMB_ST_TypeDef  steven;
;;;550        u32                 outin;
;;;551        u32                 swiin;
;;;552        
;;;553        
;;;554        switch (phase & DBG_PHASE_MASK) {
0000ca  f0070007          AND      r0,r7,#7
0000ce  2808              CMP      r0,#8
0000d0  d225              BCS      |L1.286|
0000d2  e8dff000          TBB      [pc,r0]
0000d6  0408              DCB      0x04,0x08
0000d8  0c101418          DCB      0x0c,0x10,0x14,0x18
0000dc  1c20              DCB      0x1c,0x20
;;;555        case 0:
;;;556            stodd   =   BSP_EMB_ST_NORMAL;
0000de  2401              MOVS     r4,#1
;;;557            steven  =   BSP_EMB_ST_OFF;
0000e0  2500              MOVS     r5,#0
;;;558            outin   =   0x01;
0000e2  2601              MOVS     r6,#1
;;;559            break;
0000e4  e01c              B        |L1.288|
;;;560        case 1:
;;;561            stodd   =   BSP_EMB_ST_NORMAL;
0000e6  2401              MOVS     r4,#1
;;;562            steven  =   BSP_EMB_ST_PATCH;
0000e8  2502              MOVS     r5,#2
;;;563            outin   =   0x03;
0000ea  2603              MOVS     r6,#3
;;;564            break;
0000ec  e018              B        |L1.288|
;;;565        case 2:
;;;566            stodd   =   (BSP_EMB_ST_TypeDef)(BSP_EMB_ST_NORMAL | BSP_EMB_ST_PATCH);
0000ee  2403              MOVS     r4,#3
;;;567            steven  =   BSP_EMB_ST_PATCH;
0000f0  2502              MOVS     r5,#2
;;;568            outin   =   0x07;
0000f2  2607              MOVS     r6,#7
;;;569            break;
0000f4  e014              B        |L1.288|
;;;570        case 3:
;;;571            stodd   =   (BSP_EMB_ST_TypeDef)(BSP_EMB_ST_NORMAL | BSP_EMB_ST_PATCH);
0000f6  2403              MOVS     r4,#3
;;;572            steven  =   (BSP_EMB_ST_TypeDef)(BSP_EMB_ST_NORMAL | BSP_EMB_ST_PATCH);
0000f8  2503              MOVS     r5,#3
;;;573            outin   =   0x0f;
0000fa  260f              MOVS     r6,#0xf
;;;574            break;
0000fc  e010              B        |L1.288|
;;;575        case 4:
;;;576            stodd   =   BSP_EMB_ST_PATCH;
0000fe  2402              MOVS     r4,#2
;;;577            steven  =   (BSP_EMB_ST_TypeDef)(BSP_EMB_ST_NORMAL | BSP_EMB_ST_PATCH);
000100  2503              MOVS     r5,#3
;;;578            outin   =   0x0e;
000102  260e              MOVS     r6,#0xe
;;;579            break;
000104  e00c              B        |L1.288|
;;;580        case 5:
;;;581            stodd   =   BSP_EMB_ST_PATCH;
000106  2402              MOVS     r4,#2
;;;582            steven  =   BSP_EMB_ST_NORMAL;
000108  2501              MOVS     r5,#1
;;;583            outin   =   0x0c;
00010a  260c              MOVS     r6,#0xc
;;;584            break;
00010c  e008              B        |L1.288|
;;;585        case 6:
;;;586            stodd   =   BSP_EMB_ST_OFF;
00010e  2400              MOVS     r4,#0
;;;587            steven  =   BSP_EMB_ST_NORMAL;
000110  2501              MOVS     r5,#1
;;;588            outin   =   0x08;
000112  2608              MOVS     r6,#8
;;;589            break;
000114  e004              B        |L1.288|
;;;590        case 7:
;;;591            stodd   =   BSP_EMB_ST_OFF;
000116  2400              MOVS     r4,#0
;;;592            steven  =   BSP_EMB_ST_OFF;
000118  2500              MOVS     r5,#0
;;;593            outin   =   0x00;
00011a  2600              MOVS     r6,#0
;;;594            break;
00011c  e000              B        |L1.288|
                  |L1.286|
;;;595        default:
;;;596            break;
00011e  bf00              NOP      
                  |L1.288|
000120  bf00              NOP                            ;559
;;;597        }
;;;598        BSP_SQN_EmbStSend(BSP_ID_ODD , stodd);
000122  4621              MOV      r1,r4
000124  2000              MOVS     r0,#0
000126  f7fffffe          BL       BSP_SQN_EmbStSend
;;;599        BSP_SQN_EmbStSend(BSP_ID_EVEN, steven);//steven=3，R36是3.3V
00012a  4629              MOV      r1,r5
00012c  2001              MOVS     r0,#1
00012e  f7fffffe          BL       BSP_SQN_EmbStSend
;;;600        
;;;601        BSP_TM8M_Delay(DBG_MAX_US_SWI_TOGGLE * 8);
000132  f44f60c8          MOV      r0,#0x640
000136  f7fffffe          BL       BSP_TM8M_Delay
;;;602        
;;;603        swiin   =   (BSP_SWI_FiGet(BSP_ID_ODD)  << 0)
00013a  2000              MOVS     r0,#0
00013c  f7fffffe          BL       BSP_SWI_FiGet
000140  4681              MOV      r9,r0
000142  2001              MOVS     r0,#1
000144  f7fffffe          BL       BSP_SWI_SeGet
000148  ea490940          ORR      r9,r9,r0,LSL #1
00014c  2000              MOVS     r0,#0
00014e  f7fffffe          BL       BSP_SWI_SeGet
000152  ea490980          ORR      r9,r9,r0,LSL #2
000156  2001              MOVS     r0,#1
000158  f7fffffe          BL       BSP_SWI_FiGet
00015c  ea4908c0          ORR      r8,r9,r0,LSL #3
;;;604                  | (BSP_SWI_SeGet(BSP_ID_EVEN) << 1)
;;;605                  | (BSP_SWI_SeGet(BSP_ID_ODD)  << 2)
;;;606                  | (BSP_SWI_FiGet(BSP_ID_EVEN) << 3);
;;;607        if (swiin == outin) {
000160  45b0              CMP      r8,r6
000162  d102              BNE      |L1.362|
;;;608            return TRUE;
000164  2001              MOVS     r0,#1
                  |L1.358|
;;;609        } else {
;;;610            return FALSE;
;;;611        }
;;;612    }
000166  e8bd87f0          POP      {r4-r10,pc}
                  |L1.362|
00016a  2000              MOVS     r0,#0                 ;610
00016c  e7fb              B        |L1.358|
;;;613    
                          ENDP

                  DBG_C491IsOK PROC
;;;634    
;;;635    static  bool  DBG_C491IsOK (void)
00016e  b570              PUSH     {r4-r6,lr}
;;;636    {
000170  b090              SUB      sp,sp,#0x40
;;;637        u32     i;
;;;638        u16     mask;
;;;639        u16     random;
;;;640        u16     buf[C491_T_BUF_SIZE];
;;;641        
;;;642        
;;;643        if (BSP_Is924) {
000172  4883              LDR      r0,|L1.896|
000174  7800              LDRB     r0,[r0,#0]  ; BSP_Is924
000176  b108              CBZ      r0,|L1.380|
;;;644            i   =   9;
000178  2409              MOVS     r4,#9
00017a  e000              B        |L1.382|
                  |L1.380|
;;;645        } else {
;;;646            i   =   8;
00017c  2408              MOVS     r4,#8
                  |L1.382|
;;;647        }
;;;648        mask    =   (1 << i) - 1;
00017e  2001              MOVS     r0,#1
000180  40a0              LSLS     r0,r0,r4
000182  1e40              SUBS     r0,r0,#1
000184  b286              UXTH     r6,r0
;;;649        random  =   BSP_TM8M_Get();
000186  f7fffffe          BL       BSP_TM8M_Get
00018a  4605              MOV      r5,r0
;;;650        
;;;651        for (i = 0; i < C491_T_BUF_SIZE; i++) {
00018c  2400              MOVS     r4,#0
00018e  e006              B        |L1.414|
                  |L1.400|
;;;652            buf[i]  =   ((random >> i) + random) & mask;
000190  fa45f004          ASR      r0,r5,r4
000194  4428              ADD      r0,r0,r5
000196  4030              ANDS     r0,r0,r6
000198  f82d0014          STRH     r0,[sp,r4,LSL #1]
00019c  1c64              ADDS     r4,r4,#1              ;651
                  |L1.414|
00019e  2c20              CMP      r4,#0x20              ;651
0001a0  d3f6              BCC      |L1.400|
;;;653        }
;;;654    //    C491_Send(C491_T_BUF_SIZE, buf);
;;;655        if (C491_SendBuf(C491_T_BUF_SIZE, buf, DBG_C491_OVERTIME)) {
0001a2  2203              MOVS     r2,#3
0001a4  4669              MOV      r1,sp
0001a6  2020              MOVS     r0,#0x20
0001a8  f7fffffe          BL       C491_SendBuf
0001ac  b110              CBZ      r0,|L1.436|
;;;656            return FALSE;
0001ae  2000              MOVS     r0,#0
                  |L1.432|
;;;657        }
;;;658        
;;;659        for (i = 0; i < C491_T_BUF_SIZE; i++) {
;;;660            if (C491_ReceiveOne(DBG_C491_OVERTIME) != buf[i]) {
;;;661                return FALSE;
;;;662            }
;;;663        }
;;;664        return  TRUE;
;;;665    }
0001b0  b010              ADD      sp,sp,#0x40
0001b2  bd70              POP      {r4-r6,pc}
                  |L1.436|
0001b4  2400              MOVS     r4,#0                 ;659
0001b6  e009              B        |L1.460|
                  |L1.440|
0001b8  2003              MOVS     r0,#3                 ;660
0001ba  f7fffffe          BL       C491_ReceiveOne
0001be  f83d1014          LDRH     r1,[sp,r4,LSL #1]     ;660
0001c2  4288              CMP      r0,r1                 ;660
0001c4  d001              BEQ      |L1.458|
0001c6  2000              MOVS     r0,#0                 ;661
0001c8  e7f2              B        |L1.432|
                  |L1.458|
0001ca  1c64              ADDS     r4,r4,#1              ;659
                  |L1.460|
0001cc  2c20              CMP      r4,#0x20              ;659
0001ce  d3f3              BCC      |L1.440|
0001d0  2001              MOVS     r0,#1                 ;664
0001d2  e7ed              B        |L1.432|
;;;666    static  const   IO_ID_TypeDef   dbg_io_id_sol[BSP_DEVICE_ID_N]   =   {PC08_SOL_ODD, PC09_SOL_EVEN};
                          ENDP

                  DBG_SolideOK PROC
;;;667    static  const   IO_ID_TypeDef   dbg_io_id_qf[1]  =   {PA08_SOL0};
;;;668    void  DBG_SolideOK (u32 j)
0001d4  b570              PUSH     {r4-r6,lr}
;;;669     {
0001d6  4605              MOV      r5,r0
;;;670     	u32     i;
;;;671    	if(j%2)
0001d8  f0150f01          TST      r5,#1
0001dc  d00b              BEQ      |L1.502|
;;;672    	{
;;;673    		for(i=0;i<1;i++)
0001de  2400              MOVS     r4,#0
0001e0  e006              B        |L1.496|
                  |L1.482|
;;;674        		IO_OutSet(dbg_io_id_sol[(BSP_ID_TypeDef)i], BSP_SOL_OFF);
0001e2  4968              LDR      r1,|L1.900|
0001e4  b2e2              UXTB     r2,r4
0001e6  5c88              LDRB     r0,[r1,r2]
0001e8  2100              MOVS     r1,#0
0001ea  f7fffffe          BL       IO_OutSet
0001ee  1c64              ADDS     r4,r4,#1              ;673
                  |L1.496|
0001f0  2c00              CMP      r4,#0                 ;673
0001f2  d0f6              BEQ      |L1.482|
0001f4  e00a              B        |L1.524|
                  |L1.502|
;;;675    		//IO_OutSet(dbg_io_id_qf[(BSP_ID_TypeDef)0], BSP_SOL_OFF);
;;;676    	}
;;;677    	else
;;;678    	{
;;;679    	 	for(i=0;i<1;i++)
0001f6  2400              MOVS     r4,#0
0001f8  e006              B        |L1.520|
                  |L1.506|
;;;680        		IO_OutSet(dbg_io_id_sol[(BSP_ID_TypeDef)i], BSP_SOL_ON);
0001fa  4962              LDR      r1,|L1.900|
0001fc  b2e2              UXTB     r2,r4
0001fe  5c88              LDRB     r0,[r1,r2]
000200  2101              MOVS     r1,#1
000202  f7fffffe          BL       IO_OutSet
000206  1c64              ADDS     r4,r4,#1              ;679
                  |L1.520|
000208  2c00              CMP      r4,#0                 ;679
00020a  d0f6              BEQ      |L1.506|
                  |L1.524|
;;;681    	 	//IO_OutSet(dbg_io_id_qf[(BSP_ID_TypeDef)0], BSP_SOL_ON);
;;;682    	}	
;;;683     }
00020c  bd70              POP      {r4-r6,pc}
;;;684    #define     DBG_CYCLE_MS    500
                          ENDP

                  DBG_ALL PROC
;;;685    void  DBG_ALL (u16 hour)
00020e  b50e              PUSH     {r1-r3,lr}
;;;686    {
000210  4682              MOV      r10,r0
;;;687        u32     last;//,dbg_wait,dbg_maichong;
;;;688        u32     dip;
;;;689        u32     loop;
;;;690        u32     i;
;;;691      //  bool    isok;
;;;692        MOTO_HGH_CMD_TypeDef    hodd[4];
;;;693        MOTO_HGH_CMD_TypeDef    heve[4];
;;;694        u16 ODD_AD_Value_Now,ODD_AD_Value_Last,EVE_AD_Value_Now,EVE_AD_Value_Last;
;;;695        
;;;696        DBG_StartAlarmTestLed();
000212  f7fffffe          BL       DBG_StartAlarmTestLed
;;;697        
;;;698        last    =   BSP_DIP_Get();
000216  f7fffffe          BL       BSP_DIP_Get
00021a  4683              MOV      r11,r0
;;;699      //  isok    =   TRUE;
;;;700        loop    =   hour * 3600 * 1000 / DBG_CYCLE_MS;
00021c  f44f6161          MOV      r1,#0xe10
000220  fb0af001          MUL      r0,r10,r1
000224  f44f717a          MOV      r1,#0x3e8
000228  4348              MULS     r0,r1,r0
00022a  1049              ASRS     r1,r1,#1
00022c  fb90f0f1          SDIV     r0,r0,r1
000230  9002              STR      r0,[sp,#8]
;;;701        hodd[0]    =   MOTO_HGH_POS0;
000232  2000              MOVS     r0,#0
000234  f88d0004          STRB     r0,[sp,#4]
;;;702    	hodd[1]    =   MOTO_HGH_POS3;
000238  2003              MOVS     r0,#3
00023a  f88d0005          STRB     r0,[sp,#5]
;;;703    	hodd[2]    =   MOTO_HGH_POS7;
00023e  2007              MOVS     r0,#7
000240  f88d0006          STRB     r0,[sp,#6]
;;;704    	hodd[3]    =   MOTO_HGH_POS10;
000244  200a              MOVS     r0,#0xa
000246  f88d0007          STRB     r0,[sp,#7]
;;;705        heve[0]    =   MOTO_HGH_POS0;
00024a  2000              MOVS     r0,#0
00024c  f88d0000          STRB     r0,[sp,#0]
;;;706        heve[1]    =   MOTO_HGH_POS3;
000250  2003              MOVS     r0,#3
000252  f88d0001          STRB     r0,[sp,#1]
;;;707    	heve[2]    =   MOTO_HGH_POS7;
000256  2007              MOVS     r0,#7
000258  f88d0002          STRB     r0,[sp,#2]
;;;708    	heve[3]    =   MOTO_HGH_POS10;
00025c  200a              MOVS     r0,#0xa
00025e  f88d0003          STRB     r0,[sp,#3]
;;;709        for (i = 0; i < loop; i++) {
000262  2700              MOVS     r7,#0
000264  e085              B        |L1.882|
                  |L1.614|
;;;710            /// 依次测试各个部分, 执行时间从短到长
;;;711            
;;;712            /// 1   检测DIP
;;;713            dip =   BSP_DIP_Get();
000266  f7fffffe          BL       BSP_DIP_Get
00026a  4606              MOV      r6,r0
;;;714            if (dip != last) {
00026c  455e              CMP      r6,r11
00026e  d003              BEQ      |L1.632|
;;;715                BSP_LED_Toggle(DBG_LED_DIP);
000270  2001              MOVS     r0,#1
000272  f7fffffe          BL       BSP_LED_Toggle
;;;716                last    =   dip;
000276  46b3              MOV      r11,r6
                  |L1.632|
;;;717            }
;;;718            
;;;719            /// 2   检测机头板
;;;720            DBG_HD();
000278  f7fffffe          BL       DBG_HD
;;;721            
;;;722            /// 3   检测输入输出口, 约100uS
;;;723    //        if (isok) {
;;;724               // isok    =   
;;;725    			DBG_SqnSwiIsOK(i & DBG_PHASE_MASK);
00027c  f0070007          AND      r0,r7,#7
000280  f7fffffe          BL       DBG_SqnSwiIsOK
;;;726           // }
;;;727            
;;;728            /// 4   检测491串口通讯, 1Byte 用100uS, C491_T_BUF_SIZE 个字节用1.6mS
;;;729            if (DBG_C491IsOK()) {
000284  f7fffffe          BL       DBG_C491IsOK
000288  b110              CBZ      r0,|L1.656|
;;;730                BSP_LED_Toggle(DBG_LED_491);
00028a  2000              MOVS     r0,#0
00028c  f7fffffe          BL       BSP_LED_Toggle
                  |L1.656|
;;;731            }
;;;732    
;;;733            /// 5   检测老化电机
;;;734            if (MOTO_HghGetState(BSP_ID_ODD) == MOTO_ST_OK) {
000290  2000              MOVS     r0,#0
000292  f7fffffe          BL       MOTO_HghGetState
000296  2805              CMP      r0,#5
000298  d10e              BNE      |L1.696|
;;;735                MOTO_HghSetCmd(BSP_ID_ODD, hodd[0]);
00029a  f89d1004          LDRB     r1,[sp,#4]
00029e  2000              MOVS     r0,#0
0002a0  f7fffffe          BL       MOTO_HghSetCmd
;;;736                if (hodd[0] == MOTO_HGH_POS0) {
0002a4  f89d0004          LDRB     r0,[sp,#4]
0002a8  b918              CBNZ     r0,|L1.690|
;;;737                    hodd[0] = MOTO_HGH_POS10;
0002aa  200a              MOVS     r0,#0xa
0002ac  f88d0004          STRB     r0,[sp,#4]
0002b0  e002              B        |L1.696|
                  |L1.690|
;;;738                } else {
;;;739                    hodd[0] = MOTO_HGH_POS0;
0002b2  2000              MOVS     r0,#0
0002b4  f88d0004          STRB     r0,[sp,#4]
                  |L1.696|
;;;740                }
;;;741    			
;;;742    			
;;;743    
;;;744            }
;;;745            if (MOTO_HghGetState(BSP_ID_EVEN) == MOTO_ST_OK) {
0002b8  2001              MOVS     r0,#1
0002ba  f7fffffe          BL       MOTO_HghGetState
0002be  2805              CMP      r0,#5
0002c0  d10e              BNE      |L1.736|
;;;746                MOTO_HghSetCmd(BSP_ID_EVEN, heve[0]);
0002c2  f89d1000          LDRB     r1,[sp,#0]
0002c6  2001              MOVS     r0,#1
0002c8  f7fffffe          BL       MOTO_HghSetCmd
;;;747                if (heve[0] == MOTO_HGH_POS0) {
0002cc  f89d0000          LDRB     r0,[sp,#0]
0002d0  b918              CBNZ     r0,|L1.730|
;;;748                    heve[0] = MOTO_HGH_POS10;
0002d2  200a              MOVS     r0,#0xa
0002d4  f88d0000          STRB     r0,[sp,#0]
0002d8  e002              B        |L1.736|
                  |L1.730|
;;;749                } else {
;;;750                    heve[0] = MOTO_HGH_POS0;
0002da  2000              MOVS     r0,#0
0002dc  f88d0000          STRB     r0,[sp,#0]
                  |L1.736|
;;;751                } 
;;;752    			
;;;753            } /*
;;;754    		for(dbg_maichong=0;dbg_maichong<100;dbg_maichong++)
;;;755    		{
;;;756    			BSP_MOTO_ClkSet((BSP_ID_TypeDef)0, (BitAction)0);
;;;757    			for(dbg_wait=0;dbg_wait<200;dbg_wait++)
;;;758    				dbg_wait++;
;;;759    			BSP_MOTO_ClkSet((BSP_ID_TypeDef)0, (BitAction)1);
;;;760    			for(dbg_wait=0;dbg_wait<200;dbg_wait++)
;;;761    				dbg_wait++;
;;;762    		}*/	
;;;763    		//检查电位器
;;;764    		ODD_AD_Value_Now=BSP_POT_GetAve(BSP_ID_ODD);
0002e0  2000              MOVS     r0,#0
0002e2  f7fffffe          BL       BSP_POT_GetAve
0002e6  4605              MOV      r5,r0
;;;765    		EVE_AD_Value_Now=BSP_POT_GetAve(BSP_ID_EVEN);
0002e8  2001              MOVS     r0,#1
0002ea  f7fffffe          BL       BSP_POT_GetAve
0002ee  4604              MOV      r4,r0
;;;766    		if(ODD_AD_Value_Last>ODD_AD_Value_Now)
0002f0  45a8              CMP      r8,r5
0002f2  dd09              BLE      |L1.776|
;;;767    		{
;;;768    			if((ODD_AD_Value_Last-ODD_AD_Value_Now)>100)
0002f4  eba80005          SUB      r0,r8,r5
0002f8  2864              CMP      r0,#0x64
0002fa  dd0e              BLE      |L1.794|
;;;769    			{
;;;770    				IO_OutSet(dbg_io_id_qf[(BSP_ID_TypeDef)0], BSP_SOL_ON);	
0002fc  4922              LDR      r1,|L1.904|
0002fe  7808              LDRB     r0,[r1,#0]  ; dbg_io_id_qf
000300  2101              MOVS     r1,#1
000302  f7fffffe          BL       IO_OutSet
000306  e008              B        |L1.794|
                  |L1.776|
;;;771    			}
;;;772    		}
;;;773    		else
;;;774    		{
;;;775    			if((ODD_AD_Value_Now-ODD_AD_Value_Last)>100)
000308  eba50008          SUB      r0,r5,r8
00030c  2864              CMP      r0,#0x64
00030e  dd04              BLE      |L1.794|
;;;776    			{
;;;777    				IO_OutSet(dbg_io_id_qf[(BSP_ID_TypeDef)0], BSP_SOL_ON);	
000310  491d              LDR      r1,|L1.904|
000312  7808              LDRB     r0,[r1,#0]  ; dbg_io_id_qf
000314  2101              MOVS     r1,#1
000316  f7fffffe          BL       IO_OutSet
                  |L1.794|
;;;778    			}
;;;779    		}
;;;780    		if(EVE_AD_Value_Last>EVE_AD_Value_Now)
00031a  45a1              CMP      r9,r4
00031c  dd09              BLE      |L1.818|
;;;781    		{
;;;782    			if((EVE_AD_Value_Last-EVE_AD_Value_Now)>100)
00031e  eba90004          SUB      r0,r9,r4
000322  2864              CMP      r0,#0x64
000324  dd0e              BLE      |L1.836|
;;;783    			{
;;;784    				IO_OutSet(dbg_io_id_sol[(BSP_ID_TypeDef)1], BSP_SOL_ON);	
000326  4917              LDR      r1,|L1.900|
000328  7848              LDRB     r0,[r1,#1]  ; dbg_io_id_sol
00032a  2101              MOVS     r1,#1
00032c  f7fffffe          BL       IO_OutSet
000330  e008              B        |L1.836|
                  |L1.818|
;;;785    			}
;;;786    		}
;;;787    		else
;;;788    		{
;;;789    			if((EVE_AD_Value_Now-EVE_AD_Value_Last)>100)
000332  eba40009          SUB      r0,r4,r9
000336  2864              CMP      r0,#0x64
000338  dd04              BLE      |L1.836|
;;;790    			{
;;;791    				IO_OutSet(dbg_io_id_sol[(BSP_ID_TypeDef)1], BSP_SOL_ON);	
00033a  4912              LDR      r1,|L1.900|
00033c  7848              LDRB     r0,[r1,#1]  ; dbg_io_id_sol
00033e  2101              MOVS     r1,#1
000340  f7fffffe          BL       IO_OutSet
                  |L1.836|
;;;792    			}
;;;793    		}
;;;794    
;;;795    		ODD_AD_Value_Last=ODD_AD_Value_Now;	
000344  46a8              MOV      r8,r5
;;;796    		EVE_AD_Value_Last=EVE_AD_Value_Now;	
000346  46a1              MOV      r9,r4
;;;797    		//6 电磁铁检查
;;;798    	    DBG_SolideOK(i);
000348  4638              MOV      r0,r7
00034a  f7fffffe          BL       DBG_SolideOK
;;;799    //        if (MOTO_CutGetState(BSP_ID_ODD) == MOTO_ST_OK) {
;;;800    //            MOTO_CutSetCmd(BSP_ID_ODD, MOTO_CUT_FULL);
;;;801    //        } 
;;;802    //        if (MOTO_CutGetState(BSP_ID_EVEN) == MOTO_ST_OK) {
;;;803    //            MOTO_CutSetCmd(BSP_ID_EVEN, MOTO_CUT_FULL);
;;;804    //        }
;;;805            
;;;806            /// 使检测周期约为 DBG_CYCLE_MS
;;;807    		
;;;808            OSTimeDlyHMSM(0, 0, 0, DBG_CYCLE_MS);
00034e  f44f73fa          MOV      r3,#0x1f4
000352  2200              MOVS     r2,#0
000354  4611              MOV      r1,r2
000356  4610              MOV      r0,r2
000358  f7fffffe          BL       OSTimeDlyHMSM
;;;809    		IO_OutSet(dbg_io_id_qf[(BSP_ID_TypeDef)0], BSP_SOL_OFF);
00035c  490a              LDR      r1,|L1.904|
00035e  7808              LDRB     r0,[r1,#0]  ; dbg_io_id_qf
000360  2100              MOVS     r1,#0
000362  f7fffffe          BL       IO_OutSet
;;;810    		IO_OutSet(dbg_io_id_sol[(BSP_ID_TypeDef)1], BSP_SOL_OFF);
000366  4907              LDR      r1,|L1.900|
000368  7848              LDRB     r0,[r1,#1]  ; dbg_io_id_sol
00036a  2100              MOVS     r1,#0
00036c  f7fffffe          BL       IO_OutSet
000370  1c7f              ADDS     r7,r7,#1              ;709
                  |L1.882|
000372  9802              LDR      r0,[sp,#8]            ;709
000374  4287              CMP      r7,r0                 ;709
000376  f4ffaf76          BCC      |L1.614|
;;;811        }
;;;812        
;;;813        DBG_EndAlarm();
00037a  f7fffffe          BL       DBG_EndAlarm
;;;814    }
;;;815    
                          ENDP

00037e  0000              DCW      0x0000
                  |L1.896|
                          DCD      BSP_Is924
                  |L1.900|
                          DCD      dbg_io_id_sol
                  |L1.904|
                          DCD      dbg_io_id_qf

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dbg_io_id_sol
000000  2829              DCB      0x28,0x29
                  dbg_io_id_qf
000002  08                DCB      0x08
