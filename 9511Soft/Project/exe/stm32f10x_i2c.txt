; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_i2c.o --depend=.\exe\stm32f10x_i2c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_i2c.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_i2c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  I2C_DeInit PROC
;;;160      */
;;;161    void I2C_DeInit(I2C_TypeDef* I2Cx)
000000  b510              PUSH     {r4,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163      /* Check the parameters */
;;;164      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;165    
;;;166      if (I2Cx == I2C1)
000004  48ee              LDR      r0,|L1.960|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L1.30|
;;;167      {
;;;168        /* Enable I2C1 reset state */
;;;169        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0548              LSLS     r0,r1,#21
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;170        /* Release I2C1 from reset state */
;;;171        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f1000          MOV      r0,#0x200000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
00001c  e008              B        |L1.48|
                  |L1.30|
;;;172      }
;;;173      else
;;;174      {
;;;175        /* Enable I2C2 reset state */
;;;176        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
00001e  2101              MOVS     r1,#1
000020  0588              LSLS     r0,r1,#22
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;177        /* Release I2C2 from reset state */
;;;178        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
000026  2100              MOVS     r1,#0
000028  f44f0080          MOV      r0,#0x400000
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L1.48|
;;;179      }
;;;180    }
000030  bd10              POP      {r4,pc}
;;;181    
                          ENDP

                  I2C_Init PROC
;;;189      */
;;;190    void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
000032  e92d43f0          PUSH     {r4-r9,lr}
;;;191    {
000036  b085              SUB      sp,sp,#0x14
000038  4604              MOV      r4,r0
00003a  460d              MOV      r5,r1
;;;192      uint16_t tmpreg = 0, freqrange = 0;
00003c  2600              MOVS     r6,#0
00003e  46b1              MOV      r9,r6
;;;193      uint16_t result = 0x04;
000040  2704              MOVS     r7,#4
;;;194      uint32_t pclk1 = 8000000;
000042  f8df8380          LDR      r8,|L1.964|
;;;195      RCC_ClocksTypeDef  rcc_clocks;
;;;196      /* Check the parameters */
;;;197      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;198      assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
;;;199      assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
;;;200      assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
;;;201      assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
;;;202      assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
;;;203      assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
;;;204    
;;;205    /*---------------------------- I2Cx CR2 Configuration ------------------------*/
;;;206      /* Get the I2Cx CR2 value */
;;;207      tmpreg = I2Cx->CR2;
000046  88a6              LDRH     r6,[r4,#4]
;;;208      /* Clear frequency FREQ[5:0] bits */
;;;209      tmpreg &= CR2_FREQ_Reset;
000048  f64f71c0          MOV      r1,#0xffc0
00004c  400e              ANDS     r6,r6,r1
;;;210      /* Get pclk1 frequency value */
;;;211      RCC_GetClocksFreq(&rcc_clocks);
00004e  4668              MOV      r0,sp
000050  f7fffffe          BL       RCC_GetClocksFreq
;;;212      pclk1 = rcc_clocks.PCLK1_Frequency;
000054  f8dd8008          LDR      r8,[sp,#8]
;;;213      /* Set frequency bits depending on pclk1 value */
;;;214      freqrange = (uint16_t)(pclk1 / 1000000);
000058  48db              LDR      r0,|L1.968|
00005a  fbb8f0f0          UDIV     r0,r8,r0
00005e  fa1ff980          UXTH     r9,r0
;;;215      tmpreg |= freqrange;
000062  ea460609          ORR      r6,r6,r9
;;;216      /* Write to I2Cx CR2 */
;;;217      I2Cx->CR2 = tmpreg;
000066  80a6              STRH     r6,[r4,#4]
;;;218    
;;;219    /*---------------------------- I2Cx CCR Configuration ------------------------*/
;;;220      /* Disable the selected I2C peripheral to configure TRISE */
;;;221      I2Cx->CR1 &= CR1_PE_Reset;
000068  8820              LDRH     r0,[r4,#0]
00006a  f64f71fe          MOV      r1,#0xfffe
00006e  4008              ANDS     r0,r0,r1
000070  8020              STRH     r0,[r4,#0]
;;;222      /* Reset tmpreg value */
;;;223      /* Clear F/S, DUTY and CCR[11:0] bits */
;;;224      tmpreg = 0;
000072  2600              MOVS     r6,#0
;;;225    
;;;226      /* Configure speed in standard mode */
;;;227      if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
000074  49d5              LDR      r1,|L1.972|
000076  6828              LDR      r0,[r5,#0]
000078  4288              CMP      r0,r1
00007a  d80c              BHI      |L1.150|
;;;228      {
;;;229        /* Standard mode speed calculate */
;;;230        result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
00007c  6828              LDR      r0,[r5,#0]
00007e  0040              LSLS     r0,r0,#1
000080  fbb8f0f0          UDIV     r0,r8,r0
000084  b287              UXTH     r7,r0
;;;231        /* Test if CCR value is under 0x4*/
;;;232        if (result < 0x04)
000086  2f04              CMP      r7,#4
000088  da00              BGE      |L1.140|
;;;233        {
;;;234          /* Set minimum allowed value */
;;;235          result = 0x04;  
00008a  2704              MOVS     r7,#4
                  |L1.140|
;;;236        }
;;;237        /* Set speed value for standard mode */
;;;238        tmpreg |= result;	  
00008c  433e              ORRS     r6,r6,r7
;;;239        /* Set Maximum Rise Time for standard mode */
;;;240        I2Cx->TRISE = freqrange + 1; 
00008e  f1090001          ADD      r0,r9,#1
000092  8420              STRH     r0,[r4,#0x20]
000094  e027              B        |L1.230|
                  |L1.150|
;;;241      }
;;;242      /* Configure speed in fast mode */
;;;243      else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
;;;244      {
;;;245        if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
000096  88e8              LDRH     r0,[r5,#6]
000098  f5a0413f          SUB      r1,r0,#0xbf00
00009c  39ff              SUBS     r1,r1,#0xff
00009e  d106              BNE      |L1.174|
;;;246        {
;;;247          /* Fast mode speed calculate: Tlow/Thigh = 2 */
;;;248          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
0000a0  6828              LDR      r0,[r5,#0]
0000a2  eb000040          ADD      r0,r0,r0,LSL #1
0000a6  fbb8f0f0          UDIV     r0,r8,r0
0000aa  b287              UXTH     r7,r0
0000ac  e009              B        |L1.194|
                  |L1.174|
;;;249        }
;;;250        else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
;;;251        {
;;;252          /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
;;;253          result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
0000ae  6828              LDR      r0,[r5,#0]
0000b0  eb0001c0          ADD      r1,r0,r0,LSL #3
0000b4  eb011000          ADD      r0,r1,r0,LSL #4
0000b8  fbb8f0f0          UDIV     r0,r8,r0
0000bc  b287              UXTH     r7,r0
;;;254          /* Set DUTY bit */
;;;255          result |= I2C_DutyCycle_16_9;
0000be  f4474780          ORR      r7,r7,#0x4000
                  |L1.194|
;;;256        }
;;;257    
;;;258        /* Test if CCR value is under 0x1*/
;;;259        if ((result & CCR_CCR_Set) == 0)
0000c2  0538              LSLS     r0,r7,#20
0000c4  0d00              LSRS     r0,r0,#20
0000c6  d101              BNE      |L1.204|
;;;260        {
;;;261          /* Set minimum allowed value */
;;;262          result |= (uint16_t)0x0001;  
0000c8  f0470701          ORR      r7,r7,#1
                  |L1.204|
;;;263        }
;;;264        /* Set speed value and set F/S bit for fast mode */
;;;265        tmpreg |= (uint16_t)(result | CCR_FS_Set);
0000cc  f4474000          ORR      r0,r7,#0x8000
0000d0  4306              ORRS     r6,r6,r0
;;;266        /* Set Maximum Rise Time for fast mode */
;;;267        I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
0000d2  f44f7096          MOV      r0,#0x12c
0000d6  fb09f000          MUL      r0,r9,r0
0000da  f44f717a          MOV      r1,#0x3e8
0000de  fb90f0f1          SDIV     r0,r0,r1
0000e2  1c40              ADDS     r0,r0,#1
0000e4  8420              STRH     r0,[r4,#0x20]
                  |L1.230|
;;;268      }
;;;269    
;;;270      /* Write to I2Cx CCR */
;;;271      I2Cx->CCR = tmpreg;
0000e6  83a6              STRH     r6,[r4,#0x1c]
;;;272      /* Enable the selected I2C peripheral */
;;;273      I2Cx->CR1 |= CR1_PE_Set;
0000e8  8820              LDRH     r0,[r4,#0]
0000ea  f0400001          ORR      r0,r0,#1
0000ee  8020              STRH     r0,[r4,#0]
;;;274    
;;;275    /*---------------------------- I2Cx CR1 Configuration ------------------------*/
;;;276      /* Get the I2Cx CR1 value */
;;;277      tmpreg = I2Cx->CR1;
0000f0  8826              LDRH     r6,[r4,#0]
;;;278      /* Clear ACK, SMBTYPE and  SMBUS bits */
;;;279      tmpreg &= CR1_CLEAR_Mask;
0000f2  f64f31f5          MOV      r1,#0xfbf5
0000f6  400e              ANDS     r6,r6,r1
;;;280      /* Configure I2Cx: mode and acknowledgement */
;;;281      /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
;;;282      /* Set ACK bit according to I2C_Ack value */
;;;283      tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
0000f8  88a8              LDRH     r0,[r5,#4]
0000fa  8969              LDRH     r1,[r5,#0xa]
0000fc  4308              ORRS     r0,r0,r1
0000fe  4306              ORRS     r6,r6,r0
;;;284      /* Write to I2Cx CR1 */
;;;285      I2Cx->CR1 = tmpreg;
000100  8026              STRH     r6,[r4,#0]
;;;286    
;;;287    /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
;;;288      /* Set I2Cx Own Address1 and acknowledged address */
;;;289      I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
000102  89a8              LDRH     r0,[r5,#0xc]
000104  8929              LDRH     r1,[r5,#8]
000106  4308              ORRS     r0,r0,r1
000108  8120              STRH     r0,[r4,#8]
;;;290    }
00010a  b005              ADD      sp,sp,#0x14
00010c  e8bd83f0          POP      {r4-r9,pc}
;;;291    
                          ENDP

                  I2C_StructInit PROC
;;;296      */
;;;297    void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
000110  f2413188          MOV      r1,#0x1388
;;;298    {
;;;299    /*---------------- Reset I2C init structure parameters values ----------------*/
;;;300      /* initialize the I2C_ClockSpeed member */
;;;301      I2C_InitStruct->I2C_ClockSpeed = 5000;
000114  6001              STR      r1,[r0,#0]
;;;302      /* Initialize the I2C_Mode member */
;;;303      I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
000116  2100              MOVS     r1,#0
000118  8081              STRH     r1,[r0,#4]
;;;304      /* Initialize the I2C_DutyCycle member */
;;;305      I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
00011a  f64b71ff          MOV      r1,#0xbfff
00011e  80c1              STRH     r1,[r0,#6]
;;;306      /* Initialize the I2C_OwnAddress1 member */
;;;307      I2C_InitStruct->I2C_OwnAddress1 = 0;
000120  2100              MOVS     r1,#0
000122  8101              STRH     r1,[r0,#8]
;;;308      /* Initialize the I2C_Ack member */
;;;309      I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
000124  8141              STRH     r1,[r0,#0xa]
;;;310      /* Initialize the I2C_AcknowledgedAddress member */
;;;311      I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
000126  f44f4180          MOV      r1,#0x4000
00012a  8181              STRH     r1,[r0,#0xc]
;;;312    }
00012c  4770              BX       lr
;;;313    
                          ENDP

                  I2C_Cmd PROC
;;;320      */
;;;321    void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
00012e  b121              CBZ      r1,|L1.314|
;;;322    {
;;;323      /* Check the parameters */
;;;324      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;325      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;326      if (NewState != DISABLE)
;;;327      {
;;;328        /* Enable the selected I2C peripheral */
;;;329        I2Cx->CR1 |= CR1_PE_Set;
000130  8802              LDRH     r2,[r0,#0]
000132  f0420201          ORR      r2,r2,#1
000136  8002              STRH     r2,[r0,#0]
000138  e004              B        |L1.324|
                  |L1.314|
;;;330      }
;;;331      else
;;;332      {
;;;333        /* Disable the selected I2C peripheral */
;;;334        I2Cx->CR1 &= CR1_PE_Reset;
00013a  8802              LDRH     r2,[r0,#0]
00013c  f64f73fe          MOV      r3,#0xfffe
000140  401a              ANDS     r2,r2,r3
000142  8002              STRH     r2,[r0,#0]
                  |L1.324|
;;;335      }
;;;336    }
000144  4770              BX       lr
;;;337    
                          ENDP

                  I2C_DMACmd PROC
;;;344      */
;;;345    void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000146  b121              CBZ      r1,|L1.338|
;;;346    {
;;;347      /* Check the parameters */
;;;348      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;349      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;350      if (NewState != DISABLE)
;;;351      {
;;;352        /* Enable the selected I2C DMA requests */
;;;353        I2Cx->CR2 |= CR2_DMAEN_Set;
000148  8882              LDRH     r2,[r0,#4]
00014a  f4426200          ORR      r2,r2,#0x800
00014e  8082              STRH     r2,[r0,#4]
000150  e004              B        |L1.348|
                  |L1.338|
;;;354      }
;;;355      else
;;;356      {
;;;357        /* Disable the selected I2C DMA requests */
;;;358        I2Cx->CR2 &= CR2_DMAEN_Reset;
000152  8882              LDRH     r2,[r0,#4]
000154  f24f73ff          MOV      r3,#0xf7ff
000158  401a              ANDS     r2,r2,r3
00015a  8082              STRH     r2,[r0,#4]
                  |L1.348|
;;;359      }
;;;360    }
00015c  4770              BX       lr
;;;361    
                          ENDP

                  I2C_DMALastTransferCmd PROC
;;;368      */
;;;369    void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
00015e  b121              CBZ      r1,|L1.362|
;;;370    {
;;;371      /* Check the parameters */
;;;372      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;373      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;374      if (NewState != DISABLE)
;;;375      {
;;;376        /* Next DMA transfer is the last transfer */
;;;377        I2Cx->CR2 |= CR2_LAST_Set;
000160  8882              LDRH     r2,[r0,#4]
000162  f4425280          ORR      r2,r2,#0x1000
000166  8082              STRH     r2,[r0,#4]
000168  e004              B        |L1.372|
                  |L1.362|
;;;378      }
;;;379      else
;;;380      {
;;;381        /* Next DMA transfer is not the last transfer */
;;;382        I2Cx->CR2 &= CR2_LAST_Reset;
00016a  8882              LDRH     r2,[r0,#4]
00016c  f64e73ff          MOV      r3,#0xefff
000170  401a              ANDS     r2,r2,r3
000172  8082              STRH     r2,[r0,#4]
                  |L1.372|
;;;383      }
;;;384    }
000174  4770              BX       lr
;;;385    
                          ENDP

                  I2C_GenerateSTART PROC
;;;392      */
;;;393    void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
000176  b121              CBZ      r1,|L1.386|
;;;394    {
;;;395      /* Check the parameters */
;;;396      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;397      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;398      if (NewState != DISABLE)
;;;399      {
;;;400        /* Generate a START condition */
;;;401        I2Cx->CR1 |= CR1_START_Set;
000178  8802              LDRH     r2,[r0,#0]
00017a  f4427280          ORR      r2,r2,#0x100
00017e  8002              STRH     r2,[r0,#0]
000180  e004              B        |L1.396|
                  |L1.386|
;;;402      }
;;;403      else
;;;404      {
;;;405        /* Disable the START condition generation */
;;;406        I2Cx->CR1 &= CR1_START_Reset;
000182  8802              LDRH     r2,[r0,#0]
000184  f64f63ff          MOV      r3,#0xfeff
000188  401a              ANDS     r2,r2,r3
00018a  8002              STRH     r2,[r0,#0]
                  |L1.396|
;;;407      }
;;;408    }
00018c  4770              BX       lr
;;;409    
                          ENDP

                  I2C_GenerateSTOP PROC
;;;416      */
;;;417    void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
00018e  b121              CBZ      r1,|L1.410|
;;;418    {
;;;419      /* Check the parameters */
;;;420      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;421      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;422      if (NewState != DISABLE)
;;;423      {
;;;424        /* Generate a STOP condition */
;;;425        I2Cx->CR1 |= CR1_STOP_Set;
000190  8802              LDRH     r2,[r0,#0]
000192  f4427200          ORR      r2,r2,#0x200
000196  8002              STRH     r2,[r0,#0]
000198  e004              B        |L1.420|
                  |L1.410|
;;;426      }
;;;427      else
;;;428      {
;;;429        /* Disable the STOP condition generation */
;;;430        I2Cx->CR1 &= CR1_STOP_Reset;
00019a  8802              LDRH     r2,[r0,#0]
00019c  f64f53ff          MOV      r3,#0xfdff
0001a0  401a              ANDS     r2,r2,r3
0001a2  8002              STRH     r2,[r0,#0]
                  |L1.420|
;;;431      }
;;;432    }
0001a4  4770              BX       lr
;;;433    
                          ENDP

                  I2C_AcknowledgeConfig PROC
;;;440      */
;;;441    void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
0001a6  b121              CBZ      r1,|L1.434|
;;;442    {
;;;443      /* Check the parameters */
;;;444      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;445      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;446      if (NewState != DISABLE)
;;;447      {
;;;448        /* Enable the acknowledgement */
;;;449        I2Cx->CR1 |= CR1_ACK_Set;
0001a8  8802              LDRH     r2,[r0,#0]
0001aa  f4426280          ORR      r2,r2,#0x400
0001ae  8002              STRH     r2,[r0,#0]
0001b0  e004              B        |L1.444|
                  |L1.434|
;;;450      }
;;;451      else
;;;452      {
;;;453        /* Disable the acknowledgement */
;;;454        I2Cx->CR1 &= CR1_ACK_Reset;
0001b2  8802              LDRH     r2,[r0,#0]
0001b4  f64f33ff          MOV      r3,#0xfbff
0001b8  401a              ANDS     r2,r2,r3
0001ba  8002              STRH     r2,[r0,#0]
                  |L1.444|
;;;455      }
;;;456    }
0001bc  4770              BX       lr
;;;457    
                          ENDP

                  I2C_OwnAddress2Config PROC
;;;463      */
;;;464    void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
0001be  460a              MOV      r2,r1
;;;465    {
;;;466      uint16_t tmpreg = 0;
0001c0  2100              MOVS     r1,#0
;;;467    
;;;468      /* Check the parameters */
;;;469      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;470    
;;;471      /* Get the old register value */
;;;472      tmpreg = I2Cx->OAR2;
0001c2  8981              LDRH     r1,[r0,#0xc]
;;;473    
;;;474      /* Reset I2Cx Own address2 bit [7:1] */
;;;475      tmpreg &= OAR2_ADD2_Reset;
0001c4  f64f7301          MOV      r3,#0xff01
0001c8  4019              ANDS     r1,r1,r3
;;;476    
;;;477      /* Set I2Cx Own address2 */
;;;478      tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
0001ca  f00203fe          AND      r3,r2,#0xfe
0001ce  4319              ORRS     r1,r1,r3
;;;479    
;;;480      /* Store the new register value */
;;;481      I2Cx->OAR2 = tmpreg;
0001d0  8181              STRH     r1,[r0,#0xc]
;;;482    }
0001d2  4770              BX       lr
;;;483    
                          ENDP

                  I2C_DualAddressCmd PROC
;;;490      */
;;;491    void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0001d4  b121              CBZ      r1,|L1.480|
;;;492    {
;;;493      /* Check the parameters */
;;;494      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;495      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;496      if (NewState != DISABLE)
;;;497      {
;;;498        /* Enable dual addressing mode */
;;;499        I2Cx->OAR2 |= OAR2_ENDUAL_Set;
0001d6  8982              LDRH     r2,[r0,#0xc]
0001d8  f0420201          ORR      r2,r2,#1
0001dc  8182              STRH     r2,[r0,#0xc]
0001de  e004              B        |L1.490|
                  |L1.480|
;;;500      }
;;;501      else
;;;502      {
;;;503        /* Disable dual addressing mode */
;;;504        I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
0001e0  8982              LDRH     r2,[r0,#0xc]
0001e2  f64f73fe          MOV      r3,#0xfffe
0001e6  401a              ANDS     r2,r2,r3
0001e8  8182              STRH     r2,[r0,#0xc]
                  |L1.490|
;;;505      }
;;;506    }
0001ea  4770              BX       lr
;;;507    
                          ENDP

                  I2C_GeneralCallCmd PROC
;;;514      */
;;;515    void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0001ec  b121              CBZ      r1,|L1.504|
;;;516    {
;;;517      /* Check the parameters */
;;;518      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;519      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;520      if (NewState != DISABLE)
;;;521      {
;;;522        /* Enable generall call */
;;;523        I2Cx->CR1 |= CR1_ENGC_Set;
0001ee  8802              LDRH     r2,[r0,#0]
0001f0  f0420240          ORR      r2,r2,#0x40
0001f4  8002              STRH     r2,[r0,#0]
0001f6  e004              B        |L1.514|
                  |L1.504|
;;;524      }
;;;525      else
;;;526      {
;;;527        /* Disable generall call */
;;;528        I2Cx->CR1 &= CR1_ENGC_Reset;
0001f8  8802              LDRH     r2,[r0,#0]
0001fa  f64f73bf          MOV      r3,#0xffbf
0001fe  401a              ANDS     r2,r2,r3
000200  8002              STRH     r2,[r0,#0]
                  |L1.514|
;;;529      }
;;;530    }
000202  4770              BX       lr
;;;531    
                          ENDP

                  I2C_ITConfig PROC
;;;543      */
;;;544    void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
000204  b510              PUSH     {r4,lr}
;;;545    {
;;;546      /* Check the parameters */
;;;547      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;548      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;549      assert_param(IS_I2C_CONFIG_IT(I2C_IT));
;;;550      
;;;551      if (NewState != DISABLE)
000206  b11a              CBZ      r2,|L1.528|
;;;552      {
;;;553        /* Enable the selected I2C interrupts */
;;;554        I2Cx->CR2 |= I2C_IT;
000208  8883              LDRH     r3,[r0,#4]
00020a  430b              ORRS     r3,r3,r1
00020c  8083              STRH     r3,[r0,#4]
00020e  e004              B        |L1.538|
                  |L1.528|
;;;555      }
;;;556      else
;;;557      {
;;;558        /* Disable the selected I2C interrupts */
;;;559        I2Cx->CR2 &= (uint16_t)~I2C_IT;
000210  8883              LDRH     r3,[r0,#4]
000212  43cc              MVNS     r4,r1
000214  b2a4              UXTH     r4,r4
000216  4023              ANDS     r3,r3,r4
000218  8083              STRH     r3,[r0,#4]
                  |L1.538|
;;;560      }
;;;561    }
00021a  bd10              POP      {r4,pc}
;;;562    
                          ENDP

                  I2C_SendData PROC
;;;568      */
;;;569    void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
00021c  8201              STRH     r1,[r0,#0x10]
;;;570    {
;;;571      /* Check the parameters */
;;;572      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;573      /* Write in the DR register the data to be sent */
;;;574      I2Cx->DR = Data;
;;;575    }
00021e  4770              BX       lr
;;;576    
                          ENDP

                  I2C_ReceiveData PROC
;;;581      */
;;;582    uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
000220  4601              MOV      r1,r0
;;;583    {
;;;584      /* Check the parameters */
;;;585      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;586      /* Return the data in the DR register */
;;;587      return (uint8_t)I2Cx->DR;
000222  8a08              LDRH     r0,[r1,#0x10]
000224  b2c0              UXTB     r0,r0
;;;588    }
000226  4770              BX       lr
;;;589    
                          ENDP

                  I2C_Send7bitAddress PROC
;;;599      */
;;;600    void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
000228  b112              CBZ      r2,|L1.560|
;;;601    {
;;;602      /* Check the parameters */
;;;603      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;604      assert_param(IS_I2C_DIRECTION(I2C_Direction));
;;;605      /* Test on the direction to set/reset the read/write bit */
;;;606      if (I2C_Direction != I2C_Direction_Transmitter)
;;;607      {
;;;608        /* Set the address bit0 for read */
;;;609        Address |= OAR1_ADD0_Set;
00022a  f0410101          ORR      r1,r1,#1
00022e  e002              B        |L1.566|
                  |L1.560|
;;;610      }
;;;611      else
;;;612      {
;;;613        /* Reset the address bit0 for write */
;;;614        Address &= OAR1_ADD0_Reset;
000230  f64f73fe          MOV      r3,#0xfffe
000234  4019              ANDS     r1,r1,r3
                  |L1.566|
;;;615      }
;;;616      /* Send the address */
;;;617      I2Cx->DR = Address;
000236  8201              STRH     r1,[r0,#0x10]
;;;618    }
000238  4770              BX       lr
;;;619    
                          ENDP

                  I2C_ReadRegister PROC
;;;634      */
;;;635    uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
00023a  4602              MOV      r2,r0
;;;636    {
;;;637      __IO uint32_t tmp = 0;
00023c  2300              MOVS     r3,#0
;;;638    
;;;639      /* Check the parameters */
;;;640      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;641      assert_param(IS_I2C_REGISTER(I2C_Register));
;;;642    
;;;643      tmp = (uint32_t) I2Cx;
00023e  4613              MOV      r3,r2
;;;644      tmp += I2C_Register;
000240  440b              ADD      r3,r3,r1
;;;645    
;;;646      /* Return the selected register value */
;;;647      return (*(__IO uint16_t *) tmp);
000242  8818              LDRH     r0,[r3,#0]
;;;648    }
000244  4770              BX       lr
;;;649    
                          ENDP

                  I2C_SoftwareResetCmd PROC
;;;656      */
;;;657    void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
000246  b121              CBZ      r1,|L1.594|
;;;658    {
;;;659      /* Check the parameters */
;;;660      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;661      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;662      if (NewState != DISABLE)
;;;663      {
;;;664        /* Peripheral under reset */
;;;665        I2Cx->CR1 |= CR1_SWRST_Set;
000248  8802              LDRH     r2,[r0,#0]
00024a  f4424200          ORR      r2,r2,#0x8000
00024e  8002              STRH     r2,[r0,#0]
000250  e003              B        |L1.602|
                  |L1.594|
;;;666      }
;;;667      else
;;;668      {
;;;669        /* Peripheral not under reset */
;;;670        I2Cx->CR1 &= CR1_SWRST_Reset;
000252  8802              LDRH     r2,[r0,#0]
000254  f3c2020e          UBFX     r2,r2,#0,#15
000258  8002              STRH     r2,[r0,#0]
                  |L1.602|
;;;671      }
;;;672    }
00025a  4770              BX       lr
;;;673    
                          ENDP

                  I2C_SMBusAlertConfig PROC
;;;682      */
;;;683    void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
00025c  f5b15f00          CMP      r1,#0x2000
;;;684    {
;;;685      /* Check the parameters */
;;;686      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;687      assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
;;;688      if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
000260  d104              BNE      |L1.620|
;;;689      {
;;;690        /* Drive the SMBusAlert pin Low */
;;;691        I2Cx->CR1 |= I2C_SMBusAlert_Low;
000262  8802              LDRH     r2,[r0,#0]
000264  f4425200          ORR      r2,r2,#0x2000
000268  8002              STRH     r2,[r0,#0]
00026a  e004              B        |L1.630|
                  |L1.620|
;;;692      }
;;;693      else
;;;694      {
;;;695        /* Drive the SMBusAlert pin High  */
;;;696        I2Cx->CR1 &= I2C_SMBusAlert_High;
00026c  8802              LDRH     r2,[r0,#0]
00026e  f64d73ff          MOV      r3,#0xdfff
000272  401a              ANDS     r2,r2,r3
000274  8002              STRH     r2,[r0,#0]
                  |L1.630|
;;;697      }
;;;698    }
000276  4770              BX       lr
;;;699    
                          ENDP

                  I2C_TransmitPEC PROC
;;;706      */
;;;707    void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
000278  b121              CBZ      r1,|L1.644|
;;;708    {
;;;709      /* Check the parameters */
;;;710      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;711      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;712      if (NewState != DISABLE)
;;;713      {
;;;714        /* Enable the selected I2C PEC transmission */
;;;715        I2Cx->CR1 |= CR1_PEC_Set;
00027a  8802              LDRH     r2,[r0,#0]
00027c  f4425280          ORR      r2,r2,#0x1000
000280  8002              STRH     r2,[r0,#0]
000282  e004              B        |L1.654|
                  |L1.644|
;;;716      }
;;;717      else
;;;718      {
;;;719        /* Disable the selected I2C PEC transmission */
;;;720        I2Cx->CR1 &= CR1_PEC_Reset;
000284  8802              LDRH     r2,[r0,#0]
000286  f64e73ff          MOV      r3,#0xefff
00028a  401a              ANDS     r2,r2,r3
00028c  8002              STRH     r2,[r0,#0]
                  |L1.654|
;;;721      }
;;;722    }
00028e  4770              BX       lr
;;;723    
                          ENDP

                  I2C_PECPositionConfig PROC
;;;732      */
;;;733    void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
000290  f5b16f00          CMP      r1,#0x800
;;;734    {
;;;735      /* Check the parameters */
;;;736      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;737      assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
;;;738      if (I2C_PECPosition == I2C_PECPosition_Next)
000294  d104              BNE      |L1.672|
;;;739      {
;;;740        /* Next byte in shift register is PEC */
;;;741        I2Cx->CR1 |= I2C_PECPosition_Next;
000296  8802              LDRH     r2,[r0,#0]
000298  f4426200          ORR      r2,r2,#0x800
00029c  8002              STRH     r2,[r0,#0]
00029e  e004              B        |L1.682|
                  |L1.672|
;;;742      }
;;;743      else
;;;744      {
;;;745        /* Current byte in shift register is PEC */
;;;746        I2Cx->CR1 &= I2C_PECPosition_Current;
0002a0  8802              LDRH     r2,[r0,#0]
0002a2  f24f73ff          MOV      r3,#0xf7ff
0002a6  401a              ANDS     r2,r2,r3
0002a8  8002              STRH     r2,[r0,#0]
                  |L1.682|
;;;747      }
;;;748    }
0002aa  4770              BX       lr
;;;749    
                          ENDP

                  I2C_CalculatePEC PROC
;;;756      */
;;;757    void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
0002ac  b121              CBZ      r1,|L1.696|
;;;758    {
;;;759      /* Check the parameters */
;;;760      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;761      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;762      if (NewState != DISABLE)
;;;763      {
;;;764        /* Enable the selected I2C PEC calculation */
;;;765        I2Cx->CR1 |= CR1_ENPEC_Set;
0002ae  8802              LDRH     r2,[r0,#0]
0002b0  f0420220          ORR      r2,r2,#0x20
0002b4  8002              STRH     r2,[r0,#0]
0002b6  e004              B        |L1.706|
                  |L1.696|
;;;766      }
;;;767      else
;;;768      {
;;;769        /* Disable the selected I2C PEC calculation */
;;;770        I2Cx->CR1 &= CR1_ENPEC_Reset;
0002b8  8802              LDRH     r2,[r0,#0]
0002ba  f64f73df          MOV      r3,#0xffdf
0002be  401a              ANDS     r2,r2,r3
0002c0  8002              STRH     r2,[r0,#0]
                  |L1.706|
;;;771      }
;;;772    }
0002c2  4770              BX       lr
;;;773    
                          ENDP

                  I2C_GetPEC PROC
;;;778      */
;;;779    uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
0002c4  4601              MOV      r1,r0
;;;780    {
;;;781      /* Check the parameters */
;;;782      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;783      /* Return the selected I2C PEC value */
;;;784      return ((I2Cx->SR2) >> 8);
0002c6  8b08              LDRH     r0,[r1,#0x18]
0002c8  1200              ASRS     r0,r0,#8
;;;785    }
0002ca  4770              BX       lr
;;;786    
                          ENDP

                  I2C_ARPCmd PROC
;;;793      */
;;;794    void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0002cc  b121              CBZ      r1,|L1.728|
;;;795    {
;;;796      /* Check the parameters */
;;;797      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;798      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;799      if (NewState != DISABLE)
;;;800      {
;;;801        /* Enable the selected I2C ARP */
;;;802        I2Cx->CR1 |= CR1_ENARP_Set;
0002ce  8802              LDRH     r2,[r0,#0]
0002d0  f0420210          ORR      r2,r2,#0x10
0002d4  8002              STRH     r2,[r0,#0]
0002d6  e004              B        |L1.738|
                  |L1.728|
;;;803      }
;;;804      else
;;;805      {
;;;806        /* Disable the selected I2C ARP */
;;;807        I2Cx->CR1 &= CR1_ENARP_Reset;
0002d8  8802              LDRH     r2,[r0,#0]
0002da  f64f73ef          MOV      r3,#0xffef
0002de  401a              ANDS     r2,r2,r3
0002e0  8002              STRH     r2,[r0,#0]
                  |L1.738|
;;;808      }
;;;809    }
0002e2  4770              BX       lr
;;;810    
                          ENDP

                  I2C_StretchClockCmd PROC
;;;817      */
;;;818    void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
0002e4  b921              CBNZ     r1,|L1.752|
;;;819    {
;;;820      /* Check the parameters */
;;;821      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;822      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;823      if (NewState == DISABLE)
;;;824      {
;;;825        /* Enable the selected I2C Clock stretching */
;;;826        I2Cx->CR1 |= CR1_NOSTRETCH_Set;
0002e6  8802              LDRH     r2,[r0,#0]
0002e8  f0420280          ORR      r2,r2,#0x80
0002ec  8002              STRH     r2,[r0,#0]
0002ee  e004              B        |L1.762|
                  |L1.752|
;;;827      }
;;;828      else
;;;829      {
;;;830        /* Disable the selected I2C Clock stretching */
;;;831        I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
0002f0  8802              LDRH     r2,[r0,#0]
0002f2  f64f737f          MOV      r3,#0xff7f
0002f6  401a              ANDS     r2,r2,r3
0002f8  8002              STRH     r2,[r0,#0]
                  |L1.762|
;;;832      }
;;;833    }
0002fa  4770              BX       lr
;;;834    
                          ENDP

                  I2C_FastModeDutyCycleConfig PROC
;;;843      */
;;;844    void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
0002fc  f5b14f80          CMP      r1,#0x4000
;;;845    {
;;;846      /* Check the parameters */
;;;847      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;848      assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
;;;849      if (I2C_DutyCycle != I2C_DutyCycle_16_9)
000300  d005              BEQ      |L1.782|
;;;850      {
;;;851        /* I2C fast mode Tlow/Thigh=2 */
;;;852        I2Cx->CCR &= I2C_DutyCycle_2;
000302  8b82              LDRH     r2,[r0,#0x1c]
000304  f64b73ff          MOV      r3,#0xbfff
000308  401a              ANDS     r2,r2,r3
00030a  8382              STRH     r2,[r0,#0x1c]
00030c  e003              B        |L1.790|
                  |L1.782|
;;;853      }
;;;854      else
;;;855      {
;;;856        /* I2C fast mode Tlow/Thigh=16/9 */
;;;857        I2Cx->CCR |= I2C_DutyCycle_16_9;
00030e  8b82              LDRH     r2,[r0,#0x1c]
000310  f4424280          ORR      r2,r2,#0x4000
000314  8382              STRH     r2,[r0,#0x1c]
                  |L1.790|
;;;858      }
;;;859    }
000316  4770              BX       lr
;;;860    
                          ENDP

                  I2C_GetLastEvent PROC
;;;865      */
;;;866    uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
000318  b510              PUSH     {r4,lr}
;;;867    {
00031a  4601              MOV      r1,r0
;;;868      uint32_t lastevent = 0;
00031c  2000              MOVS     r0,#0
;;;869      uint32_t flag1 = 0, flag2 = 0;
00031e  2300              MOVS     r3,#0
000320  2200              MOVS     r2,#0
;;;870      /* Check the parameters */
;;;871      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;872      /* Read the I2Cx status register */
;;;873      flag1 = I2Cx->SR1;
000322  8a8b              LDRH     r3,[r1,#0x14]
;;;874      flag2 = I2Cx->SR2;
000324  8b0a              LDRH     r2,[r1,#0x18]
;;;875      flag2 = flag2 << 16;
000326  0412              LSLS     r2,r2,#16
;;;876      /* Get the last event value from I2C status register */
;;;877      lastevent = (flag1 | flag2) & FLAG_Mask;
000328  ea430402          ORR      r4,r3,r2
00032c  f024407f          BIC      r0,r4,#0xff000000
;;;878      /* Return status */
;;;879      return lastevent;
;;;880    }
000330  bd10              POP      {r4,pc}
;;;881    
                          ENDP

                  I2C_CheckEvent PROC
;;;901      */
;;;902    ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
000332  b570              PUSH     {r4-r6,lr}
;;;903    {
000334  4602              MOV      r2,r0
;;;904      uint32_t lastevent = 0;
000336  2400              MOVS     r4,#0
;;;905      uint32_t flag1 = 0, flag2 = 0;
000338  2500              MOVS     r5,#0
00033a  2300              MOVS     r3,#0
;;;906      ErrorStatus status = ERROR;
00033c  2000              MOVS     r0,#0
;;;907      /* Check the parameters */
;;;908      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;909      assert_param(IS_I2C_EVENT(I2C_EVENT));
;;;910      /* Read the I2Cx status register */
;;;911      flag1 = I2Cx->SR1;
00033e  8a95              LDRH     r5,[r2,#0x14]
;;;912      flag2 = I2Cx->SR2;
000340  8b13              LDRH     r3,[r2,#0x18]
;;;913      flag2 = flag2 << 16;
000342  041b              LSLS     r3,r3,#16
;;;914      /* Get the last event value from I2C status register */
;;;915      lastevent = (flag1 | flag2) & FLAG_Mask;
000344  ea450603          ORR      r6,r5,r3
000348  f026447f          BIC      r4,r6,#0xff000000
;;;916      /* Check whether the last event is equal to I2C_EVENT */
;;;917      if (lastevent == I2C_EVENT )
00034c  428c              CMP      r4,r1
00034e  d101              BNE      |L1.852|
;;;918      {
;;;919        /* SUCCESS: last event is equal to I2C_EVENT */
;;;920        status = SUCCESS;
000350  2001              MOVS     r0,#1
000352  e000              B        |L1.854|
                  |L1.852|
;;;921      }
;;;922      else
;;;923      {
;;;924        /* ERROR: last event is different from I2C_EVENT */
;;;925        status = ERROR;
000354  2000              MOVS     r0,#0
                  |L1.854|
;;;926      }
;;;927      /* Return status */
;;;928      return status;
;;;929    }
000356  bd70              POP      {r4-r6,pc}
;;;930    
                          ENDP

                  I2C_GetFlagStatus PROC
;;;959      */
;;;960    FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
000358  b530              PUSH     {r4,r5,lr}
;;;961    {
00035a  4603              MOV      r3,r0
;;;962      FlagStatus bitstatus = RESET;
00035c  2000              MOVS     r0,#0
;;;963      __IO uint32_t i2creg = 0, i2cxbase = 0;
00035e  2400              MOVS     r4,#0
000360  2200              MOVS     r2,#0
;;;964    
;;;965      /* Check the parameters */
;;;966      assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;967      assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
;;;968    
;;;969      /* Get the I2Cx peripheral base address */
;;;970      i2cxbase = (uint32_t)I2Cx;
000362  461a              MOV      r2,r3
;;;971      
;;;972      /* Read flag register index */
;;;973      i2creg = I2C_FLAG >> 28;
000364  0f0c              LSRS     r4,r1,#28
;;;974      
;;;975      /* Get bit[23:0] of the flag */
;;;976      I2C_FLAG &= FLAG_Mask;
000366  f021417f          BIC      r1,r1,#0xff000000
;;;977      
;;;978      if(i2creg != 0)
00036a  b10c              CBZ      r4,|L1.880|
;;;979      {
;;;980        /* Get the I2Cx SR1 register address */
;;;981        i2cxbase += 0x14;
00036c  3214              ADDS     r2,r2,#0x14
00036e  e001              B        |L1.884|
                  |L1.880|
;;;982      }
;;;983      else
;;;984      {
;;;985        /* Flag in I2Cx SR2 Register */
;;;986        I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
000370  0c09              LSRS     r1,r1,#16
;;;987        /* Get the I2Cx SR2 register address */
;;;988        i2cxbase += 0x18;
000372  3218              ADDS     r2,r2,#0x18
                  |L1.884|
;;;989      }
;;;990      
;;;991      if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
000374  6815              LDR      r5,[r2,#0]
000376  420d              TST      r5,r1
000378  d001              BEQ      |L1.894|
;;;992      {
;;;993        /* I2C_FLAG is set */
;;;994        bitstatus = SET;
00037a  2001              MOVS     r0,#1
00037c  e000              B        |L1.896|
                  |L1.894|
;;;995      }
;;;996      else
;;;997      {
;;;998        /* I2C_FLAG is reset */
;;;999        bitstatus = RESET;
00037e  2000              MOVS     r0,#0
                  |L1.896|
;;;1000     }
;;;1001     
;;;1002     /* Return the I2C_FLAG status */
;;;1003     return  bitstatus;
;;;1004   }
000380  bd30              POP      {r4,r5,pc}
;;;1005   
                          ENDP

                  I2C_ClearFlag PROC
;;;1036     */
;;;1037   void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
000382  2200              MOVS     r2,#0
;;;1038   {
;;;1039     uint32_t flagpos = 0;
;;;1040     /* Check the parameters */
;;;1041     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1042     assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
;;;1043     /* Get the I2C flag position */
;;;1044     flagpos = I2C_FLAG & FLAG_Mask;
000384  f021427f          BIC      r2,r1,#0xff000000
;;;1045     /* Clear the selected I2C flag */
;;;1046     I2Cx->SR1 = (uint16_t)~flagpos;
000388  43d3              MVNS     r3,r2
00038a  8283              STRH     r3,[r0,#0x14]
;;;1047   }
00038c  4770              BX       lr
;;;1048   
                          ENDP

                  I2C_GetITStatus PROC
;;;1070     */
;;;1071   ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
00038e  b530              PUSH     {r4,r5,lr}
;;;1072   {
000390  4602              MOV      r2,r0
;;;1073     ITStatus bitstatus = RESET;
000392  2000              MOVS     r0,#0
;;;1074     uint32_t enablestatus = 0;
000394  2300              MOVS     r3,#0
;;;1075     /* Check the parameters */
;;;1076     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1077     assert_param(IS_I2C_GET_IT(I2C_IT));
;;;1078     /* Check if the interrupt source is enabled or not */
;;;1079     enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;  
000396  8894              LDRH     r4,[r2,#4]
000398  f00165e0          AND      r5,r1,#0x7000000
00039c  ea044315          AND      r3,r4,r5,LSR #16
;;;1080     /* Get bit[23:0] of the flag */
;;;1081     I2C_IT &= FLAG_Mask;
0003a0  f021417f          BIC      r1,r1,#0xff000000
;;;1082     /* Check the status of the specified I2C flag */
;;;1083     if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
0003a4  8a94              LDRH     r4,[r2,#0x14]
0003a6  420c              TST      r4,r1
0003a8  d002              BEQ      |L1.944|
0003aa  b10b              CBZ      r3,|L1.944|
;;;1084     {
;;;1085       /* I2C_IT is set */
;;;1086       bitstatus = SET;
0003ac  2001              MOVS     r0,#1
0003ae  e000              B        |L1.946|
                  |L1.944|
;;;1087     }
;;;1088     else
;;;1089     {
;;;1090       /* I2C_IT is reset */
;;;1091       bitstatus = RESET;
0003b0  2000              MOVS     r0,#0
                  |L1.946|
;;;1092     }
;;;1093     /* Return the I2C_IT status */
;;;1094     return  bitstatus;
;;;1095   }
0003b2  bd30              POP      {r4,r5,pc}
;;;1096   
                          ENDP

                  I2C_ClearITPendingBit PROC
;;;1127     */
;;;1128   void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
0003b4  2200              MOVS     r2,#0
;;;1129   {
;;;1130     uint32_t flagpos = 0;
;;;1131     /* Check the parameters */
;;;1132     assert_param(IS_I2C_ALL_PERIPH(I2Cx));
;;;1133     assert_param(IS_I2C_CLEAR_IT(I2C_IT));
;;;1134     /* Get the I2C flag position */
;;;1135     flagpos = I2C_IT & FLAG_Mask;
0003b6  f021427f          BIC      r2,r1,#0xff000000
;;;1136     /* Clear the selected I2C flag */
;;;1137     I2Cx->SR1 = (uint16_t)~flagpos;
0003ba  43d3              MVNS     r3,r2
0003bc  8283              STRH     r3,[r0,#0x14]
;;;1138   }
0003be  4770              BX       lr
;;;1139   
                          ENDP

                  |L1.960|
                          DCD      0x40005400
                  |L1.964|
                          DCD      0x007a1200
                  |L1.968|
                          DCD      0x000f4240
                  |L1.972|
                          DCD      0x000186a0
