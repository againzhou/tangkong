; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\os_cpu_c.o --depend=.\exe\os_cpu_c.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\os_cpu_c.crf ..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView\os_cpu_c.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSInitHookBegin PROC
;;;69     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;70     void  OSInitHookBegin (void)
000000  4770              BX       lr
;;;71     {
;;;72     #if OS_TMR_EN > 0
;;;73         OSTmrCtr = 0;
;;;74     #endif
;;;75     }
;;;76     #endif
                          ENDP

                  OSInitHookEnd PROC
;;;90     #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;91     void  OSInitHookEnd (void)
000002  4770              BX       lr
;;;92     {
;;;93     }
;;;94     #endif
                          ENDP

                  OSTaskCreateHook PROC
;;;107    #if OS_CPU_HOOKS_EN > 0
;;;108    void  OSTaskCreateHook (OS_TCB *ptcb)
000004  b510              PUSH     {r4,lr}
;;;109    {
000006  4604              MOV      r4,r0
;;;110    #if OS_APP_HOOKS_EN > 0
;;;111        App_TaskCreateHook(ptcb);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       App_TaskCreateHook
;;;112    #else
;;;113        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;114    #endif
;;;115    }
00000e  bd10              POP      {r4,pc}
;;;116    #endif
                          ENDP

                  OSTaskDelHook PROC
;;;130    #if OS_CPU_HOOKS_EN > 0
;;;131    void  OSTaskDelHook (OS_TCB *ptcb)
000010  b510              PUSH     {r4,lr}
;;;132    {
000012  4604              MOV      r4,r0
;;;133    #if OS_APP_HOOKS_EN > 0
;;;134        App_TaskDelHook(ptcb);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       App_TaskDelHook
;;;135    #else
;;;136        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;137    #endif
;;;138    }
00001a  bd10              POP      {r4,pc}
;;;139    #endif
                          ENDP

                  OSTaskIdleHook PROC
;;;153    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
;;;154    void  OSTaskIdleHook (void)
00001c  b510              PUSH     {r4,lr}
;;;155    {
;;;156    #if OS_APP_HOOKS_EN > 0
;;;157        App_TaskIdleHook();
00001e  f7fffffe          BL       App_TaskIdleHook
;;;158    #endif
;;;159    }
000022  bd10              POP      {r4,pc}
;;;160    #endif
                          ENDP

                  OSTaskStatHook PROC
;;;173    #if OS_CPU_HOOKS_EN > 0
;;;174    void  OSTaskStatHook (void)
000024  b510              PUSH     {r4,lr}
;;;175    {
;;;176    #if OS_APP_HOOKS_EN > 0
;;;177        App_TaskStatHook();
000026  f7fffffe          BL       App_TaskStatHook
;;;178    #endif
;;;179    }
00002a  bd10              POP      {r4,pc}
;;;180    #endif
                          ENDP

                  OSTaskStkInit PROC
;;;210    
;;;211    OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
00002c  b570              PUSH     {r4-r6,lr}
;;;212    {
00002e  4604              MOV      r4,r0
;;;213        OS_STK *stk;
;;;214    
;;;215    
;;;216        (void)opt;                                   /* 'opt' is not used, prevent warning                 */
;;;217        stk       = ptos;                            /* Load stack pointer                                 */
000030  4610              MOV      r0,r2
;;;218    
;;;219                                                     /* Registers stacked as if auto-saved on exception    */
;;;220        *(stk)    = (INT32U)0x01000000L;             /* xPSR                                               */
000032  f04f7580          MOV      r5,#0x1000000
000036  6005              STR      r5,[r0,#0]
;;;221        *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
000038  1f05              SUBS     r5,r0,#4
00003a  4628              MOV      r0,r5
00003c  602c              STR      r4,[r5,#0]
;;;222        *(--stk)  = (INT32U)0xFFFFFFFEL;             /* R14 (LR) (init value will cause fault if ever used)*/
00003e  f06f0601          MVN      r6,#1
000042  1f05              SUBS     r5,r0,#4
000044  4628              MOV      r0,r5
000046  602e              STR      r6,[r5,#0]
;;;223        *(--stk)  = (INT32U)0x12121212L;             /* R12                                                */
000048  f04f3612          MOV      r6,#0x12121212
00004c  1f05              SUBS     r5,r0,#4
00004e  4628              MOV      r0,r5
000050  602e              STR      r6,[r5,#0]
;;;224        *(--stk)  = (INT32U)0x03030303L;             /* R3                                                 */
000052  f04f3603          MOV      r6,#0x3030303
000056  1f05              SUBS     r5,r0,#4
000058  4628              MOV      r0,r5
00005a  602e              STR      r6,[r5,#0]
;;;225        *(--stk)  = (INT32U)0x02020202L;             /* R2                                                 */
00005c  f04f3602          MOV      r6,#0x2020202
000060  1f05              SUBS     r5,r0,#4
000062  4628              MOV      r0,r5
000064  602e              STR      r6,[r5,#0]
;;;226        *(--stk)  = (INT32U)0x01010101L;             /* R1                                                 */
000066  1076              ASRS     r6,r6,#1
000068  1f05              SUBS     r5,r0,#4
00006a  4628              MOV      r0,r5
00006c  602e              STR      r6,[r5,#0]
;;;227        *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
00006e  1f05              SUBS     r5,r0,#4
000070  4628              MOV      r0,r5
000072  6029              STR      r1,[r5,#0]
;;;228    
;;;229                                                     /* Remaining registers saved on process stack         */
;;;230        *(--stk)  = (INT32U)0x11111111L;             /* R11                                                */
000074  f04f3611          MOV      r6,#0x11111111
000078  1f05              SUBS     r5,r0,#4
00007a  4628              MOV      r0,r5
00007c  602e              STR      r6,[r5,#0]
;;;231        *(--stk)  = (INT32U)0x10101010L;             /* R10                                                */
00007e  f04f3610          MOV      r6,#0x10101010
000082  1f05              SUBS     r5,r0,#4
000084  4628              MOV      r0,r5
000086  602e              STR      r6,[r5,#0]
;;;232        *(--stk)  = (INT32U)0x09090909L;             /* R9                                                 */
000088  f04f3609          MOV      r6,#0x9090909
00008c  1f05              SUBS     r5,r0,#4
00008e  4628              MOV      r0,r5
000090  602e              STR      r6,[r5,#0]
;;;233        *(--stk)  = (INT32U)0x08080808L;             /* R8                                                 */
000092  f04f3608          MOV      r6,#0x8080808
000096  1f05              SUBS     r5,r0,#4
000098  4628              MOV      r0,r5
00009a  602e              STR      r6,[r5,#0]
;;;234        *(--stk)  = (INT32U)0x07070707L;             /* R7                                                 */
00009c  f04f3607          MOV      r6,#0x7070707
0000a0  1f05              SUBS     r5,r0,#4
0000a2  4628              MOV      r0,r5
0000a4  602e              STR      r6,[r5,#0]
;;;235        *(--stk)  = (INT32U)0x06060606L;             /* R6                                                 */
0000a6  f04f3606          MOV      r6,#0x6060606
0000aa  1f05              SUBS     r5,r0,#4
0000ac  4628              MOV      r0,r5
0000ae  602e              STR      r6,[r5,#0]
;;;236        *(--stk)  = (INT32U)0x05050505L;             /* R5                                                 */
0000b0  f04f3605          MOV      r6,#0x5050505
0000b4  1f05              SUBS     r5,r0,#4
0000b6  4628              MOV      r0,r5
0000b8  602e              STR      r6,[r5,#0]
;;;237        *(--stk)  = (INT32U)0x04040404L;             /* R4                                                 */
0000ba  f04f3604          MOV      r6,#0x4040404
0000be  1f05              SUBS     r5,r0,#4
0000c0  4628              MOV      r0,r5
0000c2  602e              STR      r6,[r5,#0]
;;;238    
;;;239        return (stk);
;;;240    }
0000c4  bd70              POP      {r4-r6,pc}
;;;241    
                          ENDP

                  OSTaskSwHook PROC
;;;257    #if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
;;;258    void  OSTaskSwHook (void)
0000c6  b510              PUSH     {r4,lr}
;;;259    {
;;;260    #if OS_APP_HOOKS_EN > 0
;;;261        App_TaskSwHook();
0000c8  f7fffffe          BL       App_TaskSwHook
;;;262    #endif
;;;263    }
0000cc  bd10              POP      {r4,pc}
;;;264    #endif
                          ENDP

                  OSTCBInitHook PROC
;;;277    #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
;;;278    void  OSTCBInitHook (OS_TCB *ptcb)
0000ce  b510              PUSH     {r4,lr}
;;;279    {
0000d0  4604              MOV      r4,r0
;;;280    #if OS_APP_HOOKS_EN > 0
;;;281        App_TCBInitHook(ptcb);
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       App_TCBInitHook
;;;282    #else
;;;283        (void)ptcb;                                  /* Prevent compiler warning                           */
;;;284    #endif
;;;285    }
0000d8  bd10              POP      {r4,pc}
;;;286    #endif
                          ENDP

                  OSTimeTickHook PROC
;;;300    #if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
;;;301    void  OSTimeTickHook (void)
0000da  b510              PUSH     {r4,lr}
;;;302    {
;;;303    #if OS_APP_HOOKS_EN > 0
;;;304        App_TimeTickHook();
0000dc  f7fffffe          BL       App_TimeTickHook
;;;305    #endif
;;;306    
;;;307    #if OS_TMR_EN > 0
;;;308        OSTmrCtr++;
;;;309        if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
;;;310            OSTmrCtr = 0;
;;;311            OSTmrSignal();
;;;312        }
;;;313    #endif
;;;314    }
0000e0  bd10              POP      {r4,pc}
;;;315    #endif
                          ENDP

                  OS_CPU_SysTickHandler PROC
;;;331    
;;;332    void  OS_CPU_SysTickHandler (void)
0000e2  b510              PUSH     {r4,lr}
;;;333    {
;;;334        OS_CPU_SR  cpu_sr;
;;;335    
;;;336    
;;;337        OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
0000e4  f7fffffe          BL       OS_CPU_SR_Save
0000e8  4604              MOV      r4,r0
;;;338        OSIntNesting++;
0000ea  481a              LDR      r0,|L1.340|
0000ec  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
0000ee  1c40              ADDS     r0,r0,#1
0000f0  4918              LDR      r1,|L1.340|
0000f2  7008              STRB     r0,[r1,#0]
;;;339        OS_EXIT_CRITICAL();
0000f4  4620              MOV      r0,r4
0000f6  f7fffffe          BL       OS_CPU_SR_Restore
;;;340    
;;;341        OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
0000fa  f7fffffe          BL       OSTimeTick
;;;342    
;;;343        OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
0000fe  f7fffffe          BL       OSIntExit
;;;344    }
000102  bd10              POP      {r4,pc}
;;;345    
                          ENDP

                  OS_CPU_SysTickInit PROC
;;;358    
;;;359    void  OS_CPU_SysTickInit (void)
000104  4914              LDR      r1,|L1.344|
;;;360    {
;;;361    ////-----------------------------  cy  091120  modify  -------------------------
;;;362    //    INT32U  cnts;
;;;363    //
;;;364    //
;;;365    //    cnts = OS_CPU_SysTickClkFreq() / OS_TICKS_PER_SEC;
;;;366    //
;;;367    //    OS_CPU_CM3_NVIC_ST_RELOAD = (cnts - 1);
;;;368    //                                                 /* Enable timer.                                     */
;;;369    //    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
;;;370    //                                                 /* Enable timer interrupt.                           */
;;;371    //    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
;;;372        
;;;373        SysTick_Config(SystemFrequency_AHBClk / OS_TICKS_PER_SEC);
000106  6809              LDR      r1,[r1,#0]  ; SystemFrequency_AHBClk
000108  f44f727a          MOV      r2,#0x3e8
00010c  fbb1f0f2          UDIV     r0,r1,r2
000110  f1b07f80          CMP      r0,#0x1000000
000114  d300              BCC      |L1.280|
000116  e01c              B        |L1.338|
                  |L1.280|
000118  f020417f          BIC      r1,r0,#0xff000000
00011c  1e49              SUBS     r1,r1,#1
00011e  f04f22e0          MOV      r2,#0xe000e000
000122  6151              STR      r1,[r2,#0x14]
000124  bf00              NOP      
000126  1751              ASRS     r1,r2,#29
000128  2900              CMP      r1,#0
00012a  da05              BGE      |L1.312|
00012c  210f              MOVS     r1,#0xf
00012e  0109              LSLS     r1,r1,#4
000130  4a0a              LDR      r2,|L1.348|
000132  230b              MOVS     r3,#0xb
000134  54d1              STRB     r1,[r2,r3]
000136  e004              B        |L1.322|
                  |L1.312|
000138  210f              MOVS     r1,#0xf
00013a  0109              LSLS     r1,r1,#4
00013c  4a08              LDR      r2,|L1.352|
00013e  1753              ASRS     r3,r2,#29
000140  54d1              STRB     r1,[r2,r3]
                  |L1.322|
000142  bf00              NOP      
000144  2100              MOVS     r1,#0
000146  f04f22e0          MOV      r2,#0xe000e000
00014a  6191              STR      r1,[r2,#0x18]
00014c  2107              MOVS     r1,#7
00014e  6111              STR      r1,[r2,#0x10]
000150  bf00              NOP      
                  |L1.338|
;;;374    ////-----------------------------  cy  091120  modify  -------------------------
;;;375    }
000152  4770              BX       lr
                          ENDP

                  |L1.340|
                          DCD      OSIntNesting
                  |L1.344|
                          DCD      SystemFrequency_AHBClk
                  |L1.348|
                          DCD      0xe000ed18
                  |L1.352|
                          DCD      0xe000e400
