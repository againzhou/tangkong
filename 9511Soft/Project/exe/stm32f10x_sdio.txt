; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_sdio.o --depend=.\exe\stm32f10x_sdio.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_sdio.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_sdio.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SDIO_DeInit PROC
;;;159      */
;;;160    void SDIO_DeInit(void)
000000  2000              MOVS     r0,#0
;;;161    {
;;;162      SDIO->POWER = 0x00000000;
000002  4968              LDR      r1,|L1.420|
000004  6008              STR      r0,[r1,#0]
;;;163      SDIO->CLKCR = 0x00000000;
000006  6048              STR      r0,[r1,#4]
;;;164      SDIO->ARG = 0x00000000;
000008  6088              STR      r0,[r1,#8]
;;;165      SDIO->CMD = 0x00000000;
00000a  60c8              STR      r0,[r1,#0xc]
;;;166      SDIO->DTIMER = 0x00000000;
00000c  6248              STR      r0,[r1,#0x24]
;;;167      SDIO->DLEN = 0x00000000;
00000e  6288              STR      r0,[r1,#0x28]
;;;168      SDIO->DCTRL = 0x00000000;
000010  62c8              STR      r0,[r1,#0x2c]
;;;169      SDIO->ICR = 0x00C007FF;
000012  4865              LDR      r0,|L1.424|
000014  6388              STR      r0,[r1,#0x38]
;;;170      SDIO->MASK = 0x00000000;
000016  2000              MOVS     r0,#0
000018  63c8              STR      r0,[r1,#0x3c]
;;;171    }
00001a  4770              BX       lr
;;;172    
                          ENDP

                  SDIO_Init PROC
;;;179      */
;;;180    void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
00001c  2100              MOVS     r1,#0
;;;181    {
;;;182      uint32_t tmpreg = 0;
;;;183        
;;;184      /* Check the parameters */
;;;185      assert_param(IS_SDIO_CLOCK_EDGE(SDIO_InitStruct->SDIO_ClockEdge));
;;;186      assert_param(IS_SDIO_CLOCK_BYPASS(SDIO_InitStruct->SDIO_ClockBypass));
;;;187      assert_param(IS_SDIO_CLOCK_POWER_SAVE(SDIO_InitStruct->SDIO_ClockPowerSave));
;;;188      assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
;;;189      assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
;;;190       
;;;191    /*---------------------------- SDIO CLKCR Configuration ------------------------*/  
;;;192      /* Get the SDIO CLKCR value */
;;;193      tmpreg = SDIO->CLKCR;
00001e  4a61              LDR      r2,|L1.420|
000020  6851              LDR      r1,[r2,#4]
;;;194      
;;;195      /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
;;;196      tmpreg &= CLKCR_CLEAR_MASK;
000022  f64762ff          MOV      r2,#0x7eff
000026  4391              BICS     r1,r1,r2
;;;197      
;;;198      /* Set CLKDIV bits according to SDIO_ClockDiv value */
;;;199      /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
;;;200      /* Set BYPASS bit according to SDIO_ClockBypass value */
;;;201      /* Set WIDBUS bits according to SDIO_BusWide value */
;;;202      /* Set NEGEDGE bits according to SDIO_ClockEdge value */
;;;203      /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
;;;204      tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
000028  7d02              LDRB     r2,[r0,#0x14]
00002a  6883              LDR      r3,[r0,#8]
00002c  431a              ORRS     r2,r2,r3
00002e  6843              LDR      r3,[r0,#4]
000030  431a              ORRS     r2,r2,r3
000032  68c3              LDR      r3,[r0,#0xc]
000034  431a              ORRS     r2,r2,r3
000036  6803              LDR      r3,[r0,#0]
000038  431a              ORRS     r2,r2,r3
00003a  6903              LDR      r3,[r0,#0x10]
00003c  431a              ORRS     r2,r2,r3
00003e  4311              ORRS     r1,r1,r2
;;;205                 SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
;;;206                 SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
;;;207      
;;;208      /* Write to SDIO CLKCR */
;;;209      SDIO->CLKCR = tmpreg;
000040  4a58              LDR      r2,|L1.420|
000042  6051              STR      r1,[r2,#4]
;;;210    }
000044  4770              BX       lr
;;;211    
                          ENDP

                  SDIO_StructInit PROC
;;;217      */
;;;218    void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
000046  2100              MOVS     r1,#0
;;;219    {
;;;220      /* SDIO_InitStruct members default value */
;;;221      SDIO_InitStruct->SDIO_ClockDiv = 0x00;
000048  7501              STRB     r1,[r0,#0x14]
;;;222      SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
00004a  6001              STR      r1,[r0,#0]
;;;223      SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
00004c  6041              STR      r1,[r0,#4]
;;;224      SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00004e  6081              STR      r1,[r0,#8]
;;;225      SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
000050  60c1              STR      r1,[r0,#0xc]
;;;226      SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
000052  6101              STR      r1,[r0,#0x10]
;;;227    }
000054  4770              BX       lr
;;;228    
                          ENDP

                  SDIO_ClockCmd PROC
;;;233      */
;;;234    void SDIO_ClockCmd(FunctionalState NewState)
000056  4955              LDR      r1,|L1.428|
;;;235    {
;;;236      /* Check the parameters */
;;;237      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;238      
;;;239      *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
000058  6008              STR      r0,[r1,#0]
;;;240    }
00005a  4770              BX       lr
;;;241    
                          ENDP

                  SDIO_SetPowerState PROC
;;;249      */
;;;250    void SDIO_SetPowerState(uint32_t SDIO_PowerState)
00005c  4951              LDR      r1,|L1.420|
;;;251    {
;;;252      /* Check the parameters */
;;;253      assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
;;;254      
;;;255      SDIO->POWER &= PWR_PWRCTRL_MASK;
00005e  6809              LDR      r1,[r1,#0]
000060  f0210103          BIC      r1,r1,#3
000064  4a4f              LDR      r2,|L1.420|
000066  6011              STR      r1,[r2,#0]
;;;256      SDIO->POWER |= SDIO_PowerState;
000068  4611              MOV      r1,r2
00006a  6809              LDR      r1,[r1,#0]
00006c  4301              ORRS     r1,r1,r0
00006e  6011              STR      r1,[r2,#0]
;;;257    }
000070  4770              BX       lr
;;;258    
                          ENDP

                  SDIO_GetPowerState PROC
;;;267      */
;;;268    uint32_t SDIO_GetPowerState(void)
000072  484c              LDR      r0,|L1.420|
;;;269    {
;;;270      return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
000074  6800              LDR      r0,[r0,#0]
000076  f0000003          AND      r0,r0,#3
;;;271    }
00007a  4770              BX       lr
;;;272    
                          ENDP

                  SDIO_ITConfig PROC
;;;305      */
;;;306    void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
00007c  b129              CBZ      r1,|L1.138|
;;;307    {
;;;308      /* Check the parameters */
;;;309      assert_param(IS_SDIO_IT(SDIO_IT));
;;;310      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;311      
;;;312      if (NewState != DISABLE)
;;;313      {
;;;314        /* Enable the SDIO interrupts */
;;;315        SDIO->MASK |= SDIO_IT;
00007e  4a49              LDR      r2,|L1.420|
000080  6bd2              LDR      r2,[r2,#0x3c]
000082  4302              ORRS     r2,r2,r0
000084  4b47              LDR      r3,|L1.420|
000086  63da              STR      r2,[r3,#0x3c]
000088  e004              B        |L1.148|
                  |L1.138|
;;;316      }
;;;317      else
;;;318      {
;;;319        /* Disable the SDIO interrupts */
;;;320        SDIO->MASK &= ~SDIO_IT;
00008a  4a46              LDR      r2,|L1.420|
00008c  6bd2              LDR      r2,[r2,#0x3c]
00008e  4382              BICS     r2,r2,r0
000090  4b44              LDR      r3,|L1.420|
000092  63da              STR      r2,[r3,#0x3c]
                  |L1.148|
;;;321      } 
;;;322    }
000094  4770              BX       lr
;;;323    
                          ENDP

                  SDIO_DMACmd PROC
;;;329      */
;;;330    void SDIO_DMACmd(FunctionalState NewState)
000096  4946              LDR      r1,|L1.432|
;;;331    {
;;;332      /* Check the parameters */
;;;333      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;334      
;;;335      *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
000098  6008              STR      r0,[r1,#0]
;;;336    }
00009a  4770              BX       lr
;;;337    
                          ENDP

                  SDIO_SendCommand PROC
;;;344      */
;;;345    void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
00009c  2100              MOVS     r1,#0
;;;346    {
;;;347      uint32_t tmpreg = 0;
;;;348      
;;;349      /* Check the parameters */
;;;350      assert_param(IS_SDIO_CMD_INDEX(SDIO_CmdInitStruct->SDIO_CmdIndex));
;;;351      assert_param(IS_SDIO_RESPONSE(SDIO_CmdInitStruct->SDIO_Response));
;;;352      assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
;;;353      assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
;;;354      
;;;355    /*---------------------------- SDIO ARG Configuration ------------------------*/
;;;356      /* Set the SDIO Argument value */
;;;357      SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
00009e  4b41              LDR      r3,|L1.420|
0000a0  6802              LDR      r2,[r0,#0]
0000a2  609a              STR      r2,[r3,#8]
;;;358      
;;;359    /*---------------------------- SDIO CMD Configuration ------------------------*/  
;;;360      /* Get the SDIO CMD value */
;;;361      tmpreg = SDIO->CMD;
0000a4  461a              MOV      r2,r3
0000a6  68d1              LDR      r1,[r2,#0xc]
;;;362      /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
;;;363      tmpreg &= CMD_CLEAR_MASK;
0000a8  f36f010a          BFC      r1,#0,#11
;;;364      /* Set CMDINDEX bits according to SDIO_CmdIndex value */
;;;365      /* Set WAITRESP bits according to SDIO_Response value */
;;;366      /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
;;;367      /* Set CPSMEN bits according to SDIO_CPSM value */
;;;368      tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
0000ac  e9d02301          LDRD     r2,r3,[r0,#4]
0000b0  431a              ORRS     r2,r2,r3
0000b2  68c3              LDR      r3,[r0,#0xc]
0000b4  431a              ORRS     r2,r2,r3
0000b6  6903              LDR      r3,[r0,#0x10]
0000b8  431a              ORRS     r2,r2,r3
0000ba  4311              ORRS     r1,r1,r2
;;;369               | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
;;;370      
;;;371      /* Write to SDIO CMD */
;;;372      SDIO->CMD = tmpreg;
0000bc  4a39              LDR      r2,|L1.420|
0000be  60d1              STR      r1,[r2,#0xc]
;;;373    }
0000c0  4770              BX       lr
;;;374    
                          ENDP

                  SDIO_CmdStructInit PROC
;;;380      */
;;;381    void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
0000c2  2100              MOVS     r1,#0
;;;382    {
;;;383      /* SDIO_CmdInitStruct members default value */
;;;384      SDIO_CmdInitStruct->SDIO_Argument = 0x00;
0000c4  6001              STR      r1,[r0,#0]
;;;385      SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
0000c6  6041              STR      r1,[r0,#4]
;;;386      SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
0000c8  6081              STR      r1,[r0,#8]
;;;387      SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
0000ca  60c1              STR      r1,[r0,#0xc]
;;;388      SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
0000cc  6101              STR      r1,[r0,#0x10]
;;;389    }
0000ce  4770              BX       lr
;;;390    
                          ENDP

                  SDIO_GetCommandResponse PROC
;;;395      */
;;;396    uint8_t SDIO_GetCommandResponse(void)
0000d0  4834              LDR      r0,|L1.420|
;;;397    {
;;;398      return (uint8_t)(SDIO->RESPCMD);
0000d2  6900              LDR      r0,[r0,#0x10]
0000d4  b2c0              UXTB     r0,r0
;;;399    }
0000d6  4770              BX       lr
;;;400    
                          ENDP

                  SDIO_GetResponse PROC
;;;410      */
;;;411    uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
0000d8  4601              MOV      r1,r0
;;;412    {
;;;413      __IO uint32_t tmp = 0;
0000da  2200              MOVS     r2,#0
;;;414    
;;;415      /* Check the parameters */
;;;416      assert_param(IS_SDIO_RESP(SDIO_RESP));
;;;417    
;;;418      tmp = SDIO_RESP_ADDR + SDIO_RESP;
0000dc  4831              LDR      r0,|L1.420|
0000de  3014              ADDS     r0,r0,#0x14
0000e0  180a              ADDS     r2,r1,r0
;;;419      
;;;420      return (*(__IO uint32_t *) tmp); 
0000e2  6810              LDR      r0,[r2,#0]
;;;421    }
0000e4  4770              BX       lr
;;;422    
                          ENDP

                  SDIO_DataConfig PROC
;;;429      */
;;;430    void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
0000e6  2100              MOVS     r1,#0
;;;431    {
;;;432      uint32_t tmpreg = 0;
;;;433      
;;;434      /* Check the parameters */
;;;435      assert_param(IS_SDIO_DATA_LENGTH(SDIO_DataInitStruct->SDIO_DataLength));
;;;436      assert_param(IS_SDIO_BLOCK_SIZE(SDIO_DataInitStruct->SDIO_DataBlockSize));
;;;437      assert_param(IS_SDIO_TRANSFER_DIR(SDIO_DataInitStruct->SDIO_TransferDir));
;;;438      assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
;;;439      assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));
;;;440    
;;;441    /*---------------------------- SDIO DTIMER Configuration ---------------------*/
;;;442      /* Set the SDIO Data TimeOut value */
;;;443      SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
0000e8  4b2e              LDR      r3,|L1.420|
0000ea  6802              LDR      r2,[r0,#0]
0000ec  625a              STR      r2,[r3,#0x24]
;;;444    
;;;445    /*---------------------------- SDIO DLEN Configuration -----------------------*/
;;;446      /* Set the SDIO DataLength value */
;;;447      SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
0000ee  6842              LDR      r2,[r0,#4]
0000f0  629a              STR      r2,[r3,#0x28]
;;;448    
;;;449    /*---------------------------- SDIO DCTRL Configuration ----------------------*/  
;;;450      /* Get the SDIO DCTRL value */
;;;451      tmpreg = SDIO->DCTRL;
0000f2  461a              MOV      r2,r3
0000f4  6ad1              LDR      r1,[r2,#0x2c]
;;;452      /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
;;;453      tmpreg &= DCTRL_CLEAR_MASK;
0000f6  f02101f7          BIC      r1,r1,#0xf7
;;;454      /* Set DEN bit according to SDIO_DPSM value */
;;;455      /* Set DTMODE bit according to SDIO_TransferMode value */
;;;456      /* Set DTDIR bit according to SDIO_TransferDir value */
;;;457      /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
;;;458      tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
0000fa  e9d02302          LDRD     r2,r3,[r0,#8]
0000fe  431a              ORRS     r2,r2,r3
000100  6903              LDR      r3,[r0,#0x10]
000102  431a              ORRS     r2,r2,r3
000104  6943              LDR      r3,[r0,#0x14]
000106  431a              ORRS     r2,r2,r3
000108  4311              ORRS     r1,r1,r2
;;;459               | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
;;;460    
;;;461      /* Write to SDIO DCTRL */
;;;462      SDIO->DCTRL = tmpreg;
00010a  4a26              LDR      r2,|L1.420|
00010c  62d1              STR      r1,[r2,#0x2c]
;;;463    }
00010e  4770              BX       lr
;;;464    
                          ENDP

                  SDIO_DataStructInit PROC
;;;470      */
;;;471    void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
000110  f04f31ff          MOV      r1,#0xffffffff
;;;472    {
;;;473      /* SDIO_DataInitStruct members default value */
;;;474      SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
000114  6001              STR      r1,[r0,#0]
;;;475      SDIO_DataInitStruct->SDIO_DataLength = 0x00;
000116  2100              MOVS     r1,#0
000118  6041              STR      r1,[r0,#4]
;;;476      SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
00011a  6081              STR      r1,[r0,#8]
;;;477      SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
00011c  60c1              STR      r1,[r0,#0xc]
;;;478      SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
00011e  6101              STR      r1,[r0,#0x10]
;;;479      SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
000120  6141              STR      r1,[r0,#0x14]
;;;480    }
000122  4770              BX       lr
;;;481    
                          ENDP

                  SDIO_GetDataCounter PROC
;;;486      */
;;;487    uint32_t SDIO_GetDataCounter(void)
000124  481f              LDR      r0,|L1.420|
;;;488    { 
;;;489      return SDIO->DCOUNT;
000126  6b00              LDR      r0,[r0,#0x30]
;;;490    }
000128  4770              BX       lr
;;;491    
                          ENDP

                  SDIO_ReadData PROC
;;;496      */
;;;497    uint32_t SDIO_ReadData(void)
00012a  4822              LDR      r0,|L1.436|
;;;498    { 
;;;499      return SDIO->FIFO;
00012c  6800              LDR      r0,[r0,#0]
;;;500    }
00012e  4770              BX       lr
;;;501    
                          ENDP

                  SDIO_WriteData PROC
;;;506      */
;;;507    void SDIO_WriteData(uint32_t Data)
000130  4920              LDR      r1,|L1.436|
;;;508    { 
;;;509      SDIO->FIFO = Data;
000132  6008              STR      r0,[r1,#0]
;;;510    }
000134  4770              BX       lr
;;;511    
                          ENDP

                  SDIO_GetFIFOCount PROC
;;;516      */
;;;517    uint32_t SDIO_GetFIFOCount(void)
000136  481b              LDR      r0,|L1.420|
;;;518    { 
;;;519      return SDIO->FIFOCNT;
000138  6c80              LDR      r0,[r0,#0x48]
;;;520    }
00013a  4770              BX       lr
;;;521    
                          ENDP

                  SDIO_StartSDIOReadWait PROC
;;;527      */
;;;528    void SDIO_StartSDIOReadWait(FunctionalState NewState)
00013c  491e              LDR      r1,|L1.440|
;;;529    { 
;;;530      /* Check the parameters */
;;;531      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;532      
;;;533      *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
00013e  6008              STR      r0,[r1,#0]
;;;534    }
000140  4770              BX       lr
;;;535    
                          ENDP

                  SDIO_StopSDIOReadWait PROC
;;;541      */
;;;542    void SDIO_StopSDIOReadWait(FunctionalState NewState)
000142  491e              LDR      r1,|L1.444|
;;;543    { 
;;;544      /* Check the parameters */
;;;545      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;546      
;;;547      *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
000144  6008              STR      r0,[r1,#0]
;;;548    }
000146  4770              BX       lr
;;;549    
                          ENDP

                  SDIO_SetSDIOReadWaitMode PROC
;;;557      */
;;;558    void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
000148  491d              LDR      r1,|L1.448|
;;;559    {
;;;560      /* Check the parameters */
;;;561      assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
;;;562      
;;;563      *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
00014a  6008              STR      r0,[r1,#0]
;;;564    }
00014c  4770              BX       lr
;;;565    
                          ENDP

                  SDIO_SetSDIOOperation PROC
;;;571      */
;;;572    void SDIO_SetSDIOOperation(FunctionalState NewState)
00014e  491d              LDR      r1,|L1.452|
;;;573    { 
;;;574      /* Check the parameters */
;;;575      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;576      
;;;577      *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
000150  6008              STR      r0,[r1,#0]
;;;578    }
000152  4770              BX       lr
;;;579    
                          ENDP

                  SDIO_SendSDIOSuspendCmd PROC
;;;585      */
;;;586    void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
000154  491c              LDR      r1,|L1.456|
;;;587    { 
;;;588      /* Check the parameters */
;;;589      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;590      
;;;591      *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
000156  6008              STR      r0,[r1,#0]
;;;592    }
000158  4770              BX       lr
;;;593    
                          ENDP

                  SDIO_CommandCompletionCmd PROC
;;;599      */
;;;600    void SDIO_CommandCompletionCmd(FunctionalState NewState)
00015a  491c              LDR      r1,|L1.460|
;;;601    { 
;;;602      /* Check the parameters */
;;;603      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;604      
;;;605      *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
00015c  6008              STR      r0,[r1,#0]
;;;606    }
00015e  4770              BX       lr
;;;607    
                          ENDP

                  SDIO_CEATAITCmd PROC
;;;612      */
;;;613    void SDIO_CEATAITCmd(FunctionalState NewState)
000160  2101              MOVS     r1,#1
;;;614    { 
;;;615      /* Check the parameters */
;;;616      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;617      
;;;618      *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
000162  4381              BICS     r1,r1,r0
000164  4a1a              LDR      r2,|L1.464|
000166  6011              STR      r1,[r2,#0]
;;;619    }
000168  4770              BX       lr
;;;620    
                          ENDP

                  SDIO_SendCEATACmd PROC
;;;625      */
;;;626    void SDIO_SendCEATACmd(FunctionalState NewState)
00016a  491a              LDR      r1,|L1.468|
;;;627    { 
;;;628      /* Check the parameters */
;;;629      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;630      
;;;631      *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
00016c  6008              STR      r0,[r1,#0]
;;;632    }
00016e  4770              BX       lr
;;;633    
                          ENDP

                  SDIO_GetFlagStatus PROC
;;;664      */
;;;665    FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
000170  4601              MOV      r1,r0
;;;666    { 
;;;667      FlagStatus bitstatus = RESET;
000172  2000              MOVS     r0,#0
;;;668      
;;;669      /* Check the parameters */
;;;670      assert_param(IS_SDIO_FLAG(SDIO_FLAG));
;;;671      
;;;672      if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
000174  4a0b              LDR      r2,|L1.420|
000176  6b52              LDR      r2,[r2,#0x34]
000178  420a              TST      r2,r1
00017a  d001              BEQ      |L1.384|
;;;673      {
;;;674        bitstatus = SET;
00017c  2001              MOVS     r0,#1
00017e  e000              B        |L1.386|
                  |L1.384|
;;;675      }
;;;676      else
;;;677      {
;;;678        bitstatus = RESET;
000180  2000              MOVS     r0,#0
                  |L1.386|
;;;679      }
;;;680      return bitstatus;
;;;681    }
000182  4770              BX       lr
;;;682    
                          ENDP

                  SDIO_ClearFlag PROC
;;;702      */
;;;703    void SDIO_ClearFlag(uint32_t SDIO_FLAG)
000184  4907              LDR      r1,|L1.420|
;;;704    { 
;;;705      /* Check the parameters */
;;;706      assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
;;;707       
;;;708      SDIO->ICR = SDIO_FLAG;
000186  6388              STR      r0,[r1,#0x38]
;;;709    }
000188  4770              BX       lr
;;;710    
                          ENDP

                  SDIO_GetITStatus PROC
;;;741      */
;;;742    ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
00018a  4601              MOV      r1,r0
;;;743    { 
;;;744      ITStatus bitstatus = RESET;
00018c  2000              MOVS     r0,#0
;;;745      
;;;746      /* Check the parameters */
;;;747      assert_param(IS_SDIO_GET_IT(SDIO_IT));
;;;748      if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
00018e  4a05              LDR      r2,|L1.420|
000190  6b52              LDR      r2,[r2,#0x34]
000192  420a              TST      r2,r1
000194  d001              BEQ      |L1.410|
;;;749      {
;;;750        bitstatus = SET;
000196  2001              MOVS     r0,#1
000198  e000              B        |L1.412|
                  |L1.410|
;;;751      }
;;;752      else
;;;753      {
;;;754        bitstatus = RESET;
00019a  2000              MOVS     r0,#0
                  |L1.412|
;;;755      }
;;;756      return bitstatus;
;;;757    }
00019c  4770              BX       lr
;;;758    
                          ENDP

                  SDIO_ClearITPendingBit PROC
;;;777      */
;;;778    void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
00019e  4901              LDR      r1,|L1.420|
;;;779    { 
;;;780      /* Check the parameters */
;;;781      assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
;;;782       
;;;783      SDIO->ICR = SDIO_IT;
0001a0  6388              STR      r0,[r1,#0x38]
;;;784    }
0001a2  4770              BX       lr
;;;785    
                          ENDP

                  |L1.420|
                          DCD      0x40018000
                  |L1.424|
                          DCD      0x00c007ff
                  |L1.428|
                          DCD      0x423000a0
                  |L1.432|
                          DCD      0x4230058c
                  |L1.436|
                          DCD      0x40018080
                  |L1.440|
                          DCD      0x423005a0
                  |L1.444|
                          DCD      0x423005a4
                  |L1.448|
                          DCD      0x423005a8
                  |L1.452|
                          DCD      0x423005ac
                  |L1.456|
                          DCD      0x423001ac
                  |L1.460|
                          DCD      0x423001b0
                  |L1.464|
                          DCD      0x423001b4
                  |L1.468|
                          DCD      0x423001b8
