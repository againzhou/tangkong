; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_rcc.o --depend=.\exe\stm32f10x_rcc.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_rcc.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_rcc.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  RCC_DeInit PROC
;;;223      */
;;;224    void RCC_DeInit(void)
000000  48db              LDR      r0,|L1.880|
;;;225    {
;;;226      /* Set HSION bit */
;;;227      RCC->CR |= (uint32_t)0x00000001;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  49d9              LDR      r1,|L1.880|
00000a  6008              STR      r0,[r1,#0]
;;;228    
;;;229      /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
;;;230    #ifndef STM32F10X_CL
;;;231      RCC->CFGR &= (uint32_t)0xF8FF0000;
00000c  4608              MOV      r0,r1
00000e  6840              LDR      r0,[r0,#4]
000010  49d8              LDR      r1,|L1.884|
000012  4008              ANDS     r0,r0,r1
000014  49d6              LDR      r1,|L1.880|
000016  6048              STR      r0,[r1,#4]
;;;232    #else
;;;233      RCC->CFGR &= (uint32_t)0xF0FF0000;
;;;234    #endif /* STM32F10X_CL */   
;;;235      
;;;236      /* Reset HSEON, CSSON and PLLON bits */
;;;237      RCC->CR &= (uint32_t)0xFEF6FFFF;
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  49d6              LDR      r1,|L1.888|
00001e  4008              ANDS     r0,r0,r1
000020  49d3              LDR      r1,|L1.880|
000022  6008              STR      r0,[r1,#0]
;;;238    
;;;239      /* Reset HSEBYP bit */
;;;240      RCC->CR &= (uint32_t)0xFFFBFFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f4202080          BIC      r0,r0,#0x40000
00002c  6008              STR      r0,[r1,#0]
;;;241    
;;;242      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
;;;243      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00002e  4608              MOV      r0,r1
000030  6840              LDR      r0,[r0,#4]
000032  f42000fe          BIC      r0,r0,#0x7f0000
000036  6048              STR      r0,[r1,#4]
;;;244    
;;;245    #ifndef STM32F10X_CL
;;;246      /* Disable all interrupts and clear pending bits  */
;;;247      RCC->CIR = 0x009F0000;
000038  f44f001f          MOV      r0,#0x9f0000
00003c  6088              STR      r0,[r1,#8]
;;;248    #else
;;;249      /* Reset PLL2ON and PLL3ON bits */
;;;250      RCC->CR &= (uint32_t)0xEBFFFFFF;
;;;251    
;;;252      /* Disable all interrupts and clear pending bits  */
;;;253      RCC->CIR = 0x00FF0000;
;;;254    
;;;255      /* Reset CFGR2 register */
;;;256      RCC->CFGR2 = 0x00000000;
;;;257    #endif /* STM32F10X_CL */
;;;258    }
00003e  4770              BX       lr
;;;259    
                          ENDP

                  RCC_HSEConfig PROC
;;;269      */
;;;270    void RCC_HSEConfig(uint32_t RCC_HSE)
000040  49cb              LDR      r1,|L1.880|
;;;271    {
;;;272      /* Check the parameters */
;;;273      assert_param(IS_RCC_HSE(RCC_HSE));
;;;274      /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
;;;275      /* Reset HSEON bit */
;;;276      RCC->CR &= CR_HSEON_Reset;
000042  6809              LDR      r1,[r1,#0]
000044  f4213180          BIC      r1,r1,#0x10000
000048  4ac9              LDR      r2,|L1.880|
00004a  6011              STR      r1,[r2,#0]
;;;277      /* Reset HSEBYP bit */
;;;278      RCC->CR &= CR_HSEBYP_Reset;
00004c  4611              MOV      r1,r2
00004e  6809              LDR      r1,[r1,#0]
000050  f4212180          BIC      r1,r1,#0x40000
000054  6011              STR      r1,[r2,#0]
;;;279      /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
;;;280      switch(RCC_HSE)
000056  f5b03f80          CMP      r0,#0x10000
00005a  d003              BEQ      |L1.100|
00005c  f5b02f80          CMP      r0,#0x40000
000060  d10e              BNE      |L1.128|
000062  e006              B        |L1.114|
                  |L1.100|
;;;281      {
;;;282        case RCC_HSE_ON:
;;;283          /* Set HSEON bit */
;;;284          RCC->CR |= CR_HSEON_Set;
000064  49c2              LDR      r1,|L1.880|
000066  6809              LDR      r1,[r1,#0]
000068  f4413180          ORR      r1,r1,#0x10000
00006c  4ac0              LDR      r2,|L1.880|
00006e  6011              STR      r1,[r2,#0]
;;;285          break;
000070  e007              B        |L1.130|
                  |L1.114|
;;;286          
;;;287        case RCC_HSE_Bypass:
;;;288          /* Set HSEBYP and HSEON bits */
;;;289          RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
000072  49bf              LDR      r1,|L1.880|
000074  6809              LDR      r1,[r1,#0]
000076  f44121a0          ORR      r1,r1,#0x50000
00007a  4abd              LDR      r2,|L1.880|
00007c  6011              STR      r1,[r2,#0]
;;;290          break;
00007e  e000              B        |L1.130|
                  |L1.128|
;;;291          
;;;292        default:
;;;293          break;
000080  bf00              NOP      
                  |L1.130|
000082  bf00              NOP                            ;285
;;;294      }
;;;295    }
000084  4770              BX       lr
;;;296    
                          ENDP

                  RCC_GetFlagStatus PROC
;;;1302     */
;;;1303   FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
000086  b510              PUSH     {r4,lr}
;;;1304   {
000088  4601              MOV      r1,r0
;;;1305     uint32_t tmp = 0;
00008a  2200              MOVS     r2,#0
;;;1306     uint32_t statusreg = 0;
00008c  2300              MOVS     r3,#0
;;;1307     FlagStatus bitstatus = RESET;
00008e  2000              MOVS     r0,#0
;;;1308     /* Check the parameters */
;;;1309     assert_param(IS_RCC_FLAG(RCC_FLAG));
;;;1310   
;;;1311     /* Get the RCC register index */
;;;1312     tmp = RCC_FLAG >> 5;
000090  114a              ASRS     r2,r1,#5
;;;1313     if (tmp == 1)               /* The flag to check is in CR register */
000092  2a01              CMP      r2,#1
000094  d102              BNE      |L1.156|
;;;1314     {
;;;1315       statusreg = RCC->CR;
000096  4cb6              LDR      r4,|L1.880|
000098  6823              LDR      r3,[r4,#0]
00009a  e006              B        |L1.170|
                  |L1.156|
;;;1316     }
;;;1317     else if (tmp == 2)          /* The flag to check is in BDCR register */
00009c  2a02              CMP      r2,#2
00009e  d102              BNE      |L1.166|
;;;1318     {
;;;1319       statusreg = RCC->BDCR;
0000a0  4cb3              LDR      r4,|L1.880|
0000a2  6a23              LDR      r3,[r4,#0x20]
0000a4  e001              B        |L1.170|
                  |L1.166|
;;;1320     }
;;;1321     else                       /* The flag to check is in CSR register */
;;;1322     {
;;;1323       statusreg = RCC->CSR;
0000a6  4cb2              LDR      r4,|L1.880|
0000a8  6a63              LDR      r3,[r4,#0x24]
                  |L1.170|
;;;1324     }
;;;1325   
;;;1326     /* Get the flag position */
;;;1327     tmp = RCC_FLAG & FLAG_Mask;
0000aa  f001021f          AND      r2,r1,#0x1f
;;;1328     if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
0000ae  2401              MOVS     r4,#1
0000b0  4094              LSLS     r4,r4,r2
0000b2  421c              TST      r4,r3
0000b4  d001              BEQ      |L1.186|
;;;1329     {
;;;1330       bitstatus = SET;
0000b6  2001              MOVS     r0,#1
0000b8  e000              B        |L1.188|
                  |L1.186|
;;;1331     }
;;;1332     else
;;;1333     {
;;;1334       bitstatus = RESET;
0000ba  2000              MOVS     r0,#0
                  |L1.188|
;;;1335     }
;;;1336   
;;;1337     /* Return the flag status */
;;;1338     return bitstatus;
;;;1339   }
0000bc  bd10              POP      {r4,pc}
;;;1340   
                          ENDP

                  RCC_WaitForHSEStartUp PROC
;;;303      */
;;;304    ErrorStatus RCC_WaitForHSEStartUp(void)
0000be  b570              PUSH     {r4-r6,lr}
;;;305    {
;;;306      __IO uint32_t StartUpCounter = 0;
0000c0  2400              MOVS     r4,#0
;;;307      ErrorStatus status = ERROR;
0000c2  2500              MOVS     r5,#0
;;;308      FlagStatus HSEStatus = RESET;
0000c4  2600              MOVS     r6,#0
;;;309      
;;;310      /* Wait till HSE is ready and if Time out is reached exit */
;;;311      do
0000c6  bf00              NOP      
                  |L1.200|
;;;312      {
;;;313        HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
0000c8  2031              MOVS     r0,#0x31
0000ca  f7fffffe          BL       RCC_GetFlagStatus
0000ce  4606              MOV      r6,r0
;;;314        StartUpCounter++;  
0000d0  1c64              ADDS     r4,r4,#1
;;;315      } while((StartUpCounter != HSEStartUp_TimeOut) && (HSEStatus == RESET));
0000d2  f5b46fa0          CMP      r4,#0x500
0000d6  d001              BEQ      |L1.220|
0000d8  2e00              CMP      r6,#0
0000da  d0f5              BEQ      |L1.200|
                  |L1.220|
;;;316      
;;;317      if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
0000dc  2031              MOVS     r0,#0x31
0000de  f7fffffe          BL       RCC_GetFlagStatus
0000e2  b108              CBZ      r0,|L1.232|
;;;318      {
;;;319        status = SUCCESS;
0000e4  2501              MOVS     r5,#1
0000e6  e000              B        |L1.234|
                  |L1.232|
;;;320      }
;;;321      else
;;;322      {
;;;323        status = ERROR;
0000e8  2500              MOVS     r5,#0
                  |L1.234|
;;;324      }  
;;;325      return (status);
0000ea  4628              MOV      r0,r5
;;;326    }
0000ec  bd70              POP      {r4-r6,pc}
;;;327    
                          ENDP

                  RCC_AdjustHSICalibrationValue PROC
;;;333      */
;;;334    void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
0000ee  4601              MOV      r1,r0
;;;335    {
;;;336      uint32_t tmpreg = 0;
0000f0  2000              MOVS     r0,#0
;;;337      /* Check the parameters */
;;;338      assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
;;;339      tmpreg = RCC->CR;
0000f2  4a9f              LDR      r2,|L1.880|
0000f4  6810              LDR      r0,[r2,#0]
;;;340      /* Clear HSITRIM[4:0] bits */
;;;341      tmpreg &= CR_HSITRIM_Mask;
0000f6  f02000f8          BIC      r0,r0,#0xf8
;;;342      /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
;;;343      tmpreg |= (uint32_t)HSICalibrationValue << 3;
0000fa  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;344      /* Store the new value */
;;;345      RCC->CR = tmpreg;
0000fe  6010              STR      r0,[r2,#0]
;;;346    }
000100  4770              BX       lr
;;;347    
                          ENDP

                  RCC_HSICmd PROC
;;;353      */
;;;354    void RCC_HSICmd(FunctionalState NewState)
000102  499e              LDR      r1,|L1.892|
;;;355    {
;;;356      /* Check the parameters */
;;;357      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;358      *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
000104  6008              STR      r0,[r1,#0]
;;;359    }
000106  4770              BX       lr
;;;360    
                          ENDP

                  RCC_PLLConfig PROC
;;;377      */
;;;378    void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
000108  4602              MOV      r2,r0
;;;379    {
;;;380      uint32_t tmpreg = 0;
00010a  2000              MOVS     r0,#0
;;;381    
;;;382      /* Check the parameters */
;;;383      assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
;;;384      assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
;;;385    
;;;386      tmpreg = RCC->CFGR;
00010c  4b98              LDR      r3,|L1.880|
00010e  6858              LDR      r0,[r3,#4]
;;;387      /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
;;;388      tmpreg &= CFGR_PLL_Mask;
000110  f420107c          BIC      r0,r0,#0x3f0000
;;;389      /* Set the PLL configuration bits */
;;;390      tmpreg |= RCC_PLLSource | RCC_PLLMul;
000114  ea420301          ORR      r3,r2,r1
000118  4318              ORRS     r0,r0,r3
;;;391      /* Store the new value */
;;;392      RCC->CFGR = tmpreg;
00011a  4b95              LDR      r3,|L1.880|
00011c  6058              STR      r0,[r3,#4]
;;;393    }
00011e  4770              BX       lr
;;;394    
                          ENDP

                  RCC_PLLCmd PROC
;;;400      */
;;;401    void RCC_PLLCmd(FunctionalState NewState)
000120  4996              LDR      r1,|L1.892|
;;;402    {
;;;403      /* Check the parameters */
;;;404      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;405    
;;;406      *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
000122  6608              STR      r0,[r1,#0x60]
;;;407    }
000124  4770              BX       lr
;;;408    
                          ENDP

                  RCC_SYSCLKConfig PROC
;;;559      */
;;;560    void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
000126  4601              MOV      r1,r0
;;;561    {
;;;562      uint32_t tmpreg = 0;
000128  2000              MOVS     r0,#0
;;;563      /* Check the parameters */
;;;564      assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
;;;565      tmpreg = RCC->CFGR;
00012a  4a91              LDR      r2,|L1.880|
00012c  6850              LDR      r0,[r2,#4]
;;;566      /* Clear SW[1:0] bits */
;;;567      tmpreg &= CFGR_SW_Mask;
00012e  f0200003          BIC      r0,r0,#3
;;;568      /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
;;;569      tmpreg |= RCC_SYSCLKSource;
000132  4308              ORRS     r0,r0,r1
;;;570      /* Store the new value */
;;;571      RCC->CFGR = tmpreg;
000134  6050              STR      r0,[r2,#4]
;;;572    }
000136  4770              BX       lr
;;;573    
                          ENDP

                  RCC_GetSYSCLKSource PROC
;;;582      */
;;;583    uint8_t RCC_GetSYSCLKSource(void)
000138  488d              LDR      r0,|L1.880|
;;;584    {
;;;585      return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
00013a  6840              LDR      r0,[r0,#4]
00013c  f000000c          AND      r0,r0,#0xc
;;;586    }
000140  4770              BX       lr
;;;587    
                          ENDP

                  RCC_HCLKConfig PROC
;;;603      */
;;;604    void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
000142  4601              MOV      r1,r0
;;;605    {
;;;606      uint32_t tmpreg = 0;
000144  2000              MOVS     r0,#0
;;;607      /* Check the parameters */
;;;608      assert_param(IS_RCC_HCLK(RCC_SYSCLK));
;;;609      tmpreg = RCC->CFGR;
000146  4a8a              LDR      r2,|L1.880|
000148  6850              LDR      r0,[r2,#4]
;;;610      /* Clear HPRE[3:0] bits */
;;;611      tmpreg &= CFGR_HPRE_Reset_Mask;
00014a  f02000f0          BIC      r0,r0,#0xf0
;;;612      /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
;;;613      tmpreg |= RCC_SYSCLK;
00014e  4308              ORRS     r0,r0,r1
;;;614      /* Store the new value */
;;;615      RCC->CFGR = tmpreg;
000150  6050              STR      r0,[r2,#4]
;;;616    }
000152  4770              BX       lr
;;;617    
                          ENDP

                  RCC_PCLK1Config PROC
;;;629      */
;;;630    void RCC_PCLK1Config(uint32_t RCC_HCLK)
000154  4601              MOV      r1,r0
;;;631    {
;;;632      uint32_t tmpreg = 0;
000156  2000              MOVS     r0,#0
;;;633      /* Check the parameters */
;;;634      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;635      tmpreg = RCC->CFGR;
000158  4a85              LDR      r2,|L1.880|
00015a  6850              LDR      r0,[r2,#4]
;;;636      /* Clear PPRE1[2:0] bits */
;;;637      tmpreg &= CFGR_PPRE1_Reset_Mask;
00015c  f42060e0          BIC      r0,r0,#0x700
;;;638      /* Set PPRE1[2:0] bits according to RCC_HCLK value */
;;;639      tmpreg |= RCC_HCLK;
000160  4308              ORRS     r0,r0,r1
;;;640      /* Store the new value */
;;;641      RCC->CFGR = tmpreg;
000162  6050              STR      r0,[r2,#4]
;;;642    }
000164  4770              BX       lr
;;;643    
                          ENDP

                  RCC_PCLK2Config PROC
;;;655      */
;;;656    void RCC_PCLK2Config(uint32_t RCC_HCLK)
000166  4601              MOV      r1,r0
;;;657    {
;;;658      uint32_t tmpreg = 0;
000168  2000              MOVS     r0,#0
;;;659      /* Check the parameters */
;;;660      assert_param(IS_RCC_PCLK(RCC_HCLK));
;;;661      tmpreg = RCC->CFGR;
00016a  4a81              LDR      r2,|L1.880|
00016c  6850              LDR      r0,[r2,#4]
;;;662      /* Clear PPRE2[2:0] bits */
;;;663      tmpreg &= CFGR_PPRE2_Reset_Mask;
00016e  f4205060          BIC      r0,r0,#0x3800
;;;664      /* Set PPRE2[2:0] bits according to RCC_HCLK value */
;;;665      tmpreg |= RCC_HCLK << 3;
000172  ea4000c1          ORR      r0,r0,r1,LSL #3
;;;666      /* Store the new value */
;;;667      RCC->CFGR = tmpreg;
000176  6050              STR      r0,[r2,#4]
;;;668    }
000178  4770              BX       lr
;;;669    
                          ENDP

                  RCC_ITConfig PROC
;;;695      */
;;;696    void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
00017a  b129              CBZ      r1,|L1.392|
;;;697    {
;;;698      /* Check the parameters */
;;;699      assert_param(IS_RCC_IT(RCC_IT));
;;;700      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;701      if (NewState != DISABLE)
;;;702      {
;;;703        /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
;;;704        *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
00017c  4a7c              LDR      r2,|L1.880|
00017e  7a52              LDRB     r2,[r2,#9]
000180  4302              ORRS     r2,r2,r0
000182  4b7b              LDR      r3,|L1.880|
000184  725a              STRB     r2,[r3,#9]
000186  e006              B        |L1.406|
                  |L1.392|
;;;705      }
;;;706      else
;;;707      {
;;;708        /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
;;;709        *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
000188  4a79              LDR      r2,|L1.880|
00018a  7a52              LDRB     r2,[r2,#9]
00018c  43c3              MVNS     r3,r0
00018e  b2db              UXTB     r3,r3
000190  401a              ANDS     r2,r2,r3
000192  4b77              LDR      r3,|L1.880|
000194  725a              STRB     r2,[r3,#9]
                  |L1.406|
;;;710      }
;;;711    }
000196  4770              BX       lr
;;;712    
                          ENDP

                  RCC_USBCLKConfig PROC
;;;723      */
;;;724    void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
000198  4979              LDR      r1,|L1.896|
;;;725    {
;;;726      /* Check the parameters */
;;;727      assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
;;;728    
;;;729      *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
00019a  6008              STR      r0,[r1,#0]
;;;730    }
00019c  4770              BX       lr
;;;731    #else
                          ENDP

                  RCC_ADCCLKConfig PROC
;;;761      */
;;;762    void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
00019e  4601              MOV      r1,r0
;;;763    {
;;;764      uint32_t tmpreg = 0;
0001a0  2000              MOVS     r0,#0
;;;765      /* Check the parameters */
;;;766      assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
;;;767      tmpreg = RCC->CFGR;
0001a2  4a73              LDR      r2,|L1.880|
0001a4  6850              LDR      r0,[r2,#4]
;;;768      /* Clear ADCPRE[1:0] bits */
;;;769      tmpreg &= CFGR_ADCPRE_Reset_Mask;
0001a6  f4204040          BIC      r0,r0,#0xc000
;;;770      /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
;;;771      tmpreg |= RCC_PCLK2;
0001aa  4308              ORRS     r0,r0,r1
;;;772      /* Store the new value */
;;;773      RCC->CFGR = tmpreg;
0001ac  6050              STR      r0,[r2,#4]
;;;774    }
0001ae  4770              BX       lr
;;;775    
                          ENDP

                  RCC_LSEConfig PROC
;;;824      */
;;;825    void RCC_LSEConfig(uint8_t RCC_LSE)
0001b0  2100              MOVS     r1,#0
;;;826    {
;;;827      /* Check the parameters */
;;;828      assert_param(IS_RCC_LSE(RCC_LSE));
;;;829      /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
;;;830      /* Reset LSEON bit */
;;;831      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0001b2  4a74              LDR      r2,|L1.900|
0001b4  7011              STRB     r1,[r2,#0]
;;;832      /* Reset LSEBYP bit */
;;;833      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
0001b6  4a6e              LDR      r2,|L1.880|
0001b8  f8821020          STRB     r1,[r2,#0x20]
;;;834      /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
;;;835      switch(RCC_LSE)
0001bc  2801              CMP      r0,#1
0001be  d002              BEQ      |L1.454|
0001c0  2804              CMP      r0,#4
0001c2  d108              BNE      |L1.470|
0001c4  e003              B        |L1.462|
                  |L1.454|
;;;836      {
;;;837        case RCC_LSE_ON:
;;;838          /* Set LSEON bit */
;;;839          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
0001c6  2101              MOVS     r1,#1
0001c8  4a6e              LDR      r2,|L1.900|
0001ca  7011              STRB     r1,[r2,#0]
;;;840          break;
0001cc  e004              B        |L1.472|
                  |L1.462|
;;;841          
;;;842        case RCC_LSE_Bypass:
;;;843          /* Set LSEBYP and LSEON bits */
;;;844          *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
0001ce  2105              MOVS     r1,#5
0001d0  4a6c              LDR      r2,|L1.900|
0001d2  7011              STRB     r1,[r2,#0]
;;;845          break;            
0001d4  e000              B        |L1.472|
                  |L1.470|
;;;846          
;;;847        default:
;;;848          break;      
0001d6  bf00              NOP      
                  |L1.472|
0001d8  bf00              NOP                            ;840
;;;849      }
;;;850    }
0001da  4770              BX       lr
;;;851    
                          ENDP

                  RCC_LSICmd PROC
;;;857      */
;;;858    void RCC_LSICmd(FunctionalState NewState)
0001dc  496a              LDR      r1,|L1.904|
;;;859    {
;;;860      /* Check the parameters */
;;;861      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;862      *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
0001de  6008              STR      r0,[r1,#0]
;;;863    }
0001e0  4770              BX       lr
;;;864    
                          ENDP

                  RCC_RTCCLKConfig PROC
;;;874      */
;;;875    void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
0001e2  4963              LDR      r1,|L1.880|
;;;876    {
;;;877      /* Check the parameters */
;;;878      assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
;;;879      /* Select the RTC clock source */
;;;880      RCC->BDCR |= RCC_RTCCLKSource;
0001e4  6a09              LDR      r1,[r1,#0x20]
0001e6  4301              ORRS     r1,r1,r0
0001e8  4a61              LDR      r2,|L1.880|
0001ea  6211              STR      r1,[r2,#0x20]
;;;881    }
0001ec  4770              BX       lr
;;;882    
                          ENDP

                  RCC_RTCCLKCmd PROC
;;;888      */
;;;889    void RCC_RTCCLKCmd(FunctionalState NewState)
0001ee  4967              LDR      r1,|L1.908|
;;;890    {
;;;891      /* Check the parameters */
;;;892      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;893      *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
0001f0  6008              STR      r0,[r1,#0]
;;;894    }
0001f2  4770              BX       lr
;;;895    
                          ENDP

                  RCC_GetClocksFreq PROC
;;;901      */
;;;902    void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
0001f4  b530              PUSH     {r4,r5,lr}
;;;903    {
;;;904      uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
0001f6  2100              MOVS     r1,#0
0001f8  2200              MOVS     r2,#0
0001fa  2400              MOVS     r4,#0
0001fc  2300              MOVS     r3,#0
;;;905    
;;;906    #ifdef  STM32F10X_CL
;;;907      uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
;;;908    #endif /* STM32F10X_CL */
;;;909        
;;;910      /* Get SYSCLK source -------------------------------------------------------*/
;;;911      tmp = RCC->CFGR & CFGR_SWS_Mask;
0001fe  4d5c              LDR      r5,|L1.880|
000200  686d              LDR      r5,[r5,#4]
000202  f005010c          AND      r1,r5,#0xc
;;;912      
;;;913      switch (tmp)
000206  b121              CBZ      r1,|L1.530|
000208  2904              CMP      r1,#4
00020a  d005              BEQ      |L1.536|
00020c  2908              CMP      r1,#8
00020e  d123              BNE      |L1.600|
000210  e005              B        |L1.542|
                  |L1.530|
;;;914      {
;;;915        case 0x00:  /* HSI used as system clock */
;;;916          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000212  4d5f              LDR      r5,|L1.912|
000214  6005              STR      r5,[r0,#0]
;;;917          break;
000216  e022              B        |L1.606|
                  |L1.536|
;;;918        case 0x04:  /* HSE used as system clock */
;;;919          RCC_Clocks->SYSCLK_Frequency = HSE_Value;
000218  4d5d              LDR      r5,|L1.912|
00021a  6005              STR      r5,[r0,#0]
;;;920          break;
00021c  e01f              B        |L1.606|
                  |L1.542|
;;;921        case 0x08:  /* PLL used as system clock */
;;;922    
;;;923          /* Get PLL clock source and multiplication factor ----------------------*/
;;;924          pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
00021e  4d54              LDR      r5,|L1.880|
000220  686d              LDR      r5,[r5,#4]
000222  f4051270          AND      r2,r5,#0x3c0000
;;;925          pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
000226  4d52              LDR      r5,|L1.880|
000228  686d              LDR      r5,[r5,#4]
00022a  f4053480          AND      r4,r5,#0x10000
;;;926          
;;;927    #ifndef STM32F10X_CL      
;;;928          pllmull = ( pllmull >> 18) + 2;
00022e  2502              MOVS     r5,#2
000230  eb054292          ADD      r2,r5,r2,LSR #18
;;;929          
;;;930          if (pllsource == 0x00)
000234  b91c              CBNZ     r4,|L1.574|
;;;931          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;932            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
000236  4d57              LDR      r5,|L1.916|
000238  4355              MULS     r5,r2,r5
00023a  6005              STR      r5,[r0,#0]
00023c  e00b              B        |L1.598|
                  |L1.574|
;;;933          }
;;;934          else
;;;935          {/* HSE selected as PLL clock entry */
;;;936            if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
00023e  4d4c              LDR      r5,|L1.880|
000240  686d              LDR      r5,[r5,#4]
000242  f4153f00          TST      r5,#0x20000
000246  d003              BEQ      |L1.592|
;;;937            {/* HSE oscillator clock divided by 2 */
;;;938              RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
000248  4d52              LDR      r5,|L1.916|
00024a  4355              MULS     r5,r2,r5
00024c  6005              STR      r5,[r0,#0]
00024e  e002              B        |L1.598|
                  |L1.592|
;;;939            }
;;;940            else
;;;941            {
;;;942              RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
000250  4d4f              LDR      r5,|L1.912|
000252  4355              MULS     r5,r2,r5
000254  6005              STR      r5,[r0,#0]
                  |L1.598|
;;;943            }
;;;944          }
;;;945    #else
;;;946          pllmull = pllmull >> 18;
;;;947          
;;;948          if (pllmull != 0x0D)
;;;949          {
;;;950             pllmull += 2;
;;;951          }
;;;952          else
;;;953          { /* PLL multiplication factor = PLL input clock * 6.5 */
;;;954            pllmull = 13 / 2; 
;;;955          }
;;;956                
;;;957          if (pllsource == 0x00)
;;;958          {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;959            RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
;;;960          }
;;;961          else
;;;962          {/* PREDIV1 selected as PLL clock entry */
;;;963            
;;;964            /* Get PREDIV1 clock source and division factor */
;;;965            prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
;;;966            prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
;;;967            
;;;968            if (prediv1source == 0)
;;;969            { /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;970              RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pllmull;          
;;;971            }
;;;972            else
;;;973            {/* PLL2 clock selected as PREDIV1 clock entry */
;;;974              
;;;975              /* Get PREDIV2 division factor and PLL2 multiplication factor */
;;;976              prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
;;;977              pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
;;;978              RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
;;;979            }
;;;980          }
;;;981    #endif /* STM32F10X_CL */ 
;;;982          break;
000256  e002              B        |L1.606|
                  |L1.600|
;;;983    
;;;984        default:
;;;985          RCC_Clocks->SYSCLK_Frequency = HSI_Value;
000258  4d4d              LDR      r5,|L1.912|
00025a  6005              STR      r5,[r0,#0]
;;;986          break;
00025c  bf00              NOP      
                  |L1.606|
00025e  bf00              NOP                            ;917
;;;987      }
;;;988    
;;;989      /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
;;;990      /* Get HCLK prescaler */
;;;991      tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
000260  4d43              LDR      r5,|L1.880|
000262  686d              LDR      r5,[r5,#4]
000264  f00501f0          AND      r1,r5,#0xf0
;;;992      tmp = tmp >> 4;
000268  0909              LSRS     r1,r1,#4
;;;993      presc = APBAHBPrescTable[tmp];
00026a  4d4b              LDR      r5,|L1.920|
00026c  5c6b              LDRB     r3,[r5,r1]
;;;994      /* HCLK clock frequency */
;;;995      RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
00026e  6805              LDR      r5,[r0,#0]
000270  40dd              LSRS     r5,r5,r3
000272  6045              STR      r5,[r0,#4]
;;;996      /* Get PCLK1 prescaler */
;;;997      tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
000274  4d3e              LDR      r5,|L1.880|
000276  686d              LDR      r5,[r5,#4]
000278  f40561e0          AND      r1,r5,#0x700
;;;998      tmp = tmp >> 8;
00027c  0a09              LSRS     r1,r1,#8
;;;999      presc = APBAHBPrescTable[tmp];
00027e  4d46              LDR      r5,|L1.920|
000280  5c6b              LDRB     r3,[r5,r1]
;;;1000     /* PCLK1 clock frequency */
;;;1001     RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000282  6845              LDR      r5,[r0,#4]
000284  40dd              LSRS     r5,r5,r3
000286  6085              STR      r5,[r0,#8]
;;;1002     /* Get PCLK2 prescaler */
;;;1003     tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
000288  4d39              LDR      r5,|L1.880|
00028a  686d              LDR      r5,[r5,#4]
00028c  f4055160          AND      r1,r5,#0x3800
;;;1004     tmp = tmp >> 11;
000290  0ac9              LSRS     r1,r1,#11
;;;1005     presc = APBAHBPrescTable[tmp];
000292  4d41              LDR      r5,|L1.920|
000294  5c6b              LDRB     r3,[r5,r1]
;;;1006     /* PCLK2 clock frequency */
;;;1007     RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
000296  6845              LDR      r5,[r0,#4]
000298  40dd              LSRS     r5,r5,r3
00029a  60c5              STR      r5,[r0,#0xc]
;;;1008     /* Get ADCCLK prescaler */
;;;1009     tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
00029c  4d34              LDR      r5,|L1.880|
00029e  686d              LDR      r5,[r5,#4]
0002a0  f4054140          AND      r1,r5,#0xc000
;;;1010     tmp = tmp >> 14;
0002a4  0b89              LSRS     r1,r1,#14
;;;1011     presc = ADCPrescTable[tmp];
0002a6  4d3d              LDR      r5,|L1.924|
0002a8  5c6b              LDRB     r3,[r5,r1]
;;;1012     /* ADCCLK clock frequency */
;;;1013     RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
0002aa  68c5              LDR      r5,[r0,#0xc]
0002ac  fbb5f5f3          UDIV     r5,r5,r3
0002b0  6105              STR      r5,[r0,#0x10]
;;;1014   }
0002b2  bd30              POP      {r4,r5,pc}
;;;1015   
                          ENDP

                  RCC_AHBPeriphClockCmd PROC
;;;1046     */
;;;1047   void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
0002b4  b129              CBZ      r1,|L1.706|
;;;1048   {
;;;1049     /* Check the parameters */
;;;1050     assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
;;;1051     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1052   
;;;1053     if (NewState != DISABLE)
;;;1054     {
;;;1055       RCC->AHBENR |= RCC_AHBPeriph;
0002b6  4a2e              LDR      r2,|L1.880|
0002b8  6952              LDR      r2,[r2,#0x14]
0002ba  4302              ORRS     r2,r2,r0
0002bc  4b2c              LDR      r3,|L1.880|
0002be  615a              STR      r2,[r3,#0x14]
0002c0  e004              B        |L1.716|
                  |L1.706|
;;;1056     }
;;;1057     else
;;;1058     {
;;;1059       RCC->AHBENR &= ~RCC_AHBPeriph;
0002c2  4a2b              LDR      r2,|L1.880|
0002c4  6952              LDR      r2,[r2,#0x14]
0002c6  4382              BICS     r2,r2,r0
0002c8  4b29              LDR      r3,|L1.880|
0002ca  615a              STR      r2,[r3,#0x14]
                  |L1.716|
;;;1060     }
;;;1061   }
0002cc  4770              BX       lr
;;;1062   
                          ENDP

                  RCC_APB2PeriphClockCmd PROC
;;;1075     */
;;;1076   void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
0002ce  b129              CBZ      r1,|L1.732|
;;;1077   {
;;;1078     /* Check the parameters */
;;;1079     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1080     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1081     if (NewState != DISABLE)
;;;1082     {
;;;1083       RCC->APB2ENR |= RCC_APB2Periph;
0002d0  4a27              LDR      r2,|L1.880|
0002d2  6992              LDR      r2,[r2,#0x18]
0002d4  4302              ORRS     r2,r2,r0
0002d6  4b26              LDR      r3,|L1.880|
0002d8  619a              STR      r2,[r3,#0x18]
0002da  e004              B        |L1.742|
                  |L1.732|
;;;1084     }
;;;1085     else
;;;1086     {
;;;1087       RCC->APB2ENR &= ~RCC_APB2Periph;
0002dc  4a24              LDR      r2,|L1.880|
0002de  6992              LDR      r2,[r2,#0x18]
0002e0  4382              BICS     r2,r2,r0
0002e2  4b23              LDR      r3,|L1.880|
0002e4  619a              STR      r2,[r3,#0x18]
                  |L1.742|
;;;1088     }
;;;1089   }
0002e6  4770              BX       lr
;;;1090   
                          ENDP

                  RCC_APB1PeriphClockCmd PROC
;;;1105     */
;;;1106   void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
0002e8  b129              CBZ      r1,|L1.758|
;;;1107   {
;;;1108     /* Check the parameters */
;;;1109     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1110     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1111     if (NewState != DISABLE)
;;;1112     {
;;;1113       RCC->APB1ENR |= RCC_APB1Periph;
0002ea  4a21              LDR      r2,|L1.880|
0002ec  69d2              LDR      r2,[r2,#0x1c]
0002ee  4302              ORRS     r2,r2,r0
0002f0  4b1f              LDR      r3,|L1.880|
0002f2  61da              STR      r2,[r3,#0x1c]
0002f4  e004              B        |L1.768|
                  |L1.758|
;;;1114     }
;;;1115     else
;;;1116     {
;;;1117       RCC->APB1ENR &= ~RCC_APB1Periph;
0002f6  4a1e              LDR      r2,|L1.880|
0002f8  69d2              LDR      r2,[r2,#0x1c]
0002fa  4382              BICS     r2,r2,r0
0002fc  4b1c              LDR      r3,|L1.880|
0002fe  61da              STR      r2,[r3,#0x1c]
                  |L1.768|
;;;1118     }
;;;1119   }
000300  4770              BX       lr
;;;1120   
                          ENDP

                  RCC_APB2PeriphResetCmd PROC
;;;1162     */
;;;1163   void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
000302  b129              CBZ      r1,|L1.784|
;;;1164   {
;;;1165     /* Check the parameters */
;;;1166     assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
;;;1167     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1168     if (NewState != DISABLE)
;;;1169     {
;;;1170       RCC->APB2RSTR |= RCC_APB2Periph;
000304  4a1a              LDR      r2,|L1.880|
000306  68d2              LDR      r2,[r2,#0xc]
000308  4302              ORRS     r2,r2,r0
00030a  4b19              LDR      r3,|L1.880|
00030c  60da              STR      r2,[r3,#0xc]
00030e  e004              B        |L1.794|
                  |L1.784|
;;;1171     }
;;;1172     else
;;;1173     {
;;;1174       RCC->APB2RSTR &= ~RCC_APB2Periph;
000310  4a17              LDR      r2,|L1.880|
000312  68d2              LDR      r2,[r2,#0xc]
000314  4382              BICS     r2,r2,r0
000316  4b16              LDR      r3,|L1.880|
000318  60da              STR      r2,[r3,#0xc]
                  |L1.794|
;;;1175     }
;;;1176   }
00031a  4770              BX       lr
;;;1177   
                          ENDP

                  RCC_APB1PeriphResetCmd PROC
;;;1192     */
;;;1193   void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
00031c  b129              CBZ      r1,|L1.810|
;;;1194   {
;;;1195     /* Check the parameters */
;;;1196     assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
;;;1197     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1198     if (NewState != DISABLE)
;;;1199     {
;;;1200       RCC->APB1RSTR |= RCC_APB1Periph;
00031e  4a14              LDR      r2,|L1.880|
000320  6912              LDR      r2,[r2,#0x10]
000322  4302              ORRS     r2,r2,r0
000324  4b12              LDR      r3,|L1.880|
000326  611a              STR      r2,[r3,#0x10]
000328  e004              B        |L1.820|
                  |L1.810|
;;;1201     }
;;;1202     else
;;;1203     {
;;;1204       RCC->APB1RSTR &= ~RCC_APB1Periph;
00032a  4a11              LDR      r2,|L1.880|
00032c  6912              LDR      r2,[r2,#0x10]
00032e  4382              BICS     r2,r2,r0
000330  4b0f              LDR      r3,|L1.880|
000332  611a              STR      r2,[r3,#0x10]
                  |L1.820|
;;;1205     }
;;;1206   }
000334  4770              BX       lr
;;;1207   
                          ENDP

                  RCC_BackupResetCmd PROC
;;;1213     */
;;;1214   void RCC_BackupResetCmd(FunctionalState NewState)
000336  491a              LDR      r1,|L1.928|
;;;1215   {
;;;1216     /* Check the parameters */
;;;1217     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1218     *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
000338  6008              STR      r0,[r1,#0]
;;;1219   }
00033a  4770              BX       lr
;;;1220   
                          ENDP

                  RCC_ClockSecuritySystemCmd PROC
;;;1226     */
;;;1227   void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
00033c  490f              LDR      r1,|L1.892|
;;;1228   {
;;;1229     /* Check the parameters */
;;;1230     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1231     *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
00033e  64c8              STR      r0,[r1,#0x4c]
;;;1232   }
000340  4770              BX       lr
;;;1233   
                          ENDP

                  RCC_MCOConfig PROC
;;;1258     */
;;;1259   void RCC_MCOConfig(uint8_t RCC_MCO)
000342  490b              LDR      r1,|L1.880|
;;;1260   {
;;;1261     /* Check the parameters */
;;;1262     assert_param(IS_RCC_MCO(RCC_MCO));
;;;1263   
;;;1264     /* Perform Byte access to MCO bits to select the MCO source */
;;;1265     *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
000344  71c8              STRB     r0,[r1,#7]
;;;1266   }
000346  4770              BX       lr
;;;1267   
                          ENDP

                  RCC_ClearFlag PROC
;;;1347     */
;;;1348   void RCC_ClearFlag(void)
000348  4809              LDR      r0,|L1.880|
;;;1349   {
;;;1350     /* Set RMVF bit to clear the reset flags */
;;;1351     RCC->CSR |= CSR_RMVF_Set;
00034a  6a40              LDR      r0,[r0,#0x24]
00034c  f0407080          ORR      r0,r0,#0x1000000
000350  4907              LDR      r1,|L1.880|
000352  6248              STR      r0,[r1,#0x24]
;;;1352   }
000354  4770              BX       lr
;;;1353   
                          ENDP

                  RCC_GetITStatus PROC
;;;1378     */
;;;1379   ITStatus RCC_GetITStatus(uint8_t RCC_IT)
000356  4601              MOV      r1,r0
;;;1380   {
;;;1381     ITStatus bitstatus = RESET;
000358  2000              MOVS     r0,#0
;;;1382     /* Check the parameters */
;;;1383     assert_param(IS_RCC_GET_IT(RCC_IT));
;;;1384   
;;;1385     /* Check the status of the specified RCC interrupt */
;;;1386     if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
00035a  4a05              LDR      r2,|L1.880|
00035c  6892              LDR      r2,[r2,#8]
00035e  420a              TST      r2,r1
000360  d001              BEQ      |L1.870|
;;;1387     {
;;;1388       bitstatus = SET;
000362  2001              MOVS     r0,#1
000364  e000              B        |L1.872|
                  |L1.870|
;;;1389     }
;;;1390     else
;;;1391     {
;;;1392       bitstatus = RESET;
000366  2000              MOVS     r0,#0
                  |L1.872|
;;;1393     }
;;;1394   
;;;1395     /* Return the RCC_IT status */
;;;1396     return  bitstatus;
;;;1397   }
000368  4770              BX       lr
;;;1398   
                          ENDP

                  RCC_ClearITPendingBit PROC
;;;1424     */
;;;1425   void RCC_ClearITPendingBit(uint8_t RCC_IT)
00036a  4901              LDR      r1,|L1.880|
;;;1426   {
;;;1427     /* Check the parameters */
;;;1428     assert_param(IS_RCC_CLEAR_IT(RCC_IT));
;;;1429   
;;;1430     /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
;;;1431        pending bits */
;;;1432     *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
00036c  7288              STRB     r0,[r1,#0xa]
;;;1433   }
00036e  4770              BX       lr
;;;1434   
                          ENDP

                  |L1.880|
                          DCD      0x40021000
                  |L1.884|
                          DCD      0xf8ff0000
                  |L1.888|
                          DCD      0xfef6ffff
                  |L1.892|
                          DCD      0x42420000
                  |L1.896|
                          DCD      0x424200d8
                  |L1.900|
                          DCD      0x40021020
                  |L1.904|
                          DCD      0x42420480
                  |L1.908|
                          DCD      0x4242043c
                  |L1.912|
                          DCD      0x007a1200
                  |L1.916|
                          DCD      0x003d0900
                  |L1.920|
                          DCD      APBAHBPrescTable
                  |L1.924|
                          DCD      ADCPrescTable
                  |L1.928|
                          DCD      0x42420440

                          AREA ||.data||, DATA, ALIGN=0

                  APBAHBPrescTable
000000  00000000          DCB      0x00,0x00,0x00,0x00
000004  01020304          DCB      0x01,0x02,0x03,0x04
000008  01020304          DCB      0x01,0x02,0x03,0x04
00000c  06070809          DCB      0x06,0x07,0x08,0x09
                  ADCPrescTable
000010  02040608          DCB      0x02,0x04,0x06,0x08
