; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_pwr.o --depend=.\exe\stm32f10x_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_pwr.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_pwr.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  PWR_DeInit PROC
;;;118      */
;;;119    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;122      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;123    }
000014  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  PWR_BackupAccessCmd PROC
;;;130      */
;;;131    void PWR_BackupAccessCmd(FunctionalState NewState)
000016  4928              LDR      r1,|L1.184|
;;;132    {
;;;133      /* Check the parameters */
;;;134      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;135      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000018  6208              STR      r0,[r1,#0x20]
;;;136    }
00001a  4770              BX       lr
;;;137    
                          ENDP

                  PWR_PVDCmd PROC
;;;143      */
;;;144    void PWR_PVDCmd(FunctionalState NewState)
00001c  4926              LDR      r1,|L1.184|
;;;145    {
;;;146      /* Check the parameters */
;;;147      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;148      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
00001e  6108              STR      r0,[r1,#0x10]
;;;149    }
000020  4770              BX       lr
;;;150    
                          ENDP

                  PWR_PVDLevelConfig PROC
;;;164      */
;;;165    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000022  4601              MOV      r1,r0
;;;166    {
;;;167      uint32_t tmpreg = 0;
000024  2000              MOVS     r0,#0
;;;168      /* Check the parameters */
;;;169      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;170      tmpreg = PWR->CR;
000026  4a25              LDR      r2,|L1.188|
000028  6810              LDR      r0,[r2,#0]
;;;171      /* Clear PLS[7:5] bits */
;;;172      tmpreg &= CR_PLS_Mask;
00002a  f02000e0          BIC      r0,r0,#0xe0
;;;173      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;174      tmpreg |= PWR_PVDLevel;
00002e  4308              ORRS     r0,r0,r1
;;;175      /* Store the new value */
;;;176      PWR->CR = tmpreg;
000030  6010              STR      r0,[r2,#0]
;;;177    }
000032  4770              BX       lr
;;;178    
                          ENDP

                  PWR_WakeUpPinCmd PROC
;;;184      */
;;;185    void PWR_WakeUpPinCmd(FunctionalState NewState)
000034  4922              LDR      r1,|L1.192|
;;;186    {
;;;187      /* Check the parameters */
;;;188      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;189      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000036  6008              STR      r0,[r1,#0]
;;;190    }
000038  4770              BX       lr
;;;191    
                          ENDP

                  PWR_EnterSTOPMode PROC
;;;203      */
;;;204    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
00003a  b510              PUSH     {r4,lr}
;;;205    {
00003c  4602              MOV      r2,r0
;;;206      uint32_t tmpreg = 0;
00003e  2000              MOVS     r0,#0
;;;207      /* Check the parameters */
;;;208      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;209      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;210      
;;;211      /* Select the regulator state in STOP mode ---------------------------------*/
;;;212      tmpreg = PWR->CR;
000040  4b1e              LDR      r3,|L1.188|
000042  6818              LDR      r0,[r3,#0]
;;;213      /* Clear PDDS and LPDS bits */
;;;214      tmpreg &= CR_DS_Mask;
000044  f0200003          BIC      r0,r0,#3
;;;215      /* Set LPDS bit according to PWR_Regulator value */
;;;216      tmpreg |= PWR_Regulator;
000048  4310              ORRS     r0,r0,r2
;;;217      /* Store the new value */
;;;218      PWR->CR = tmpreg;
00004a  6018              STR      r0,[r3,#0]
;;;219      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;220      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
00004c  4b1d              LDR      r3,|L1.196|
00004e  681b              LDR      r3,[r3,#0]
000050  f0430304          ORR      r3,r3,#4
000054  f04f24e0          MOV      r4,#0xe000e000
000058  f8c43d10          STR      r3,[r4,#0xd10]
;;;221      
;;;222      /* Select STOP mode entry --------------------------------------------------*/
;;;223      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00005c  2901              CMP      r1,#1
00005e  d101              BNE      |L1.100|
;;;224      {   
;;;225        /* Request Wait For Interrupt */
;;;226        __WFI();
000060  bf30              WFI      
000062  e000              B        |L1.102|
                  |L1.100|
;;;227      }
;;;228      else
;;;229      {
;;;230        /* Request Wait For Event */
;;;231        __WFE();
000064  bf20              WFE      
                  |L1.102|
;;;232      }
;;;233    }
000066  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  PWR_EnterSTANDBYMode PROC
;;;239      */
;;;240    void PWR_EnterSTANDBYMode(void)
000068  4814              LDR      r0,|L1.188|
;;;241    {
;;;242      /* Clear Wake-up flag */
;;;243      PWR->CR |= CR_CWUF_Set;
00006a  6800              LDR      r0,[r0,#0]
00006c  f0400004          ORR      r0,r0,#4
000070  4912              LDR      r1,|L1.188|
000072  6008              STR      r0,[r1,#0]
;;;244      /* Select STANDBY mode */
;;;245      PWR->CR |= CR_PDDS_Set;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f0400002          ORR      r0,r0,#2
00007c  6008              STR      r0,[r1,#0]
;;;246      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;247      *(__IO uint32_t *) SCB_SysCtrl |= SysCtrl_SLEEPDEEP_Set;
00007e  4811              LDR      r0,|L1.196|
000080  6800              LDR      r0,[r0,#0]
000082  f0400004          ORR      r0,r0,#4
000086  f04f21e0          MOV      r1,#0xe000e000
00008a  f8c10d10          STR      r0,[r1,#0xd10]
;;;248    /* This option is used to ensure that store operations are completed */
;;;249    #if defined ( __CC_ARM   )
;;;250      __force_stores();
00008e  bf00              NOP      
000090  bf00              NOP      
;;;251    #endif
;;;252      /* Request Wait For Interrupt */
;;;253      __WFI();
000092  bf30              WFI      
;;;254    }
000094  4770              BX       lr
;;;255    
                          ENDP

                  PWR_GetFlagStatus PROC
;;;264      */
;;;265    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000096  4601              MOV      r1,r0
;;;266    {
;;;267      FlagStatus bitstatus = RESET;
000098  2000              MOVS     r0,#0
;;;268      /* Check the parameters */
;;;269      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;270      
;;;271      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
00009a  4a08              LDR      r2,|L1.188|
00009c  6852              LDR      r2,[r2,#4]
00009e  420a              TST      r2,r1
0000a0  d001              BEQ      |L1.166|
;;;272      {
;;;273        bitstatus = SET;
0000a2  2001              MOVS     r0,#1
0000a4  e000              B        |L1.168|
                  |L1.166|
;;;274      }
;;;275      else
;;;276      {
;;;277        bitstatus = RESET;
0000a6  2000              MOVS     r0,#0
                  |L1.168|
;;;278      }
;;;279      /* Return the flag status */
;;;280      return bitstatus;
;;;281    }
0000a8  4770              BX       lr
;;;282    
                          ENDP

                  PWR_ClearFlag PROC
;;;290      */
;;;291    void PWR_ClearFlag(uint32_t PWR_FLAG)
0000aa  4904              LDR      r1,|L1.188|
;;;292    {
;;;293      /* Check the parameters */
;;;294      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;295             
;;;296      PWR->CR |=  PWR_FLAG << 2;
0000ac  6809              LDR      r1,[r1,#0]
0000ae  ea410180          ORR      r1,r1,r0,LSL #2
0000b2  4a02              LDR      r2,|L1.188|
0000b4  6011              STR      r1,[r2,#0]
;;;297    }
0000b6  4770              BX       lr
;;;298    
                          ENDP

                  |L1.184|
                          DCD      0x420e0000
                  |L1.188|
                          DCD      0x40007000
                  |L1.192|
                          DCD      0x420e00a0
                  |L1.196|
                          DCD      0xe000ed10
