; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_bkp.o --depend=.\exe\stm32f10x_bkp.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_bkp.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_bkp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BKP_DeInit PROC
;;;122      */
;;;123    void BKP_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;124    {
;;;125      RCC_BackupResetCmd(ENABLE);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       RCC_BackupResetCmd
;;;126      RCC_BackupResetCmd(DISABLE);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       RCC_BackupResetCmd
;;;127    }
00000e  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  BKP_TamperPinLevelConfig PROC
;;;136      */
;;;137    void BKP_TamperPinLevelConfig(uint16_t BKP_TamperPinLevel)
000010  4924              LDR      r1,|L1.164|
;;;138    {
;;;139      /* Check the parameters */
;;;140      assert_param(IS_BKP_TAMPER_PIN_LEVEL(BKP_TamperPinLevel));
;;;141      *(__IO uint32_t *) CR_TPAL_BB = BKP_TamperPinLevel;
000012  6008              STR      r0,[r1,#0]
;;;142    }
000014  4770              BX       lr
;;;143    
                          ENDP

                  BKP_TamperPinCmd PROC
;;;149      */
;;;150    void BKP_TamperPinCmd(FunctionalState NewState)
000016  4924              LDR      r1,|L1.168|
;;;151    {
;;;152      /* Check the parameters */
;;;153      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;154      *(__IO uint32_t *) CR_TPE_BB = (uint32_t)NewState;
000018  6008              STR      r0,[r1,#0]
;;;155    }
00001a  4770              BX       lr
;;;156    
                          ENDP

                  BKP_ITConfig PROC
;;;162      */
;;;163    void BKP_ITConfig(FunctionalState NewState)
00001c  4923              LDR      r1,|L1.172|
;;;164    {
;;;165      /* Check the parameters */
;;;166      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;167      *(__IO uint32_t *) CSR_TPIE_BB = (uint32_t)NewState;
00001e  6008              STR      r0,[r1,#0]
;;;168    }
000020  4770              BX       lr
;;;169    
                          ENDP

                  BKP_RTCOutputConfig PROC
;;;182      */
;;;183    void BKP_RTCOutputConfig(uint16_t BKP_RTCOutputSource)
000022  4601              MOV      r1,r0
;;;184    {
;;;185      uint16_t tmpreg = 0;
000024  2000              MOVS     r0,#0
;;;186      /* Check the parameters */
;;;187      assert_param(IS_BKP_RTC_OUTPUT_SOURCE(BKP_RTCOutputSource));
;;;188      tmpreg = BKP->RTCCR;
000026  4a22              LDR      r2,|L1.176|
000028  8810              LDRH     r0,[r2,#0]
;;;189      /* Clear CCO, ASOE and ASOS bits */
;;;190      tmpreg &= RTCCR_Mask;
00002a  f64f427f          MOV      r2,#0xfc7f
00002e  ea000002          AND      r0,r0,r2
;;;191      
;;;192      /* Set CCO, ASOE and ASOS bits according to BKP_RTCOutputSource value */
;;;193      tmpreg |= BKP_RTCOutputSource;
000032  ea400001          ORR      r0,r0,r1
;;;194      /* Store the new value */
;;;195      BKP->RTCCR = tmpreg;
000036  4a1f              LDR      r2,|L1.180|
000038  f8a20c2c          STRH     r0,[r2,#0xc2c]
;;;196    }
00003c  4770              BX       lr
;;;197    
                          ENDP

                  BKP_SetRTCCalibrationValue PROC
;;;203      */
;;;204    void BKP_SetRTCCalibrationValue(uint8_t CalibrationValue)
00003e  4601              MOV      r1,r0
;;;205    {
;;;206      uint16_t tmpreg = 0;
000040  2000              MOVS     r0,#0
;;;207      /* Check the parameters */
;;;208      assert_param(IS_BKP_CALIBRATION_VALUE(CalibrationValue));
;;;209      tmpreg = BKP->RTCCR;
000042  4a1b              LDR      r2,|L1.176|
000044  8810              LDRH     r0,[r2,#0]
;;;210      /* Clear CAL[6:0] bits */
;;;211      tmpreg &= RTCCR_CAL_Mask;
000046  f64f7280          MOV      r2,#0xff80
00004a  ea000002          AND      r0,r0,r2
;;;212      /* Set CAL[6:0] bits according to CalibrationValue value */
;;;213      tmpreg |= CalibrationValue;
00004e  ea400001          ORR      r0,r0,r1
;;;214      /* Store the new value */
;;;215      BKP->RTCCR = tmpreg;
000052  4a18              LDR      r2,|L1.180|
000054  f8a20c2c          STRH     r0,[r2,#0xc2c]
;;;216    }
000058  4770              BX       lr
;;;217    
                          ENDP

                  BKP_WriteBackupRegister PROC
;;;224      */
;;;225    void BKP_WriteBackupRegister(uint16_t BKP_DR, uint16_t Data)
00005a  2200              MOVS     r2,#0
;;;226    {
;;;227      __IO uint32_t tmp = 0;
;;;228    
;;;229      /* Check the parameters */
;;;230      assert_param(IS_BKP_DR(BKP_DR));
;;;231    
;;;232      tmp = (uint32_t)BKP_BASE; 
00005c  4a14              LDR      r2,|L1.176|
00005e  3a2c              SUBS     r2,r2,#0x2c
;;;233      tmp += BKP_DR;
000060  4402              ADD      r2,r2,r0
;;;234    
;;;235      *(__IO uint32_t *) tmp = Data;
000062  6011              STR      r1,[r2,#0]
;;;236    }
000064  4770              BX       lr
;;;237    
                          ENDP

                  BKP_ReadBackupRegister PROC
;;;243      */
;;;244    uint16_t BKP_ReadBackupRegister(uint16_t BKP_DR)
000066  4601              MOV      r1,r0
;;;245    {
;;;246      __IO uint32_t tmp = 0;
000068  2200              MOVS     r2,#0
;;;247    
;;;248      /* Check the parameters */
;;;249      assert_param(IS_BKP_DR(BKP_DR));
;;;250    
;;;251      tmp = (uint32_t)BKP_BASE; 
00006a  4a11              LDR      r2,|L1.176|
00006c  3a2c              SUBS     r2,r2,#0x2c
;;;252      tmp += BKP_DR;
00006e  440a              ADD      r2,r2,r1
;;;253    
;;;254      return (*(__IO uint16_t *) tmp);
000070  8810              LDRH     r0,[r2,#0]
;;;255    }
000072  4770              BX       lr
;;;256    
                          ENDP

                  BKP_GetFlagStatus PROC
;;;261      */
;;;262    FlagStatus BKP_GetFlagStatus(void)
000074  4810              LDR      r0,|L1.184|
;;;263    {
;;;264      return (FlagStatus)(*(__IO uint32_t *) CSR_TEF_BB);
000076  6800              LDR      r0,[r0,#0]
000078  b2c0              UXTB     r0,r0
;;;265    }
00007a  4770              BX       lr
;;;266    
                          ENDP

                  BKP_ClearFlag PROC
;;;271      */
;;;272    void BKP_ClearFlag(void)
00007c  480f              LDR      r0,|L1.188|
;;;273    {
;;;274      /* Set CTE bit to clear Tamper Pin Event flag */
;;;275      BKP->CSR |= CSR_CTE_Set;
00007e  8800              LDRH     r0,[r0,#0]
000080  f0400001          ORR      r0,r0,#1
000084  490b              LDR      r1,|L1.180|
000086  f8a10c34          STRH     r0,[r1,#0xc34]
;;;276    }
00008a  4770              BX       lr
;;;277    
                          ENDP

                  BKP_GetITStatus PROC
;;;282      */
;;;283    ITStatus BKP_GetITStatus(void)
00008c  480c              LDR      r0,|L1.192|
;;;284    {
;;;285      return (ITStatus)(*(__IO uint32_t *) CSR_TIF_BB);
00008e  6800              LDR      r0,[r0,#0]
000090  b2c0              UXTB     r0,r0
;;;286    }
000092  4770              BX       lr
;;;287    
                          ENDP

                  BKP_ClearITPendingBit PROC
;;;292      */
;;;293    void BKP_ClearITPendingBit(void)
000094  4809              LDR      r0,|L1.188|
;;;294    {
;;;295      /* Set CTI bit to clear Tamper Pin Interrupt pending bit */
;;;296      BKP->CSR |= CSR_CTI_Set;
000096  8800              LDRH     r0,[r0,#0]
000098  f0400002          ORR      r0,r0,#2
00009c  4905              LDR      r1,|L1.180|
00009e  f8a10c34          STRH     r0,[r1,#0xc34]
;;;297    }
0000a2  4770              BX       lr
;;;298    
                          ENDP

                  |L1.164|
                          DCD      0x420d8604
                  |L1.168|
                          DCD      0x420d8600
                  |L1.172|
                          DCD      0x420d8688
                  |L1.176|
                          DCD      0x40006c2c
                  |L1.180|
                          DCD      0x40006000
                  |L1.184|
                          DCD      0x420d86a0
                  |L1.188|
                          DCD      0x40006c34
                  |L1.192|
                          DCD      0x420d86a4
