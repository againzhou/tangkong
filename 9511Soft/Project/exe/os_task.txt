; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\os_task.o --depend=.\exe\os_task.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\os_task.crf ..\Source\OS\uCOS-II\Source\os_task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSTaskChangePrio PROC
;;;50     #if OS_TASK_CHANGE_PRIO_EN > 0
;;;51     INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;52     {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
000008  4688              MOV      r8,r1
;;;53     #if (OS_EVENT_EN)
;;;54         OS_EVENT  *pevent;
;;;55     #if (OS_EVENT_MULTI_EN > 0)
;;;56         OS_EVENT **pevents;
;;;57     #endif
;;;58     #endif
;;;59         OS_TCB    *ptcb;
;;;60         INT8U      y_new;
;;;61         INT8U      x_new;
;;;62         INT8U      y_old;
;;;63     #if OS_LOWEST_PRIO <= 63
;;;64         INT8U      bity_new;
;;;65         INT8U      bitx_new;
;;;66         INT8U      bity_old;
;;;67         INT8U      bitx_old;
;;;68     #else
;;;69         INT16U     bity_new;
;;;70         INT16U     bitx_new;
;;;71         INT16U     bity_old;
;;;72         INT16U     bitx_old;
;;;73     #endif
;;;74     #if OS_CRITICAL_METHOD == 3
;;;75         OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;76     #endif
;;;77     
;;;78     
;;;79     /*$PAGE*/
;;;80     #if OS_ARG_CHK_EN > 0
;;;81         if (oldprio >= OS_LOWEST_PRIO) {
00000e  f1b90f1f          CMP      r9,#0x1f
000012  db06              BLT      |L1.34|
;;;82             if (oldprio != OS_PRIO_SELF) {
000014  f1b90fff          CMP      r9,#0xff
000018  d003              BEQ      |L1.34|
;;;83                 return (OS_ERR_PRIO_INVALID);
00001a  202a              MOVS     r0,#0x2a
                  |L1.28|
;;;84             }
;;;85         }
;;;86         if (newprio >= OS_LOWEST_PRIO) {
;;;87             return (OS_ERR_PRIO_INVALID);
;;;88         }
;;;89     #endif
;;;90         OS_ENTER_CRITICAL();
;;;91         if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
;;;92             OS_EXIT_CRITICAL();
;;;93             return (OS_ERR_PRIO_EXIST);
;;;94         }
;;;95         if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
;;;96             oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
;;;97         }
;;;98         ptcb = OSTCBPrioTbl[oldprio];
;;;99         if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
;;;100            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;101            return (OS_ERR_PRIO);
;;;102        }
;;;103        if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
;;;104            OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
;;;105            return (OS_ERR_TASK_NOT_EXIST);
;;;106        }
;;;107    #if OS_LOWEST_PRIO <= 63
;;;108        y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
;;;109        x_new                 = (INT8U)(newprio & 0x07);
;;;110        bity_new              = (INT8U)(1 << y_new);
;;;111        bitx_new              = (INT8U)(1 << x_new);
;;;112    #else
;;;113        y_new                 = (INT8U)((newprio >> 4) & 0x0F);
;;;114        x_new                 = (INT8U)( newprio & 0x0F);
;;;115        bity_new              = (INT16U)(1 << y_new);
;;;116        bitx_new              = (INT16U)(1 << x_new);
;;;117    #endif
;;;118    
;;;119        OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
;;;120        OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
;;;121        y_old                 =  ptcb->OSTCBY;
;;;122        bity_old              =  ptcb->OSTCBBitY;
;;;123        bitx_old              =  ptcb->OSTCBBitX;
;;;124        if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
;;;125             OSRdyTbl[y_old] &= ~bitx_old;
;;;126             if (OSRdyTbl[y_old] == 0) {
;;;127                 OSRdyGrp &= ~bity_old;
;;;128             }
;;;129             OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
;;;130             OSRdyTbl[y_new] |= bitx_new;
;;;131        }
;;;132    
;;;133    #if (OS_EVENT_EN)
;;;134        pevent = ptcb->OSTCBEventPtr;
;;;135        if (pevent != (OS_EVENT *)0) {
;;;136            pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
;;;137            if (pevent->OSEventTbl[y_old] == 0) {
;;;138                pevent->OSEventGrp    &= ~bity_old;
;;;139            }
;;;140            pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
;;;141            pevent->OSEventTbl[y_new] |= bitx_new;
;;;142        }
;;;143    #if (OS_EVENT_MULTI_EN > 0)
;;;144        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
;;;145            pevents =  ptcb->OSTCBEventMultiPtr;
;;;146            pevent  = *pevents;
;;;147            while (pevent != (OS_EVENT *)0) {
;;;148                pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
;;;149                if (pevent->OSEventTbl[y_old] == 0) {
;;;150                    pevent->OSEventGrp    &= ~bity_old;
;;;151                }
;;;152                pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
;;;153                pevent->OSEventTbl[y_new] |= bitx_new;
;;;154                pevents++;
;;;155                pevent                     = *pevents;
;;;156            }
;;;157        }
;;;158    #endif
;;;159    #endif
;;;160    
;;;161        ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
;;;162        ptcb->OSTCBY    = y_new;
;;;163        ptcb->OSTCBX    = x_new;
;;;164        ptcb->OSTCBBitY = bity_new;
;;;165        ptcb->OSTCBBitX = bitx_new;
;;;166        OS_EXIT_CRITICAL();
;;;167        if (OSRunning == OS_TRUE) {
;;;168            OS_Sched();                                         /* Find new highest priority task          */
;;;169        }
;;;170        return (OS_ERR_NONE);
;;;171    }
00001c  b005              ADD      sp,sp,#0x14
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.34|
000022  f1b80f1f          CMP      r8,#0x1f              ;86
000026  db01              BLT      |L1.44|
000028  202a              MOVS     r0,#0x2a              ;87
00002a  e7f7              B        |L1.28|
                  |L1.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  9000              STR      r0,[sp,#0]            ;90
000032  48fb              LDR      r0,|L1.1056|
000034  f8500028          LDR      r0,[r0,r8,LSL #2]     ;91
000038  b120              CBZ      r0,|L1.68|
00003a  9800              LDR      r0,[sp,#0]            ;92
00003c  f7fffffe          BL       OS_CPU_SR_Restore
000040  2028              MOVS     r0,#0x28              ;93
000042  e7eb              B        |L1.28|
                  |L1.68|
000044  f1b90fff          CMP      r9,#0xff              ;95
000048  d103              BNE      |L1.82|
00004a  48f6              LDR      r0,|L1.1060|
00004c  6800              LDR      r0,[r0,#0]            ;96  ; OSTCBCur
00004e  f8909032          LDRB     r9,[r0,#0x32]         ;96
                  |L1.82|
000052  48f3              LDR      r0,|L1.1056|
000054  f8505029          LDR      r5,[r0,r9,LSL #2]     ;98
000058  b925              CBNZ     r5,|L1.100|
00005a  9800              LDR      r0,[sp,#0]            ;100
00005c  f7fffffe          BL       OS_CPU_SR_Restore
000060  2029              MOVS     r0,#0x29              ;101
000062  e7db              B        |L1.28|
                  |L1.100|
000064  2d01              CMP      r5,#1                 ;103
000066  d104              BNE      |L1.114|
000068  9800              LDR      r0,[sp,#0]            ;104
00006a  f7fffffe          BL       OS_CPU_SR_Restore
00006e  2043              MOVS     r0,#0x43              ;105
000070  e7d4              B        |L1.28|
                  |L1.114|
000072  ea4f07e8          ASR      r7,r8,#3              ;108
000076  f0080007          AND      r0,r8,#7              ;109
00007a  9003              STR      r0,[sp,#0xc]          ;109
00007c  2001              MOVS     r0,#1                 ;110
00007e  40b8              LSLS     r0,r0,r7              ;110
000080  f0000aff          AND      r10,r0,#0xff          ;110
000084  2101              MOVS     r1,#1                 ;111
000086  9803              LDR      r0,[sp,#0xc]          ;111
000088  4081              LSLS     r1,r1,r0              ;111
00008a  f0010bff          AND      r11,r1,#0xff          ;111
00008e  2000              MOVS     r0,#0                 ;119
000090  49e3              LDR      r1,|L1.1056|
000092  f8410029          STR      r0,[r1,r9,LSL #2]     ;119
000096  4608              MOV      r0,r1                 ;120
000098  f8405028          STR      r5,[r0,r8,LSL #2]     ;120
00009c  f8156f34          LDRB     r6,[r5,#0x34]!        ;121
0000a0  78a8              LDRB     r0,[r5,#2]            ;122
0000a2  9002              STR      r0,[sp,#8]            ;122
0000a4  7868              LDRB     r0,[r5,#1]            ;123
0000a6  f1a50534          SUB      r5,r5,#0x34           ;123
0000aa  9001              STR      r0,[sp,#4]            ;123
0000ac  48de              LDR      r0,|L1.1064|
0000ae  5d81              LDRB     r1,[r0,r6]            ;124
0000b0  9801              LDR      r0,[sp,#4]            ;124
0000b2  4201              TST      r1,r0                 ;124
0000b4  d01a              BEQ      |L1.236|
0000b6  48dc              LDR      r0,|L1.1064|
0000b8  5d80              LDRB     r0,[r0,r6]            ;125
0000ba  9901              LDR      r1,[sp,#4]            ;125
0000bc  4388              BICS     r0,r0,r1              ;125
0000be  49da              LDR      r1,|L1.1064|
0000c0  5588              STRB     r0,[r1,r6]            ;125
0000c2  4608              MOV      r0,r1                 ;126
0000c4  5d80              LDRB     r0,[r0,r6]            ;126
0000c6  b928              CBNZ     r0,|L1.212|
0000c8  48d8              LDR      r0,|L1.1068|
0000ca  7800              LDRB     r0,[r0,#0]            ;127  ; OSRdyGrp
0000cc  9902              LDR      r1,[sp,#8]            ;127
0000ce  4388              BICS     r0,r0,r1              ;127
0000d0  49d6              LDR      r1,|L1.1068|
0000d2  7008              STRB     r0,[r1,#0]            ;127
                  |L1.212|
0000d4  48d5              LDR      r0,|L1.1068|
0000d6  7800              LDRB     r0,[r0,#0]            ;129  ; OSRdyGrp
0000d8  ea40000a          ORR      r0,r0,r10             ;129
0000dc  49d3              LDR      r1,|L1.1068|
0000de  7008              STRB     r0,[r1,#0]            ;129
0000e0  48d1              LDR      r0,|L1.1064|
0000e2  5dc0              LDRB     r0,[r0,r7]            ;130
0000e4  ea40000b          ORR      r0,r0,r11             ;130
0000e8  49cf              LDR      r1,|L1.1064|
0000ea  55c8              STRB     r0,[r1,r7]            ;130
                  |L1.236|
0000ec  69ec              LDR      r4,[r5,#0x1c]         ;134
0000ee  b1d4              CBZ      r4,|L1.294|
0000f0  f104000b          ADD      r0,r4,#0xb            ;136
0000f4  5d80              LDRB     r0,[r0,r6]            ;136
0000f6  9901              LDR      r1,[sp,#4]            ;136
0000f8  4388              BICS     r0,r0,r1              ;136
0000fa  f104010b          ADD      r1,r4,#0xb            ;136
0000fe  5588              STRB     r0,[r1,r6]            ;136
000100  4608              MOV      r0,r1                 ;137
000102  5d80              LDRB     r0,[r0,r6]            ;137
000104  b918              CBNZ     r0,|L1.270|
000106  7aa0              LDRB     r0,[r4,#0xa]          ;138
000108  9902              LDR      r1,[sp,#8]            ;138
00010a  4388              BICS     r0,r0,r1              ;138
00010c  72a0              STRB     r0,[r4,#0xa]          ;138
                  |L1.270|
00010e  7aa0              LDRB     r0,[r4,#0xa]          ;140
000110  ea40000a          ORR      r0,r0,r10             ;140
000114  72a0              STRB     r0,[r4,#0xa]          ;140
000116  f104000b          ADD      r0,r4,#0xb            ;141
00011a  5dc0              LDRB     r0,[r0,r7]            ;141
00011c  ea40000b          ORR      r0,r0,r11             ;141
000120  f104010b          ADD      r1,r4,#0xb            ;141
000124  55c8              STRB     r0,[r1,r7]            ;141
                  |L1.294|
000126  6a28              LDR      r0,[r5,#0x20]         ;144
000128  b330              CBZ      r0,|L1.376|
00012a  6a28              LDR      r0,[r5,#0x20]         ;145
00012c  9004              STR      r0,[sp,#0x10]         ;145
00012e  9804              LDR      r0,[sp,#0x10]         ;146
000130  6804              LDR      r4,[r0,#0]            ;146
000132  e01f              B        |L1.372|
                  |L1.308|
000134  f104000b          ADD      r0,r4,#0xb            ;148
000138  5d80              LDRB     r0,[r0,r6]            ;148
00013a  9901              LDR      r1,[sp,#4]            ;148
00013c  4388              BICS     r0,r0,r1              ;148
00013e  f104010b          ADD      r1,r4,#0xb            ;148
000142  5588              STRB     r0,[r1,r6]            ;148
000144  4608              MOV      r0,r1                 ;149
000146  5d80              LDRB     r0,[r0,r6]            ;149
000148  b918              CBNZ     r0,|L1.338|
00014a  7aa0              LDRB     r0,[r4,#0xa]          ;150
00014c  9902              LDR      r1,[sp,#8]            ;150
00014e  4388              BICS     r0,r0,r1              ;150
000150  72a0              STRB     r0,[r4,#0xa]          ;150
                  |L1.338|
000152  7aa0              LDRB     r0,[r4,#0xa]          ;152
000154  ea40000a          ORR      r0,r0,r10             ;152
000158  72a0              STRB     r0,[r4,#0xa]          ;152
00015a  f104000b          ADD      r0,r4,#0xb            ;153
00015e  5dc0              LDRB     r0,[r0,r7]            ;153
000160  ea40000b          ORR      r0,r0,r11             ;153
000164  f104010b          ADD      r1,r4,#0xb            ;153
000168  55c8              STRB     r0,[r1,r7]            ;153
00016a  9804              LDR      r0,[sp,#0x10]         ;154
00016c  1d00              ADDS     r0,r0,#4              ;154
00016e  9004              STR      r0,[sp,#0x10]         ;154
000170  9804              LDR      r0,[sp,#0x10]         ;155
000172  6804              LDR      r4,[r0,#0]            ;155
                  |L1.372|
000174  2c00              CMP      r4,#0                 ;147
000176  d1dd              BNE      |L1.308|
                  |L1.376|
000178  f8858032          STRB     r8,[r5,#0x32]         ;161
00017c  f8857034          STRB     r7,[r5,#0x34]         ;162
000180  9803              LDR      r0,[sp,#0xc]          ;163
000182  f8850033          STRB     r0,[r5,#0x33]         ;163
000186  f885a036          STRB     r10,[r5,#0x36]        ;164
00018a  f885b035          STRB     r11,[r5,#0x35]        ;165
00018e  9800              LDR      r0,[sp,#0]            ;166
000190  f7fffffe          BL       OS_CPU_SR_Restore
000194  48a6              LDR      r0,|L1.1072|
000196  7800              LDRB     r0,[r0,#0]            ;167  ; OSRunning
000198  2801              CMP      r0,#1                 ;167
00019a  d101              BNE      |L1.416|
00019c  f7fffffe          BL       OS_Sched
                  |L1.416|
0001a0  2000              MOVS     r0,#0                 ;170
0001a2  e73b              B        |L1.28|
;;;172    #endif
                          ENDP

                  OSTaskCreate PROC
;;;214    #if OS_TASK_CREATE_EN > 0
;;;215    INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
0001a4  e92d4ffe          PUSH     {r1-r11,lr}
;;;216    {
0001a8  4606              MOV      r6,r0
0001aa  460f              MOV      r7,r1
0001ac  4690              MOV      r8,r2
0001ae  461c              MOV      r4,r3
;;;217        OS_STK    *psp;
;;;218        INT8U      err;
;;;219    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;220        OS_CPU_SR  cpu_sr = 0;
0001b0  f04f0900          MOV      r9,#0
;;;221    #endif
;;;222    
;;;223    
;;;224    
;;;225    #if OS_ARG_CHK_EN > 0
;;;226        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
0001b4  2c1f              CMP      r4,#0x1f
0001b6  dd02              BLE      |L1.446|
;;;227            return (OS_ERR_PRIO_INVALID);
0001b8  202a              MOVS     r0,#0x2a
                  |L1.442|
;;;228        }
;;;229    #endif
;;;230        OS_ENTER_CRITICAL();
;;;231        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;232            OS_EXIT_CRITICAL();
;;;233            return (OS_ERR_TASK_CREATE_ISR);
;;;234        }
;;;235        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;236            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;237                                                 /* ... the same thing until task is created.              */
;;;238            OS_EXIT_CRITICAL();
;;;239            psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
;;;240            err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
;;;241            if (err == OS_ERR_NONE) {
;;;242                if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
;;;243                    OS_Sched();
;;;244                }
;;;245            } else {
;;;246                OS_ENTER_CRITICAL();
;;;247                OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
;;;248                OS_EXIT_CRITICAL();
;;;249            }
;;;250            return (err);
;;;251        }
;;;252        OS_EXIT_CRITICAL();
;;;253        return (OS_ERR_PRIO_EXIST);
;;;254    }
0001ba  e8bd8ffe          POP      {r1-r11,pc}
                  |L1.446|
0001be  f7fffffe          BL       OS_CPU_SR_Save
0001c2  4681              MOV      r9,r0                 ;230
0001c4  489b              LDR      r0,|L1.1076|
0001c6  7800              LDRB     r0,[r0,#0]            ;231  ; OSIntNesting
0001c8  2800              CMP      r0,#0                 ;231
0001ca  dd04              BLE      |L1.470|
0001cc  4648              MOV      r0,r9                 ;232
0001ce  f7fffffe          BL       OS_CPU_SR_Restore
0001d2  203c              MOVS     r0,#0x3c              ;233
0001d4  e7f1              B        |L1.442|
                  |L1.470|
0001d6  4892              LDR      r0,|L1.1056|
0001d8  f8500024          LDR      r0,[r0,r4,LSL #2]     ;235
0001dc  bb58              CBNZ     r0,|L1.566|
0001de  2001              MOVS     r0,#1                 ;236
0001e0  498f              LDR      r1,|L1.1056|
0001e2  f8410024          STR      r0,[r1,r4,LSL #2]     ;236
0001e6  4648              MOV      r0,r9                 ;238
0001e8  f7fffffe          BL       OS_CPU_SR_Restore
0001ec  2300              MOVS     r3,#0                 ;239
0001ee  4642              MOV      r2,r8                 ;239
0001f0  4639              MOV      r1,r7                 ;239
0001f2  4630              MOV      r0,r6                 ;239
0001f4  f7fffffe          BL       OSTaskStkInit
0001f8  4682              MOV      r10,r0                ;239
0001fa  2300              MOVS     r3,#0                 ;240
0001fc  9300              STR      r3,[sp,#0]            ;240
0001fe  9301              STR      r3,[sp,#4]            ;240
000200  461a              MOV      r2,r3                 ;240
000202  4651              MOV      r1,r10                ;240
000204  4620              MOV      r0,r4                 ;240
000206  9302              STR      r3,[sp,#8]            ;240
000208  f7fffffe          BL       OS_TCBInit
00020c  4605              MOV      r5,r0                 ;240
00020e  b935              CBNZ     r5,|L1.542|
000210  4887              LDR      r0,|L1.1072|
000212  7800              LDRB     r0,[r0,#0]            ;242  ; OSRunning
000214  2801              CMP      r0,#1                 ;242
000216  d10c              BNE      |L1.562|
000218  f7fffffe          BL       OS_Sched
00021c  e009              B        |L1.562|
                  |L1.542|
00021e  f7fffffe          BL       OS_CPU_SR_Save
000222  4681              MOV      r9,r0                 ;246
000224  2000              MOVS     r0,#0                 ;247
000226  497e              LDR      r1,|L1.1056|
000228  f8410024          STR      r0,[r1,r4,LSL #2]     ;247
00022c  4648              MOV      r0,r9                 ;248
00022e  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.562|
000232  4628              MOV      r0,r5                 ;250
000234  e7c1              B        |L1.442|
                  |L1.566|
000236  4648              MOV      r0,r9                 ;252
000238  f7fffffe          BL       OS_CPU_SR_Restore
00023c  2028              MOVS     r0,#0x28              ;253
00023e  e7bc              B        |L1.442|
;;;255    #endif
                          ENDP

                  OS_TaskStkClr PROC
;;;1075   #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;1076   void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
000240  f0120f01          TST      r2,#1
;;;1077   {
;;;1078       if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
000244  d008              BEQ      |L1.600|
;;;1079           if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
000246  f0120f02          TST      r2,#2
00024a  d005              BEQ      |L1.600|
;;;1080   #if OS_STK_GROWTH == 1
;;;1081               while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
00024c  e002              B        |L1.596|
                  |L1.590|
;;;1082                   size--;
00024e  1e49              SUBS     r1,r1,#1
;;;1083                   *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
000250  2300              MOVS     r3,#0
000252  c008              STM      r0!,{r3}
                  |L1.596|
000254  2900              CMP      r1,#0                 ;1081
000256  d1fa              BNE      |L1.590|
                  |L1.600|
;;;1084               }
;;;1085   #else
;;;1086               while (size > 0) {                         /* Stack grows from LOW to HIGH memory          */
;;;1087                   size--;
;;;1088                   *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
;;;1089               }
;;;1090   #endif
;;;1091           }
;;;1092       }
;;;1093   }
000258  4770              BX       lr
;;;1094   
                          ENDP

                  OSTaskCreateExt PROC
;;;327    #if OS_TASK_CREATE_EXT_EN > 0
;;;328    INT8U  OSTaskCreateExt (void   (*task)(void *p_arg),
00025a  e92d4fff          PUSH     {r0-r11,lr}
;;;329                            void    *p_arg,
;;;330                            OS_STK  *ptos,
;;;331                            INT8U    prio,
;;;332                            INT16U   id,
;;;333                            OS_STK  *pbos,
;;;334                            INT32U   stk_size,
;;;335                            void    *pext,
;;;336                            INT16U   opt)
;;;337    {
00025e  b085              SUB      sp,sp,#0x14
000260  4680              MOV      r8,r0
000262  4689              MOV      r9,r1
000264  4692              MOV      r10,r2
000266  461c              MOV      r4,r3
000268  e9ddb612          LDRD     r11,r6,[sp,#0x48]
00026c  9f16              LDR      r7,[sp,#0x58]
;;;338        OS_STK    *psp;
;;;339        INT8U      err;
;;;340    #if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
;;;341        OS_CPU_SR  cpu_sr = 0;
00026e  2000              MOVS     r0,#0
000270  9003              STR      r0,[sp,#0xc]
;;;342    #endif
;;;343    
;;;344    
;;;345    
;;;346    #if OS_ARG_CHK_EN > 0
;;;347        if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
000272  2c1f              CMP      r4,#0x1f
000274  dd03              BLE      |L1.638|
;;;348            return (OS_ERR_PRIO_INVALID);
000276  202a              MOVS     r0,#0x2a
                  |L1.632|
;;;349        }
;;;350    #endif
;;;351        OS_ENTER_CRITICAL();
;;;352        if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
;;;353            OS_EXIT_CRITICAL();
;;;354            return (OS_ERR_TASK_CREATE_ISR);
;;;355        }
;;;356        if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
;;;357            OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
;;;358                                                 /* ... the same thing until task is created.              */
;;;359            OS_EXIT_CRITICAL();
;;;360    
;;;361    #if (OS_TASK_STAT_STK_CHK_EN > 0)
;;;362            OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
;;;363    #endif
;;;364    
;;;365            psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
;;;366            err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
;;;367            if (err == OS_ERR_NONE) {
;;;368                if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
;;;369                    OS_Sched();
;;;370                }
;;;371            } else {
;;;372                OS_ENTER_CRITICAL();
;;;373                OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
;;;374                OS_EXIT_CRITICAL();
;;;375            }
;;;376            return (err);
;;;377        }
;;;378        OS_EXIT_CRITICAL();
;;;379        return (OS_ERR_PRIO_EXIST);
;;;380    }
000278  b009              ADD      sp,sp,#0x24
00027a  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.638|
00027e  f7fffffe          BL       OS_CPU_SR_Save
000282  9003              STR      r0,[sp,#0xc]          ;351
000284  486b              LDR      r0,|L1.1076|
000286  7800              LDRB     r0,[r0,#0]            ;352  ; OSIntNesting
000288  2800              CMP      r0,#0                 ;352
00028a  dd04              BLE      |L1.662|
00028c  9803              LDR      r0,[sp,#0xc]          ;353
00028e  f7fffffe          BL       OS_CPU_SR_Restore
000292  203c              MOVS     r0,#0x3c              ;354
000294  e7f0              B        |L1.632|
                  |L1.662|
000296  4862              LDR      r0,|L1.1056|
000298  f8500024          LDR      r0,[r0,r4,LSL #2]     ;356
00029c  bb88              CBNZ     r0,|L1.770|
00029e  2001              MOVS     r0,#1                 ;357
0002a0  495f              LDR      r1,|L1.1056|
0002a2  f8410024          STR      r0,[r1,r4,LSL #2]     ;357
0002a6  9803              LDR      r0,[sp,#0xc]          ;359
0002a8  f7fffffe          BL       OS_CPU_SR_Restore
0002ac  463a              MOV      r2,r7                 ;362
0002ae  4630              MOV      r0,r6                 ;362
0002b0  9914              LDR      r1,[sp,#0x50]         ;362
0002b2  f7fffffe          BL       OS_TaskStkClr
0002b6  463b              MOV      r3,r7                 ;365
0002b8  4652              MOV      r2,r10                ;365
0002ba  4649              MOV      r1,r9                 ;365
0002bc  4640              MOV      r0,r8                 ;365
0002be  f7fffffe          BL       OSTaskStkInit
0002c2  9004              STR      r0,[sp,#0x10]         ;365
0002c4  e9dd1214          LDRD     r1,r2,[sp,#0x50]      ;366
0002c8  465b              MOV      r3,r11                ;366
0002ca  e88d0086          STM      sp,{r1,r2,r7}         ;366
0002ce  4632              MOV      r2,r6                 ;366
0002d0  4620              MOV      r0,r4                 ;366
0002d2  9904              LDR      r1,[sp,#0x10]         ;366
0002d4  f7fffffe          BL       OS_TCBInit
0002d8  4605              MOV      r5,r0                 ;366
0002da  b935              CBNZ     r5,|L1.746|
0002dc  4854              LDR      r0,|L1.1072|
0002de  7800              LDRB     r0,[r0,#0]            ;368  ; OSRunning
0002e0  2801              CMP      r0,#1                 ;368
0002e2  d10c              BNE      |L1.766|
0002e4  f7fffffe          BL       OS_Sched
0002e8  e009              B        |L1.766|
                  |L1.746|
0002ea  f7fffffe          BL       OS_CPU_SR_Save
0002ee  9003              STR      r0,[sp,#0xc]          ;372
0002f0  2000              MOVS     r0,#0                 ;373
0002f2  494b              LDR      r1,|L1.1056|
0002f4  f8410024          STR      r0,[r1,r4,LSL #2]     ;373
0002f8  9803              LDR      r0,[sp,#0xc]          ;374
0002fa  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.766|
0002fe  4628              MOV      r0,r5                 ;376
000300  e7ba              B        |L1.632|
                  |L1.770|
000302  e7ff              B        |L1.772|
                  |L1.772|
000304  9803              LDR      r0,[sp,#0xc]          ;378
000306  f7fffffe          BL       OS_CPU_SR_Restore
00030a  2028              MOVS     r0,#0x28              ;379
00030c  e7b4              B        |L1.632|
;;;381    #endif
                          ENDP

                  OSTaskDel PROC
;;;419    #if OS_TASK_DEL_EN > 0
;;;420    INT8U  OSTaskDel (INT8U prio)
00030e  e92d41f0          PUSH     {r4-r8,lr}
;;;421    {
000312  4605              MOV      r5,r0
;;;422    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;423        OS_FLAG_NODE *pnode;
;;;424    #endif
;;;425        OS_TCB       *ptcb;
;;;426    #if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
;;;427        OS_CPU_SR     cpu_sr = 0;
000314  2700              MOVS     r7,#0
;;;428    #endif
;;;429    
;;;430    
;;;431    
;;;432        if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
000316  4847              LDR      r0,|L1.1076|
000318  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00031a  2800              CMP      r0,#0
00031c  dd02              BLE      |L1.804|
;;;433            return (OS_ERR_TASK_DEL_ISR);
00031e  2040              MOVS     r0,#0x40
                  |L1.800|
;;;434        }
;;;435        if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
;;;436            return (OS_ERR_TASK_DEL_IDLE);
;;;437        }
;;;438    #if OS_ARG_CHK_EN > 0
;;;439        if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
;;;440            if (prio != OS_PRIO_SELF) {
;;;441                return (OS_ERR_PRIO_INVALID);
;;;442            }
;;;443        }
;;;444    #endif
;;;445    
;;;446    /*$PAGE*/
;;;447        OS_ENTER_CRITICAL();
;;;448        if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
;;;449            prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
;;;450        }
;;;451        ptcb = OSTCBPrioTbl[prio];
;;;452        if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
;;;453            OS_EXIT_CRITICAL();
;;;454            return (OS_ERR_TASK_NOT_EXIST);
;;;455        }
;;;456        if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
;;;457            OS_EXIT_CRITICAL();
;;;458            return (OS_ERR_TASK_DEL);
;;;459        }
;;;460    
;;;461        OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
;;;462        if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
;;;463            OSRdyGrp           &= ~ptcb->OSTCBBitY;
;;;464        }
;;;465        
;;;466    #if (OS_EVENT_EN)
;;;467        if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
;;;468            OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
;;;469        }
;;;470    #if (OS_EVENT_MULTI_EN > 0)
;;;471        if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
;;;472            OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
;;;473        }
;;;474    #endif
;;;475    #endif
;;;476    
;;;477    #if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
;;;478        pnode = ptcb->OSTCBFlagNode;
;;;479        if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
;;;480            OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
;;;481        }
;;;482    #endif
;;;483    
;;;484        ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
;;;485        ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
;;;486        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
;;;487        if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
;;;488            OSLockNesting++;
;;;489        }
;;;490        OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
;;;491        OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
;;;492        OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
;;;493        if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
;;;494            OSLockNesting--;
;;;495        }
;;;496        OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
;;;497        OSTaskCtr--;                                        /* One less task being managed                 */
;;;498        OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
;;;499        if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
;;;500            ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
;;;501            OSTCBList                  = ptcb->OSTCBNext;
;;;502        } else {
;;;503            ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
;;;504            ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
;;;505        }
;;;506        ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
;;;507        OSTCBFreeList     = ptcb;
;;;508    #if OS_TASK_NAME_SIZE > 1
;;;509        ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
;;;510        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
;;;511    #endif
;;;512        OS_EXIT_CRITICAL();
;;;513        if (OSRunning == OS_TRUE) {
;;;514            OS_Sched();                                     /* Find new highest priority task              */
;;;515        }
;;;516        return (OS_ERR_NONE);
;;;517    }
000320  e8bd81f0          POP      {r4-r8,pc}
                  |L1.804|
000324  2d1f              CMP      r5,#0x1f              ;435
000326  d101              BNE      |L1.812|
000328  203e              MOVS     r0,#0x3e              ;436
00032a  e7f9              B        |L1.800|
                  |L1.812|
00032c  2d1f              CMP      r5,#0x1f              ;439
00032e  db03              BLT      |L1.824|
000330  2dff              CMP      r5,#0xff              ;440
000332  d001              BEQ      |L1.824|
000334  202a              MOVS     r0,#0x2a              ;441
000336  e7f3              B        |L1.800|
                  |L1.824|
000338  f7fffffe          BL       OS_CPU_SR_Save
00033c  4607              MOV      r7,r0                 ;447
00033e  2dff              CMP      r5,#0xff              ;448
000340  d103              BNE      |L1.842|
000342  4838              LDR      r0,|L1.1060|
000344  6800              LDR      r0,[r0,#0]            ;449  ; OSTCBCur
000346  f8905032          LDRB     r5,[r0,#0x32]         ;449
                  |L1.842|
00034a  4835              LDR      r0,|L1.1056|
00034c  f8504025          LDR      r4,[r0,r5,LSL #2]     ;451
000350  b924              CBNZ     r4,|L1.860|
000352  4638              MOV      r0,r7                 ;453
000354  f7fffffe          BL       OS_CPU_SR_Restore
000358  2043              MOVS     r0,#0x43              ;454
00035a  e7e1              B        |L1.800|
                  |L1.860|
00035c  2c01              CMP      r4,#1                 ;456
00035e  d104              BNE      |L1.874|
000360  4638              MOV      r0,r7                 ;457
000362  f7fffffe          BL       OS_CPU_SR_Restore
000366  203d              MOVS     r0,#0x3d              ;458
000368  e7da              B        |L1.800|
                  |L1.874|
00036a  f8140f34          LDRB     r0,[r4,#0x34]!        ;461
00036e  492e              LDR      r1,|L1.1064|
000370  5c08              LDRB     r0,[r1,r0]            ;461
000372  7861              LDRB     r1,[r4,#1]            ;461
000374  4388              BICS     r0,r0,r1              ;461
000376  7821              LDRB     r1,[r4,#0]            ;461
000378  4a2b              LDR      r2,|L1.1064|
00037a  5450              STRB     r0,[r2,r1]            ;461
00037c  f8140934          LDRB     r0,[r4],#-0x34        ;462
000380  4611              MOV      r1,r2                 ;462
000382  5c08              LDRB     r0,[r1,r0]            ;462
000384  b930              CBNZ     r0,|L1.916|
000386  f8941036          LDRB     r1,[r4,#0x36]         ;463
00038a  4828              LDR      r0,|L1.1068|
00038c  7800              LDRB     r0,[r0,#0]            ;463  ; OSRdyGrp
00038e  4388              BICS     r0,r0,r1              ;463
000390  4926              LDR      r1,|L1.1068|
000392  7008              STRB     r0,[r1,#0]            ;463
                  |L1.916|
000394  69e0              LDR      r0,[r4,#0x1c]         ;467
000396  b118              CBZ      r0,|L1.928|
000398  4620              MOV      r0,r4                 ;468
00039a  69e1              LDR      r1,[r4,#0x1c]         ;468
00039c  f7fffffe          BL       OS_EventTaskRemove
                  |L1.928|
0003a0  6a20              LDR      r0,[r4,#0x20]         ;471
0003a2  b118              CBZ      r0,|L1.940|
0003a4  4620              MOV      r0,r4                 ;472
0003a6  6a21              LDR      r1,[r4,#0x20]         ;472
0003a8  f7fffffe          BL       OS_EventTaskRemoveMulti
                  |L1.940|
0003ac  6aa6              LDR      r6,[r4,#0x28]         ;478
0003ae  b116              CBZ      r6,|L1.950|
0003b0  4630              MOV      r0,r6                 ;480
0003b2  f7fffffe          BL       OS_FlagUnlink
                  |L1.950|
0003b6  2000              MOVS     r0,#0                 ;484
0003b8  85e0              STRH     r0,[r4,#0x2e]         ;484
0003ba  f8840030          STRB     r0,[r4,#0x30]         ;485
0003be  f8840031          STRB     r0,[r4,#0x31]         ;486
0003c2  481d              LDR      r0,|L1.1080|
0003c4  7800              LDRB     r0,[r0,#0]            ;487  ; OSLockNesting
0003c6  28ff              CMP      r0,#0xff              ;487
0003c8  d204              BCS      |L1.980|
0003ca  481b              LDR      r0,|L1.1080|
0003cc  7800              LDRB     r0,[r0,#0]            ;488  ; OSLockNesting
0003ce  1c40              ADDS     r0,r0,#1              ;488
0003d0  4919              LDR      r1,|L1.1080|
0003d2  7008              STRB     r0,[r1,#0]            ;488
                  |L1.980|
0003d4  4638              MOV      r0,r7                 ;490
0003d6  f7fffffe          BL       OS_CPU_SR_Restore
0003da  f7fffffe          BL       OS_Dummy
0003de  f7fffffe          BL       OS_CPU_SR_Save
0003e2  4607              MOV      r7,r0                 ;492
0003e4  4814              LDR      r0,|L1.1080|
0003e6  7800              LDRB     r0,[r0,#0]            ;493  ; OSLockNesting
0003e8  2800              CMP      r0,#0                 ;493
0003ea  dd04              BLE      |L1.1014|
0003ec  4812              LDR      r0,|L1.1080|
0003ee  7800              LDRB     r0,[r0,#0]            ;494  ; OSLockNesting
0003f0  1e40              SUBS     r0,r0,#1              ;494
0003f2  4911              LDR      r1,|L1.1080|
0003f4  7008              STRB     r0,[r1,#0]            ;494
                  |L1.1014|
0003f6  4620              MOV      r0,r4                 ;496
0003f8  f7fffffe          BL       OSTaskDelHook
0003fc  480f              LDR      r0,|L1.1084|
0003fe  7800              LDRB     r0,[r0,#0]            ;497  ; OSTaskCtr
000400  1e40              SUBS     r0,r0,#1              ;497
000402  490e              LDR      r1,|L1.1084|
000404  7008              STRB     r0,[r1,#0]            ;497
000406  2000              MOVS     r0,#0                 ;498
000408  4905              LDR      r1,|L1.1056|
00040a  f8410025          STR      r0,[r1,r5,LSL #2]     ;498
00040e  69a0              LDR      r0,[r4,#0x18]         ;499
000410  b9c0              CBNZ     r0,|L1.1092|
000412  2000              MOVS     r0,#0                 ;500
000414  6961              LDR      r1,[r4,#0x14]         ;500
000416  6188              STR      r0,[r1,#0x18]         ;500
000418  4909              LDR      r1,|L1.1088|
00041a  6960              LDR      r0,[r4,#0x14]         ;501
00041c  6008              STR      r0,[r1,#0]            ;501  ; OSTCBList
00041e  e017              B        |L1.1104|
                  |L1.1056|
                          DCD      OSTCBPrioTbl
                  |L1.1060|
                          DCD      OSTCBCur
                  |L1.1064|
                          DCD      OSRdyTbl
                  |L1.1068|
                          DCD      OSRdyGrp
                  |L1.1072|
                          DCD      OSRunning
                  |L1.1076|
                          DCD      OSIntNesting
                  |L1.1080|
                          DCD      OSLockNesting
                  |L1.1084|
                          DCD      OSTaskCtr
                  |L1.1088|
                          DCD      OSTCBList
                  |L1.1092|
000444  e9d40105          LDRD     r0,r1,[r4,#0x14]      ;503
000448  6148              STR      r0,[r1,#0x14]         ;503
00044a  e9d41005          LDRD     r1,r0,[r4,#0x14]      ;504
00044e  6188              STR      r0,[r1,#0x18]         ;504
                  |L1.1104|
000450  48fe              LDR      r0,|L1.2124|
000452  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBFreeList
000454  6160              STR      r0,[r4,#0x14]         ;506
000456  48fd              LDR      r0,|L1.2124|
000458  6004              STR      r4,[r0,#0]            ;507  ; OSTCBFreeList
00045a  203f              MOVS     r0,#0x3f              ;509
00045c  f884004c          STRB     r0,[r4,#0x4c]         ;509
000460  2100              MOVS     r1,#0                 ;510
000462  204d              MOVS     r0,#0x4d              ;510
000464  5501              STRB     r1,[r0,r4]            ;510
000466  4638              MOV      r0,r7                 ;512
000468  f7fffffe          BL       OS_CPU_SR_Restore
00046c  48f8              LDR      r0,|L1.2128|
00046e  7800              LDRB     r0,[r0,#0]            ;513  ; OSRunning
000470  2801              CMP      r0,#1                 ;513
000472  d101              BNE      |L1.1144|
000474  f7fffffe          BL       OS_Sched
                  |L1.1144|
000478  2000              MOVS     r0,#0                 ;516
00047a  e751              B        |L1.800|
;;;518    #endif
                          ENDP

                  OSTaskDelReq PROC
;;;566    #if OS_TASK_DEL_EN > 0
;;;567    INT8U  OSTaskDelReq (INT8U prio)
00047c  e92d41f0          PUSH     {r4-r8,lr}
;;;568    {
000480  4604              MOV      r4,r0
;;;569        INT8U      stat;
;;;570        OS_TCB    *ptcb;
;;;571    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;572        OS_CPU_SR  cpu_sr = 0;
000482  2700              MOVS     r7,#0
;;;573    #endif
;;;574    
;;;575    
;;;576    
;;;577        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
000484  2c1f              CMP      r4,#0x1f
000486  d102              BNE      |L1.1166|
;;;578            return (OS_ERR_TASK_DEL_IDLE);
000488  203e              MOVS     r0,#0x3e
                  |L1.1162|
;;;579        }
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;582            if (prio != OS_PRIO_SELF) {
;;;583                return (OS_ERR_PRIO_INVALID);
;;;584            }
;;;585        }
;;;586    #endif
;;;587        if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
;;;588            OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
;;;589            stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
;;;590            OS_EXIT_CRITICAL();
;;;591            return (stat);
;;;592        }
;;;593        OS_ENTER_CRITICAL();
;;;594        ptcb = OSTCBPrioTbl[prio];
;;;595        if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
;;;596            OS_EXIT_CRITICAL();
;;;597            return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
;;;598        }
;;;599        if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
;;;600            OS_EXIT_CRITICAL();
;;;601            return (OS_ERR_TASK_DEL);
;;;602        }
;;;603        ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
;;;604        OS_EXIT_CRITICAL();
;;;605        return (OS_ERR_NONE);
;;;606    }
00048a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1166|
00048e  2c1f              CMP      r4,#0x1f              ;581
000490  db03              BLT      |L1.1178|
000492  2cff              CMP      r4,#0xff              ;582
000494  d001              BEQ      |L1.1178|
000496  202a              MOVS     r0,#0x2a              ;583
000498  e7f7              B        |L1.1162|
                  |L1.1178|
00049a  2cff              CMP      r4,#0xff              ;587
00049c  d10b              BNE      |L1.1206|
00049e  f7fffffe          BL       OS_CPU_SR_Save
0004a2  4607              MOV      r7,r0                 ;588
0004a4  48eb              LDR      r0,|L1.2132|
0004a6  6800              LDR      r0,[r0,#0]            ;589  ; OSTCBCur
0004a8  f8906037          LDRB     r6,[r0,#0x37]         ;589
0004ac  4638              MOV      r0,r7                 ;590
0004ae  f7fffffe          BL       OS_CPU_SR_Restore
0004b2  4630              MOV      r0,r6                 ;591
0004b4  e7e9              B        |L1.1162|
                  |L1.1206|
0004b6  f7fffffe          BL       OS_CPU_SR_Save
0004ba  4607              MOV      r7,r0                 ;593
0004bc  48e6              LDR      r0,|L1.2136|
0004be  f8505024          LDR      r5,[r0,r4,LSL #2]     ;594
0004c2  b925              CBNZ     r5,|L1.1230|
0004c4  4638              MOV      r0,r7                 ;596
0004c6  f7fffffe          BL       OS_CPU_SR_Restore
0004ca  2043              MOVS     r0,#0x43              ;597
0004cc  e7dd              B        |L1.1162|
                  |L1.1230|
0004ce  2d01              CMP      r5,#1                 ;599
0004d0  d104              BNE      |L1.1244|
0004d2  4638              MOV      r0,r7                 ;600
0004d4  f7fffffe          BL       OS_CPU_SR_Restore
0004d8  203d              MOVS     r0,#0x3d              ;601
0004da  e7d6              B        |L1.1162|
                  |L1.1244|
0004dc  203f              MOVS     r0,#0x3f              ;603
0004de  f8850037          STRB     r0,[r5,#0x37]         ;603
0004e2  4638              MOV      r0,r7                 ;604
0004e4  f7fffffe          BL       OS_CPU_SR_Restore
0004e8  2000              MOVS     r0,#0                 ;605
0004ea  e7ce              B        |L1.1162|
;;;607    #endif
                          ENDP

                  OSTaskNameGet PROC
;;;634    #if OS_TASK_NAME_SIZE > 1
;;;635    INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
0004ec  e92d47f0          PUSH     {r4-r10,lr}
;;;636    {
0004f0  4605              MOV      r5,r0
0004f2  460f              MOV      r7,r1
0004f4  4614              MOV      r4,r2
;;;637        OS_TCB    *ptcb;
;;;638        INT8U      len;
;;;639    #if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
;;;640        OS_CPU_SR  cpu_sr = 0;
0004f6  f04f0800          MOV      r8,#0
;;;641    #endif
;;;642    
;;;643    
;;;644    
;;;645    #if OS_ARG_CHK_EN > 0
;;;646        if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
0004fa  b914              CBNZ     r4,|L1.1282|
;;;647            return (0);
0004fc  2000              MOVS     r0,#0
                  |L1.1278|
;;;648        }
;;;649        if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
;;;650            if (prio != OS_PRIO_SELF) {
;;;651                *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
;;;652                return (0);
;;;653            }
;;;654        }
;;;655        if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
;;;656            *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
;;;657            return (0);
;;;658        }
;;;659    #endif
;;;660        if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
;;;661            *perr = OS_ERR_NAME_GET_ISR;
;;;662            return (0);
;;;663        }
;;;664        OS_ENTER_CRITICAL();
;;;665        if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
;;;666            prio = OSTCBCur->OSTCBPrio;
;;;667        }
;;;668        ptcb = OSTCBPrioTbl[prio];
;;;669        if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
;;;670            OS_EXIT_CRITICAL();                              /* No                                         */
;;;671            *perr = OS_ERR_TASK_NOT_EXIST;
;;;672            return (0);
;;;673        }
;;;674        if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
;;;675            OS_EXIT_CRITICAL();                              /* Yes                                        */
;;;676            *perr = OS_ERR_TASK_NOT_EXIST;
;;;677            return (0);
;;;678        }
;;;679        len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
;;;680        OS_EXIT_CRITICAL();
;;;681        *perr = OS_ERR_NONE;
;;;682        return (len);
;;;683    }
0004fe  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1282|
000502  2d1f              CMP      r5,#0x1f              ;649
000504  dd05              BLE      |L1.1298|
000506  2dff              CMP      r5,#0xff              ;650
000508  d003              BEQ      |L1.1298|
00050a  202a              MOVS     r0,#0x2a              ;651
00050c  7020              STRB     r0,[r4,#0]            ;651
00050e  2000              MOVS     r0,#0                 ;652
000510  e7f5              B        |L1.1278|
                  |L1.1298|
000512  b91f              CBNZ     r7,|L1.1308|
000514  200c              MOVS     r0,#0xc               ;656
000516  7020              STRB     r0,[r4,#0]            ;656
000518  2000              MOVS     r0,#0                 ;657
00051a  e7f0              B        |L1.1278|
                  |L1.1308|
00051c  48cf              LDR      r0,|L1.2140|
00051e  7800              LDRB     r0,[r0,#0]            ;660  ; OSIntNesting
000520  2800              CMP      r0,#0                 ;660
000522  dd03              BLE      |L1.1324|
000524  2011              MOVS     r0,#0x11              ;661
000526  7020              STRB     r0,[r4,#0]            ;661
000528  2000              MOVS     r0,#0                 ;662
00052a  e7e8              B        |L1.1278|
                  |L1.1324|
00052c  f7fffffe          BL       OS_CPU_SR_Save
000530  4680              MOV      r8,r0                 ;664
000532  2dff              CMP      r5,#0xff              ;665
000534  d103              BNE      |L1.1342|
000536  48c7              LDR      r0,|L1.2132|
000538  6800              LDR      r0,[r0,#0]            ;666  ; OSTCBCur
00053a  f8905032          LDRB     r5,[r0,#0x32]         ;666
                  |L1.1342|
00053e  48c6              LDR      r0,|L1.2136|
000540  f8506025          LDR      r6,[r0,r5,LSL #2]     ;668
000544  b936              CBNZ     r6,|L1.1364|
000546  4640              MOV      r0,r8                 ;670
000548  f7fffffe          BL       OS_CPU_SR_Restore
00054c  2043              MOVS     r0,#0x43              ;671
00054e  7020              STRB     r0,[r4,#0]            ;671
000550  2000              MOVS     r0,#0                 ;672
000552  e7d4              B        |L1.1278|
                  |L1.1364|
000554  2e01              CMP      r6,#1                 ;674
000556  d106              BNE      |L1.1382|
000558  4640              MOV      r0,r8                 ;675
00055a  f7fffffe          BL       OS_CPU_SR_Restore
00055e  2043              MOVS     r0,#0x43              ;676
000560  7020              STRB     r0,[r4,#0]            ;676
000562  2000              MOVS     r0,#0                 ;677
000564  e7cb              B        |L1.1278|
                  |L1.1382|
000566  f106014c          ADD      r1,r6,#0x4c           ;679
00056a  4638              MOV      r0,r7                 ;679
00056c  f7fffffe          BL       OS_StrCopy
000570  4681              MOV      r9,r0                 ;679
000572  4640              MOV      r0,r8                 ;680
000574  f7fffffe          BL       OS_CPU_SR_Restore
000578  2000              MOVS     r0,#0                 ;681
00057a  7020              STRB     r0,[r4,#0]            ;681
00057c  4648              MOV      r0,r9                 ;682
00057e  e7be              B        |L1.1278|
;;;684    #endif
                          ENDP

                  OSTaskNameSet PROC
;;;713    #if OS_TASK_NAME_SIZE > 1
;;;714    void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
000580  e92d47f0          PUSH     {r4-r10,lr}
;;;715    {
000584  4605              MOV      r5,r0
000586  460f              MOV      r7,r1
000588  4614              MOV      r4,r2
;;;716        INT8U      len;
;;;717        OS_TCB    *ptcb;
;;;718    #if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
;;;719        OS_CPU_SR  cpu_sr = 0;
00058a  f04f0900          MOV      r9,#0
;;;720    #endif
;;;721    
;;;722    
;;;723    
;;;724    #if OS_ARG_CHK_EN > 0
;;;725        if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
00058e  b90c              CBNZ     r4,|L1.1428|
                  |L1.1424|
;;;726            return;
;;;727        }
;;;728        if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
;;;729            if (prio != OS_PRIO_SELF) {
;;;730                *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
;;;731                return;
;;;732            }
;;;733        }
;;;734        if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
;;;735            *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
;;;736            return;
;;;737        }
;;;738    #endif
;;;739        if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
;;;740            *perr = OS_ERR_NAME_SET_ISR;
;;;741            return;
;;;742        }
;;;743        OS_ENTER_CRITICAL();
;;;744        if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
;;;745            prio = OSTCBCur->OSTCBPrio;
;;;746        }
;;;747        ptcb = OSTCBPrioTbl[prio];
;;;748        if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
;;;749            OS_EXIT_CRITICAL();                          /* No                                             */
;;;750            *perr = OS_ERR_TASK_NOT_EXIST;
;;;751            return;
;;;752        }
;;;753        if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
;;;754            OS_EXIT_CRITICAL();                          /* Yes                                            */
;;;755            *perr = OS_ERR_TASK_NOT_EXIST;
;;;756            return;
;;;757        }
;;;758        len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
;;;759        if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
;;;760            OS_EXIT_CRITICAL();
;;;761            *perr = OS_ERR_TASK_NAME_TOO_LONG;
;;;762            return;
;;;763        }
;;;764        (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
;;;765        OS_EXIT_CRITICAL();
;;;766        *perr = OS_ERR_NONE;
;;;767    }
000590  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1428|
000594  2d1f              CMP      r5,#0x1f              ;728
000596  dd04              BLE      |L1.1442|
000598  2dff              CMP      r5,#0xff              ;729
00059a  d002              BEQ      |L1.1442|
00059c  202a              MOVS     r0,#0x2a              ;730
00059e  7020              STRB     r0,[r4,#0]            ;730
0005a0  e7f6              B        |L1.1424|
                  |L1.1442|
0005a2  b917              CBNZ     r7,|L1.1450|
0005a4  200c              MOVS     r0,#0xc               ;735
0005a6  7020              STRB     r0,[r4,#0]            ;735
0005a8  e7f2              B        |L1.1424|
                  |L1.1450|
0005aa  48ac              LDR      r0,|L1.2140|
0005ac  7800              LDRB     r0,[r0,#0]            ;739  ; OSIntNesting
0005ae  2800              CMP      r0,#0                 ;739
0005b0  dd02              BLE      |L1.1464|
0005b2  2012              MOVS     r0,#0x12              ;740
0005b4  7020              STRB     r0,[r4,#0]            ;740
0005b6  e7eb              B        |L1.1424|
                  |L1.1464|
0005b8  f7fffffe          BL       OS_CPU_SR_Save
0005bc  4681              MOV      r9,r0                 ;743
0005be  2dff              CMP      r5,#0xff              ;744
0005c0  d103              BNE      |L1.1482|
0005c2  48a4              LDR      r0,|L1.2132|
0005c4  6800              LDR      r0,[r0,#0]            ;745  ; OSTCBCur
0005c6  f8905032          LDRB     r5,[r0,#0x32]         ;745
                  |L1.1482|
0005ca  48a3              LDR      r0,|L1.2136|
0005cc  f8506025          LDR      r6,[r0,r5,LSL #2]     ;747
0005d0  b92e              CBNZ     r6,|L1.1502|
0005d2  4648              MOV      r0,r9                 ;749
0005d4  f7fffffe          BL       OS_CPU_SR_Restore
0005d8  2043              MOVS     r0,#0x43              ;750
0005da  7020              STRB     r0,[r4,#0]            ;750
0005dc  e7d8              B        |L1.1424|
                  |L1.1502|
0005de  2e01              CMP      r6,#1                 ;753
0005e0  d105              BNE      |L1.1518|
0005e2  4648              MOV      r0,r9                 ;754
0005e4  f7fffffe          BL       OS_CPU_SR_Restore
0005e8  2043              MOVS     r0,#0x43              ;755
0005ea  7020              STRB     r0,[r4,#0]            ;755
0005ec  e7d0              B        |L1.1424|
                  |L1.1518|
0005ee  4638              MOV      r0,r7                 ;758
0005f0  f7fffffe          BL       OS_StrLen
0005f4  4680              MOV      r8,r0                 ;758
0005f6  f1b80f0f          CMP      r8,#0xf               ;759
0005fa  dd05              BLE      |L1.1544|
0005fc  4648              MOV      r0,r9                 ;760
0005fe  f7fffffe          BL       OS_CPU_SR_Restore
000602  2041              MOVS     r0,#0x41              ;761
000604  7020              STRB     r0,[r4,#0]            ;761
000606  e7c3              B        |L1.1424|
                  |L1.1544|
000608  4639              MOV      r1,r7                 ;764
00060a  f106004c          ADD      r0,r6,#0x4c           ;764
00060e  f7fffffe          BL       OS_StrCopy
000612  4648              MOV      r0,r9                 ;765
000614  f7fffffe          BL       OS_CPU_SR_Restore
000618  2000              MOVS     r0,#0                 ;766
00061a  7020              STRB     r0,[r4,#0]            ;766
00061c  bf00              NOP      
00061e  e7b7              B        |L1.1424|
;;;768    #endif
                          ENDP

                  OSTaskResume PROC
;;;789    #if OS_TASK_SUSPEND_EN > 0
;;;790    INT8U  OSTaskResume (INT8U prio)
000620  b570              PUSH     {r4-r6,lr}
;;;791    {
000622  4605              MOV      r5,r0
;;;792        OS_TCB    *ptcb;
;;;793    #if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
;;;794        OS_CPU_SR  cpu_sr = 0;
000624  2600              MOVS     r6,#0
;;;795    #endif
;;;796    
;;;797    
;;;798    
;;;799    #if OS_ARG_CHK_EN > 0
;;;800        if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
000626  2d1f              CMP      r5,#0x1f
000628  db01              BLT      |L1.1582|
;;;801            return (OS_ERR_PRIO_INVALID);
00062a  202a              MOVS     r0,#0x2a
                  |L1.1580|
;;;802        }
;;;803    #endif
;;;804        OS_ENTER_CRITICAL();
;;;805        ptcb = OSTCBPrioTbl[prio];
;;;806        if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
;;;807            OS_EXIT_CRITICAL();
;;;808            return (OS_ERR_TASK_RESUME_PRIO);
;;;809        }
;;;810        if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
;;;811            OS_EXIT_CRITICAL();
;;;812            return (OS_ERR_TASK_NOT_EXIST);
;;;813        }
;;;814        if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
;;;815            ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
;;;816            if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
;;;817                if (ptcb->OSTCBDly == 0) {
;;;818                    OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
;;;819                    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
;;;820                    OS_EXIT_CRITICAL();
;;;821                    if (OSRunning == OS_TRUE) {
;;;822                        OS_Sched();                               /* Find new highest priority task        */
;;;823                    }
;;;824                } else {
;;;825                    OS_EXIT_CRITICAL();
;;;826                }
;;;827            } else {                                              /* Must be pending on event              */
;;;828                OS_EXIT_CRITICAL();
;;;829            }
;;;830            return (OS_ERR_NONE);
;;;831        }
;;;832        OS_EXIT_CRITICAL();
;;;833        return (OS_ERR_TASK_NOT_SUSPENDED);
;;;834    }
00062c  bd70              POP      {r4-r6,pc}
                  |L1.1582|
00062e  f7fffffe          BL       OS_CPU_SR_Save
000632  4606              MOV      r6,r0                 ;804
000634  4888              LDR      r0,|L1.2136|
000636  f8504025          LDR      r4,[r0,r5,LSL #2]     ;805
00063a  b924              CBNZ     r4,|L1.1606|
00063c  4630              MOV      r0,r6                 ;807
00063e  f7fffffe          BL       OS_CPU_SR_Restore
000642  2046              MOVS     r0,#0x46              ;808
000644  e7f2              B        |L1.1580|
                  |L1.1606|
000646  2c01              CMP      r4,#1                 ;810
000648  d104              BNE      |L1.1620|
00064a  4630              MOV      r0,r6                 ;811
00064c  f7fffffe          BL       OS_CPU_SR_Restore
000650  2043              MOVS     r0,#0x43              ;812
000652  e7eb              B        |L1.1580|
                  |L1.1620|
000654  f8940030          LDRB     r0,[r4,#0x30]         ;814
000658  f0100f08          TST      r0,#8                 ;814
00065c  d02f              BEQ      |L1.1726|
00065e  f8140f30          LDRB     r0,[r4,#0x30]!        ;815
000662  f0200008          BIC      r0,r0,#8              ;815
000666  7020              STRB     r0,[r4,#0]            ;815
000668  f8140930          LDRB     r0,[r4],#-0x30        ;816
00066c  bb10              CBNZ     r0,|L1.1716|
00066e  8de0              LDRH     r0,[r4,#0x2e]         ;817
000670  b9e0              CBNZ     r0,|L1.1708|
000672  f1040434          ADD      r4,r4,#0x34           ;818
000676  78a0              LDRB     r0,[r4,#2]            ;818
000678  4979              LDR      r1,|L1.2144|
00067a  7809              LDRB     r1,[r1,#0]            ;818  ; OSRdyGrp
00067c  ea400001          ORR      r0,r0,r1              ;818
000680  4977              LDR      r1,|L1.2144|
000682  7008              STRB     r0,[r1,#0]            ;818
000684  7820              LDRB     r0,[r4,#0]            ;819
000686  4977              LDR      r1,|L1.2148|
000688  5c08              LDRB     r0,[r1,r0]            ;819
00068a  7861              LDRB     r1,[r4,#1]            ;819
00068c  ea400001          ORR      r0,r0,r1              ;819
000690  f8141934          LDRB     r1,[r4],#-0x34        ;819
000694  4a73              LDR      r2,|L1.2148|
000696  5450              STRB     r0,[r2,r1]            ;819
000698  4630              MOV      r0,r6                 ;820
00069a  f7fffffe          BL       OS_CPU_SR_Restore
00069e  486c              LDR      r0,|L1.2128|
0006a0  7800              LDRB     r0,[r0,#0]            ;821  ; OSRunning
0006a2  2801              CMP      r0,#1                 ;821
0006a4  d109              BNE      |L1.1722|
0006a6  f7fffffe          BL       OS_Sched
0006aa  e006              B        |L1.1722|
                  |L1.1708|
0006ac  4630              MOV      r0,r6                 ;825
0006ae  f7fffffe          BL       OS_CPU_SR_Restore
0006b2  e002              B        |L1.1722|
                  |L1.1716|
0006b4  4630              MOV      r0,r6                 ;828
0006b6  f7fffffe          BL       OS_CPU_SR_Restore
                  |L1.1722|
0006ba  2000              MOVS     r0,#0                 ;830
0006bc  e7b6              B        |L1.1580|
                  |L1.1726|
0006be  4630              MOV      r0,r6                 ;832
0006c0  f7fffffe          BL       OS_CPU_SR_Restore
0006c4  2044              MOVS     r0,#0x44              ;833
0006c6  e7b1              B        |L1.1580|
;;;835    #endif
                          ENDP

                  OSTaskStkChk PROC
;;;856    #if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
;;;857    INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
0006c8  e92d47f0          PUSH     {r4-r10,lr}
;;;858    {
0006cc  4606              MOV      r6,r0
0006ce  460c              MOV      r4,r1
;;;859        OS_TCB    *ptcb;
;;;860        OS_STK    *pchk;
;;;861        INT32U     nfree;
;;;862        INT32U     size;
;;;863    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;864        OS_CPU_SR  cpu_sr = 0;
0006d0  f04f0a00          MOV      r10,#0
;;;865    #endif
;;;866    
;;;867    
;;;868    
;;;869    #if OS_ARG_CHK_EN > 0
;;;870        if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
0006d4  2e1f              CMP      r6,#0x1f
0006d6  dd04              BLE      |L1.1762|
;;;871            if (prio != OS_PRIO_SELF) {
0006d8  2eff              CMP      r6,#0xff
0006da  d002              BEQ      |L1.1762|
;;;872                return (OS_ERR_PRIO_INVALID);
0006dc  202a              MOVS     r0,#0x2a
                  |L1.1758|
;;;873            }
;;;874        }
;;;875        if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
;;;876            return (OS_ERR_PDATA_NULL);
;;;877        }
;;;878    #endif
;;;879        p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
;;;880        p_stk_data->OSUsed = 0;
;;;881        OS_ENTER_CRITICAL();
;;;882        if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
;;;883            prio = OSTCBCur->OSTCBPrio;
;;;884        }
;;;885        ptcb = OSTCBPrioTbl[prio];
;;;886        if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
;;;887            OS_EXIT_CRITICAL();
;;;888            return (OS_ERR_TASK_NOT_EXIST);
;;;889        }
;;;890        if (ptcb == OS_TCB_RESERVED) {
;;;891            OS_EXIT_CRITICAL();
;;;892            return (OS_ERR_TASK_NOT_EXIST);
;;;893        }
;;;894        if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
;;;895            OS_EXIT_CRITICAL();
;;;896            return (OS_ERR_TASK_OPT);
;;;897        }
;;;898        nfree = 0;
;;;899        size  = ptcb->OSTCBStkSize;
;;;900        pchk  = ptcb->OSTCBStkBottom;
;;;901        OS_EXIT_CRITICAL();
;;;902    #if OS_STK_GROWTH == 1
;;;903        while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
;;;904            nfree++;
;;;905        }
;;;906    #else
;;;907        while (*pchk-- == (OS_STK)0) {
;;;908            nfree++;
;;;909        }
;;;910    #endif
;;;911        p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
;;;912        p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
;;;913        return (OS_ERR_NONE);
;;;914    }
0006de  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1762|
0006e2  b90c              CBNZ     r4,|L1.1768|
0006e4  2009              MOVS     r0,#9                 ;876
0006e6  e7fa              B        |L1.1758|
                  |L1.1768|
0006e8  2000              MOVS     r0,#0                 ;879
0006ea  6020              STR      r0,[r4,#0]            ;879
0006ec  6060              STR      r0,[r4,#4]            ;880
0006ee  f7fffffe          BL       OS_CPU_SR_Save
0006f2  4682              MOV      r10,r0                ;881
0006f4  2eff              CMP      r6,#0xff              ;882
0006f6  d103              BNE      |L1.1792|
0006f8  4856              LDR      r0,|L1.2132|
0006fa  6800              LDR      r0,[r0,#0]            ;883  ; OSTCBCur
0006fc  f8906032          LDRB     r6,[r0,#0x32]         ;883
                  |L1.1792|
000700  4855              LDR      r0,|L1.2136|
000702  f8505026          LDR      r5,[r0,r6,LSL #2]     ;885
000706  b925              CBNZ     r5,|L1.1810|
000708  4650              MOV      r0,r10                ;887
00070a  f7fffffe          BL       OS_CPU_SR_Restore
00070e  2043              MOVS     r0,#0x43              ;888
000710  e7e5              B        |L1.1758|
                  |L1.1810|
000712  2d01              CMP      r5,#1                 ;890
000714  d104              BNE      |L1.1824|
000716  4650              MOV      r0,r10                ;891
000718  f7fffffe          BL       OS_CPU_SR_Restore
00071c  2043              MOVS     r0,#0x43              ;892
00071e  e7de              B        |L1.1758|
                  |L1.1824|
000720  8a28              LDRH     r0,[r5,#0x10]         ;894
000722  f0100f01          TST      r0,#1                 ;894
000726  d104              BNE      |L1.1842|
000728  4650              MOV      r0,r10                ;895
00072a  f7fffffe          BL       OS_CPU_SR_Restore
00072e  2045              MOVS     r0,#0x45              ;896
000730  e7d5              B        |L1.1758|
                  |L1.1842|
000732  2700              MOVS     r7,#0                 ;898
000734  f8d5900c          LDR      r9,[r5,#0xc]          ;899
000738  f8d58008          LDR      r8,[r5,#8]            ;900
00073c  4650              MOV      r0,r10                ;901
00073e  f7fffffe          BL       OS_CPU_SR_Restore
000742  e000              B        |L1.1862|
                  |L1.1860|
000744  1c7f              ADDS     r7,r7,#1              ;904
                  |L1.1862|
000746  f8581b04          LDR      r1,[r8],#4            ;903
00074a  2900              CMP      r1,#0                 ;903
00074c  d0fa              BEQ      |L1.1860|
00074e  00b8              LSLS     r0,r7,#2              ;911
000750  6020              STR      r0,[r4,#0]            ;911
000752  eba90007          SUB      r0,r9,r7              ;912
000756  0080              LSLS     r0,r0,#2              ;912
000758  6060              STR      r0,[r4,#4]            ;912
00075a  2000              MOVS     r0,#0                 ;913
00075c  e7bf              B        |L1.1758|
;;;915    #endif
                          ENDP

                  OSTaskSuspend PROC
;;;940    #if OS_TASK_SUSPEND_EN > 0
;;;941    INT8U  OSTaskSuspend (INT8U prio)
00075e  e92d41f0          PUSH     {r4-r8,lr}
;;;942    {
000762  4605              MOV      r5,r0
;;;943        BOOLEAN    self;
;;;944        OS_TCB    *ptcb;
;;;945        INT8U      y;
;;;946    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;947        OS_CPU_SR  cpu_sr = 0;
000764  f04f0800          MOV      r8,#0
;;;948    #endif
;;;949    
;;;950    
;;;951    
;;;952    #if OS_ARG_CHK_EN > 0
;;;953        if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
000768  2d1f              CMP      r5,#0x1f
00076a  d102              BNE      |L1.1906|
;;;954            return (OS_ERR_TASK_SUSPEND_IDLE);
00076c  2047              MOVS     r0,#0x47
                  |L1.1902|
;;;955        }
;;;956        if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
;;;957            if (prio != OS_PRIO_SELF) {
;;;958                return (OS_ERR_PRIO_INVALID);
;;;959            }
;;;960        }
;;;961    #endif
;;;962        OS_ENTER_CRITICAL();
;;;963        if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
;;;964            prio = OSTCBCur->OSTCBPrio;
;;;965            self = OS_TRUE;
;;;966        } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
;;;967            self = OS_TRUE;
;;;968        } else {
;;;969            self = OS_FALSE;                                        /* No suspending another task          */
;;;970        }
;;;971        ptcb = OSTCBPrioTbl[prio];
;;;972        if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
;;;973            OS_EXIT_CRITICAL();
;;;974            return (OS_ERR_TASK_SUSPEND_PRIO);
;;;975        }
;;;976        if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
;;;977            OS_EXIT_CRITICAL();
;;;978            return (OS_ERR_TASK_NOT_EXIST);
;;;979        }
;;;980        y            = ptcb->OSTCBY;
;;;981        OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
;;;982        if (OSRdyTbl[y] == 0) {
;;;983            OSRdyGrp &= ~ptcb->OSTCBBitY;
;;;984        }
;;;985        ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
;;;986        OS_EXIT_CRITICAL();
;;;987        if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
;;;988            OS_Sched();                                             /* Find new highest priority task      */
;;;989        }
;;;990        return (OS_ERR_NONE);
;;;991    }
00076e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1906|
000772  2d1f              CMP      r5,#0x1f              ;956
000774  db03              BLT      |L1.1918|
000776  2dff              CMP      r5,#0xff              ;957
000778  d001              BEQ      |L1.1918|
00077a  202a              MOVS     r0,#0x2a              ;958
00077c  e7f7              B        |L1.1902|
                  |L1.1918|
00077e  f7fffffe          BL       OS_CPU_SR_Save
000782  4680              MOV      r8,r0                 ;962
000784  2dff              CMP      r5,#0xff              ;963
000786  d105              BNE      |L1.1940|
000788  4832              LDR      r0,|L1.2132|
00078a  6800              LDR      r0,[r0,#0]            ;964  ; OSTCBCur
00078c  f8905032          LDRB     r5,[r0,#0x32]         ;964
000790  2601              MOVS     r6,#1                 ;965
000792  e008              B        |L1.1958|
                  |L1.1940|
000794  482f              LDR      r0,|L1.2132|
000796  6800              LDR      r0,[r0,#0]            ;966  ; OSTCBCur
000798  f8900032          LDRB     r0,[r0,#0x32]         ;966
00079c  42a8              CMP      r0,r5                 ;966
00079e  d101              BNE      |L1.1956|
0007a0  2601              MOVS     r6,#1                 ;967
0007a2  e000              B        |L1.1958|
                  |L1.1956|
0007a4  2600              MOVS     r6,#0                 ;969
                  |L1.1958|
0007a6  482c              LDR      r0,|L1.2136|
0007a8  f8504025          LDR      r4,[r0,r5,LSL #2]     ;971
0007ac  b924              CBNZ     r4,|L1.1976|
0007ae  4640              MOV      r0,r8                 ;973
0007b0  f7fffffe          BL       OS_CPU_SR_Restore
0007b4  2048              MOVS     r0,#0x48              ;974
0007b6  e7da              B        |L1.1902|
                  |L1.1976|
0007b8  2c01              CMP      r4,#1                 ;976
0007ba  d104              BNE      |L1.1990|
0007bc  4640              MOV      r0,r8                 ;977
0007be  f7fffffe          BL       OS_CPU_SR_Restore
0007c2  2043              MOVS     r0,#0x43              ;978
0007c4  e7d3              B        |L1.1902|
                  |L1.1990|
0007c6  f8947034          LDRB     r7,[r4,#0x34]         ;980
0007ca  4826              LDR      r0,|L1.2148|
0007cc  5dc0              LDRB     r0,[r0,r7]            ;981
0007ce  f8941035          LDRB     r1,[r4,#0x35]         ;981
0007d2  4388              BICS     r0,r0,r1              ;981
0007d4  4923              LDR      r1,|L1.2148|
0007d6  55c8              STRB     r0,[r1,r7]            ;981
0007d8  4608              MOV      r0,r1                 ;982
0007da  5dc0              LDRB     r0,[r0,r7]            ;982
0007dc  b930              CBNZ     r0,|L1.2028|
0007de  f8941036          LDRB     r1,[r4,#0x36]         ;983
0007e2  481f              LDR      r0,|L1.2144|
0007e4  7800              LDRB     r0,[r0,#0]            ;983  ; OSRdyGrp
0007e6  4388              BICS     r0,r0,r1              ;983
0007e8  491d              LDR      r1,|L1.2144|
0007ea  7008              STRB     r0,[r1,#0]            ;983
                  |L1.2028|
0007ec  f8940030          LDRB     r0,[r4,#0x30]         ;985
0007f0  f0400008          ORR      r0,r0,#8              ;985
0007f4  f8840030          STRB     r0,[r4,#0x30]         ;985
0007f8  4640              MOV      r0,r8                 ;986
0007fa  f7fffffe          BL       OS_CPU_SR_Restore
0007fe  2e01              CMP      r6,#1                 ;987
000800  d101              BNE      |L1.2054|
000802  f7fffffe          BL       OS_Sched
                  |L1.2054|
000806  2000              MOVS     r0,#0                 ;990
000808  e7b1              B        |L1.1902|
;;;992    #endif
                          ENDP

                  OSTaskQuery PROC
;;;1013   #if OS_TASK_QUERY_EN > 0
;;;1014   INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
00080a  e92d41f0          PUSH     {r4-r8,lr}
;;;1015   {
00080e  4604              MOV      r4,r0
000810  460e              MOV      r6,r1
;;;1016       OS_TCB    *ptcb;
;;;1017   #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;1018       OS_CPU_SR  cpu_sr = 0;
000812  2700              MOVS     r7,#0
;;;1019   #endif
;;;1020   
;;;1021   
;;;1022   
;;;1023   #if OS_ARG_CHK_EN > 0
;;;1024       if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
000814  2c1f              CMP      r4,#0x1f
000816  dd04              BLE      |L1.2082|
;;;1025           if (prio != OS_PRIO_SELF) {
000818  2cff              CMP      r4,#0xff
00081a  d002              BEQ      |L1.2082|
;;;1026               return (OS_ERR_PRIO_INVALID);
00081c  202a              MOVS     r0,#0x2a
                  |L1.2078|
;;;1027           }
;;;1028       }
;;;1029       if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
;;;1030           return (OS_ERR_PDATA_NULL);
;;;1031       }
;;;1032   #endif
;;;1033       OS_ENTER_CRITICAL();
;;;1034       if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
;;;1035           prio = OSTCBCur->OSTCBPrio;
;;;1036       }
;;;1037       ptcb = OSTCBPrioTbl[prio];
;;;1038       if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
;;;1039           OS_EXIT_CRITICAL();
;;;1040           return (OS_ERR_PRIO);
;;;1041       }
;;;1042       if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
;;;1043           OS_EXIT_CRITICAL();
;;;1044           return (OS_ERR_TASK_NOT_EXIST);
;;;1045       }
;;;1046                                                    /* Copy TCB into user storage area                    */
;;;1047       OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
;;;1048       OS_EXIT_CRITICAL();
;;;1049       return (OS_ERR_NONE);
;;;1050   }
00081e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.2082|
000822  b90e              CBNZ     r6,|L1.2088|
000824  2009              MOVS     r0,#9                 ;1030
000826  e7fa              B        |L1.2078|
                  |L1.2088|
000828  f7fffffe          BL       OS_CPU_SR_Save
00082c  4607              MOV      r7,r0                 ;1033
00082e  2cff              CMP      r4,#0xff              ;1034
000830  d103              BNE      |L1.2106|
000832  4808              LDR      r0,|L1.2132|
000834  6800              LDR      r0,[r0,#0]            ;1035  ; OSTCBCur
000836  f8904032          LDRB     r4,[r0,#0x32]         ;1035
                  |L1.2106|
00083a  4807              LDR      r0,|L1.2136|
00083c  f8505024          LDR      r5,[r0,r4,LSL #2]     ;1037
000840  b995              CBNZ     r5,|L1.2152|
000842  4638              MOV      r0,r7                 ;1039
000844  f7fffffe          BL       OS_CPU_SR_Restore
000848  2029              MOVS     r0,#0x29              ;1040
00084a  e7e8              B        |L1.2078|
                  |L1.2124|
                          DCD      OSTCBFreeList
                  |L1.2128|
                          DCD      OSRunning
                  |L1.2132|
                          DCD      OSTCBCur
                  |L1.2136|
                          DCD      OSTCBPrioTbl
                  |L1.2140|
                          DCD      OSIntNesting
                  |L1.2144|
                          DCD      OSRdyGrp
                  |L1.2148|
                          DCD      OSRdyTbl
                  |L1.2152|
000868  2d01              CMP      r5,#1                 ;1042
00086a  d104              BNE      |L1.2166|
00086c  4638              MOV      r0,r7                 ;1043
00086e  f7fffffe          BL       OS_CPU_SR_Restore
000872  2043              MOVS     r0,#0x43              ;1044
000874  e7d3              B        |L1.2078|
                  |L1.2166|
000876  225c              MOVS     r2,#0x5c              ;1047
000878  4629              MOV      r1,r5                 ;1047
00087a  4630              MOV      r0,r6                 ;1047
00087c  f7fffffe          BL       OS_MemCopy
000880  4638              MOV      r0,r7                 ;1048
000882  f7fffffe          BL       OS_CPU_SR_Restore
000886  2000              MOVS     r0,#0                 ;1049
000888  e7c9              B        |L1.2078|
;;;1051   #endif
                          ENDP

