; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_can.o --depend=.\exe\stm32f10x_can.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_can.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_can.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;142      */
;;;143    void CAN_DeInit(CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;144    {
000002  4604              MOV      r4,r0
;;;145      /* Check the parameters */
;;;146      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;147     
;;;148      if (CANx == CAN1)
000004  48fa              LDR      r0,|L1.1008|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L1.30|
;;;149      {
;;;150        /* Enable CAN1 reset state */
;;;151        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;152        /* Release CAN1 from reset state */
;;;153        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f7000          MOV      r0,#0x2000000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
00001c  e008              B        |L1.48|
                  |L1.30|
;;;154      }
;;;155      else
;;;156      {  
;;;157        /* Enable CAN2 reset state */
;;;158        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
00001e  2101              MOVS     r1,#1
000020  0688              LSLS     r0,r1,#26
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;159        /* Release CAN2 from reset state */
;;;160        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
000026  2100              MOVS     r1,#0
000028  f04f6080          MOV      r0,#0x4000000
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L1.48|
;;;161      }
;;;162    }
000030  bd10              POP      {r4,pc}
;;;163    
                          ENDP

                  CAN_Init PROC
;;;172      */
;;;173    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000032  b530              PUSH     {r4,r5,lr}
;;;174    {
000034  4602              MOV      r2,r0
;;;175      uint8_t InitStatus = CANINITFAILED;
000036  2000              MOVS     r0,#0
;;;176      uint32_t wait_ack = 0x00000000;
000038  2300              MOVS     r3,#0
;;;177      /* Check the parameters */
;;;178      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;179      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;180      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;181      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;182      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;183      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;184      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;185      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;186      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;187      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;188      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;189      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;190    
;;;191      /* exit from sleep mode */
;;;192      CANx->MCR &= ~MCR_SLEEP;
00003a  6814              LDR      r4,[r2,#0]
00003c  f0240402          BIC      r4,r4,#2
000040  6014              STR      r4,[r2,#0]
;;;193    
;;;194      /* Request initialisation */
;;;195      CANx->MCR |= MCR_INRQ ;
000042  6814              LDR      r4,[r2,#0]
000044  f0440401          ORR      r4,r4,#1
000048  6014              STR      r4,[r2,#0]
;;;196    
;;;197      /* Wait the acknowledge */
;;;198      while (((CANx->MSR & MSR_INAK) != MSR_INAK) && (wait_ack != INAK_TimeOut))
00004a  e000              B        |L1.78|
                  |L1.76|
;;;199      {
;;;200        wait_ack++;
00004c  1c5b              ADDS     r3,r3,#1
                  |L1.78|
00004e  6854              LDR      r4,[r2,#4]            ;198
000050  f0040401          AND      r4,r4,#1              ;198
000054  2c01              CMP      r4,#1                 ;198
000056  d003              BEQ      |L1.96|
000058  f5a3447f          SUB      r4,r3,#0xff00         ;198
00005c  3cff              SUBS     r4,r4,#0xff           ;198
00005e  d1f5              BNE      |L1.76|
                  |L1.96|
;;;201      }
;;;202    
;;;203      /* ...and check acknowledged */
;;;204      if ((CANx->MSR & MSR_INAK) != MSR_INAK)
000060  6854              LDR      r4,[r2,#4]
000062  f0040401          AND      r4,r4,#1
000066  2c01              CMP      r4,#1
000068  d001              BEQ      |L1.110|
;;;205      {
;;;206        InitStatus = CANINITFAILED;
00006a  2000              MOVS     r0,#0
00006c  e06e              B        |L1.332|
                  |L1.110|
;;;207      }
;;;208      else 
;;;209      {
;;;210        /* Set the time triggered communication mode */
;;;211        if (CAN_InitStruct->CAN_TTCM == ENABLE)
00006e  798c              LDRB     r4,[r1,#6]
000070  2c01              CMP      r4,#1
000072  d104              BNE      |L1.126|
;;;212        {
;;;213          CANx->MCR |= MCR_TTCM;
000074  6814              LDR      r4,[r2,#0]
000076  f0440480          ORR      r4,r4,#0x80
00007a  6014              STR      r4,[r2,#0]
00007c  e003              B        |L1.134|
                  |L1.126|
;;;214        }
;;;215        else
;;;216        {
;;;217          CANx->MCR &= ~MCR_TTCM;
00007e  6814              LDR      r4,[r2,#0]
000080  f0240480          BIC      r4,r4,#0x80
000084  6014              STR      r4,[r2,#0]
                  |L1.134|
;;;218        }
;;;219    
;;;220        /* Set the automatic bus-off management */
;;;221        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000086  79cc              LDRB     r4,[r1,#7]
000088  2c01              CMP      r4,#1
00008a  d104              BNE      |L1.150|
;;;222        {
;;;223          CANx->MCR |= MCR_ABOM;
00008c  6814              LDR      r4,[r2,#0]
00008e  f0440440          ORR      r4,r4,#0x40
000092  6014              STR      r4,[r2,#0]
000094  e003              B        |L1.158|
                  |L1.150|
;;;224        }
;;;225        else
;;;226        {
;;;227          CANx->MCR &= ~MCR_ABOM;
000096  6814              LDR      r4,[r2,#0]
000098  f0240440          BIC      r4,r4,#0x40
00009c  6014              STR      r4,[r2,#0]
                  |L1.158|
;;;228        }
;;;229    
;;;230        /* Set the automatic wake-up mode */
;;;231        if (CAN_InitStruct->CAN_AWUM == ENABLE)
00009e  7a0c              LDRB     r4,[r1,#8]
0000a0  2c01              CMP      r4,#1
0000a2  d104              BNE      |L1.174|
;;;232        {
;;;233          CANx->MCR |= MCR_AWUM;
0000a4  6814              LDR      r4,[r2,#0]
0000a6  f0440420          ORR      r4,r4,#0x20
0000aa  6014              STR      r4,[r2,#0]
0000ac  e003              B        |L1.182|
                  |L1.174|
;;;234        }
;;;235        else
;;;236        {
;;;237          CANx->MCR &= ~MCR_AWUM;
0000ae  6814              LDR      r4,[r2,#0]
0000b0  f0240420          BIC      r4,r4,#0x20
0000b4  6014              STR      r4,[r2,#0]
                  |L1.182|
;;;238        }
;;;239    
;;;240        /* Set the no automatic retransmission */
;;;241        if (CAN_InitStruct->CAN_NART == ENABLE)
0000b6  7a4c              LDRB     r4,[r1,#9]
0000b8  2c01              CMP      r4,#1
0000ba  d104              BNE      |L1.198|
;;;242        {
;;;243          CANx->MCR |= MCR_NART;
0000bc  6814              LDR      r4,[r2,#0]
0000be  f0440410          ORR      r4,r4,#0x10
0000c2  6014              STR      r4,[r2,#0]
0000c4  e003              B        |L1.206|
                  |L1.198|
;;;244        }
;;;245        else
;;;246        {
;;;247          CANx->MCR &= ~MCR_NART;
0000c6  6814              LDR      r4,[r2,#0]
0000c8  f0240410          BIC      r4,r4,#0x10
0000cc  6014              STR      r4,[r2,#0]
                  |L1.206|
;;;248        }
;;;249    
;;;250        /* Set the receive FIFO locked mode */
;;;251        if (CAN_InitStruct->CAN_RFLM == ENABLE)
0000ce  7a8c              LDRB     r4,[r1,#0xa]
0000d0  2c01              CMP      r4,#1
0000d2  d104              BNE      |L1.222|
;;;252        {
;;;253          CANx->MCR |= MCR_RFLM;
0000d4  6814              LDR      r4,[r2,#0]
0000d6  f0440408          ORR      r4,r4,#8
0000da  6014              STR      r4,[r2,#0]
0000dc  e003              B        |L1.230|
                  |L1.222|
;;;254        }
;;;255        else
;;;256        {
;;;257          CANx->MCR &= ~MCR_RFLM;
0000de  6814              LDR      r4,[r2,#0]
0000e0  f0240408          BIC      r4,r4,#8
0000e4  6014              STR      r4,[r2,#0]
                  |L1.230|
;;;258        }
;;;259    
;;;260        /* Set the transmit FIFO priority */
;;;261        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000e6  7acc              LDRB     r4,[r1,#0xb]
0000e8  2c01              CMP      r4,#1
0000ea  d104              BNE      |L1.246|
;;;262        {
;;;263          CANx->MCR |= MCR_TXFP;
0000ec  6814              LDR      r4,[r2,#0]
0000ee  f0440404          ORR      r4,r4,#4
0000f2  6014              STR      r4,[r2,#0]
0000f4  e003              B        |L1.254|
                  |L1.246|
;;;264        }
;;;265        else
;;;266        {
;;;267          CANx->MCR &= ~MCR_TXFP;
0000f6  6814              LDR      r4,[r2,#0]
0000f8  f0240404          BIC      r4,r4,#4
0000fc  6014              STR      r4,[r2,#0]
                  |L1.254|
;;;268        }
;;;269    
;;;270        /* Set the bit timing register */
;;;271        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | ((uint32_t)CAN_InitStruct->CAN_SJW << 24) |
0000fe  788c              LDRB     r4,[r1,#2]
000100  07a4              LSLS     r4,r4,#30
000102  78cd              LDRB     r5,[r1,#3]
000104  ea446405          ORR      r4,r4,r5,LSL #24
000108  790d              LDRB     r5,[r1,#4]
00010a  ea444405          ORR      r4,r4,r5,LSL #16
00010e  794d              LDRB     r5,[r1,#5]
000110  ea445405          ORR      r4,r4,r5,LSL #20
000114  880d              LDRH     r5,[r1,#0]
000116  1e6d              SUBS     r5,r5,#1
000118  432c              ORRS     r4,r4,r5
00011a  61d4              STR      r4,[r2,#0x1c]
;;;272                   ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) |
;;;273                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;274    
;;;275        /* Request leave initialisation */
;;;276        CANx->MCR &= ~MCR_INRQ;
00011c  6814              LDR      r4,[r2,#0]
00011e  f0240401          BIC      r4,r4,#1
000122  6014              STR      r4,[r2,#0]
;;;277    
;;;278       /* Wait the acknowledge */
;;;279       wait_ack = 0x00;
000124  2300              MOVS     r3,#0
;;;280    
;;;281       while (((CANx->MSR & MSR_INAK) == MSR_INAK) && (wait_ack != INAK_TimeOut))
000126  e000              B        |L1.298|
                  |L1.296|
;;;282       {
;;;283         wait_ack++;
000128  1c5b              ADDS     r3,r3,#1
                  |L1.298|
00012a  6854              LDR      r4,[r2,#4]            ;281
00012c  f0040401          AND      r4,r4,#1              ;281
000130  2c01              CMP      r4,#1                 ;281
000132  d103              BNE      |L1.316|
000134  f5a3447f          SUB      r4,r3,#0xff00         ;281
000138  3cff              SUBS     r4,r4,#0xff           ;281
00013a  d1f5              BNE      |L1.296|
                  |L1.316|
;;;284       }
;;;285    
;;;286        /* ...and check acknowledged */
;;;287        if ((CANx->MSR & MSR_INAK) == MSR_INAK)
00013c  6854              LDR      r4,[r2,#4]
00013e  f0040401          AND      r4,r4,#1
000142  2c01              CMP      r4,#1
000144  d101              BNE      |L1.330|
;;;288        {
;;;289          InitStatus = CANINITFAILED;
000146  2000              MOVS     r0,#0
000148  e000              B        |L1.332|
                  |L1.330|
;;;290        }
;;;291        else
;;;292        {
;;;293          InitStatus = CANINITOK ;
00014a  2001              MOVS     r0,#1
                  |L1.332|
;;;294        }
;;;295      }
;;;296    
;;;297      /* At this step, return the status of initialization */
;;;298      return InitStatus;
;;;299    }
00014c  bd30              POP      {r4,r5,pc}
;;;300    
                          ENDP

                  CAN_FilterInit PROC
;;;307      */
;;;308    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
00014e  b510              PUSH     {r4,lr}
;;;309    {
;;;310      uint32_t filter_number_bit_pos = 0;
000150  2100              MOVS     r1,#0
;;;311      /* Check the parameters */
;;;312      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;313      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;314      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;315      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;316      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;317    
;;;318      filter_number_bit_pos = ((uint32_t)0x00000001) << CAN_FilterInitStruct->CAN_FilterNumber;
000152  7a83              LDRB     r3,[r0,#0xa]
000154  2201              MOVS     r2,#1
000156  fa02f103          LSL      r1,r2,r3
;;;319    
;;;320      /* Initialisation mode for the filter */
;;;321      CAN1->FMR |= FMR_FINIT;
00015a  4aa6              LDR      r2,|L1.1012|
00015c  6812              LDR      r2,[r2,#0]
00015e  f0420201          ORR      r2,r2,#1
000162  4ba5              LDR      r3,|L1.1016|
000164  f8c32600          STR      r2,[r3,#0x600]
;;;322    
;;;323      /* Filter Deactivation */
;;;324      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000168  461a              MOV      r2,r3
00016a  f8d2261c          LDR      r2,[r2,#0x61c]
00016e  ea220201          BIC      r2,r2,r1
000172  4ba2              LDR      r3,|L1.1020|
000174  601a              STR      r2,[r3,#0]
;;;325    
;;;326      /* Filter Scale */
;;;327      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000176  7b02              LDRB     r2,[r0,#0xc]
000178  b9b2              CBNZ     r2,|L1.424|
;;;328      {
;;;329        /* 16-bit scale for the filter */
;;;330        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00017a  4aa1              LDR      r2,|L1.1024|
00017c  6812              LDR      r2,[r2,#0]
00017e  ea220201          BIC      r2,r2,r1
000182  4b9f              LDR      r3,|L1.1024|
000184  601a              STR      r2,[r3,#0]
;;;331    
;;;332        /* First 16-bit identifier and First 16-bit mask */
;;;333        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;334        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000186  8842              LDRH     r2,[r0,#2]
000188  88c3              LDRH     r3,[r0,#6]
00018a  ea424303          ORR      r3,r2,r3,LSL #16
00018e  4a9d              LDR      r2,|L1.1028|
000190  7a84              LDRB     r4,[r0,#0xa]
000192  f8423034          STR      r3,[r2,r4,LSL #3]
;;;335        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;336            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;337    
;;;338        /* Second 16-bit identifier and Second 16-bit mask */
;;;339        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;340        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000196  8802              LDRH     r2,[r0,#0]
000198  8883              LDRH     r3,[r0,#4]
00019a  ea424303          ORR      r3,r2,r3,LSL #16
00019e  4a99              LDR      r2,|L1.1028|
0001a0  7a84              LDRB     r4,[r0,#0xa]
0001a2  eb0202c4          ADD      r2,r2,r4,LSL #3
0001a6  6053              STR      r3,[r2,#4]
                  |L1.424|
;;;341        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;342            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;343      }
;;;344    
;;;345      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
0001a8  7b02              LDRB     r2,[r0,#0xc]
0001aa  2a01              CMP      r2,#1
0001ac  d116              BNE      |L1.476|
;;;346      {
;;;347        /* 32-bit scale for the filter */
;;;348        CAN1->FS1R |= filter_number_bit_pos;
0001ae  4a94              LDR      r2,|L1.1024|
0001b0  6812              LDR      r2,[r2,#0]
0001b2  ea420201          ORR      r2,r2,r1
0001b6  4b92              LDR      r3,|L1.1024|
0001b8  601a              STR      r2,[r3,#0]
;;;349        /* 32-bit identifier or First 32-bit identifier */
;;;350        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
0001ba  8842              LDRH     r2,[r0,#2]
0001bc  8803              LDRH     r3,[r0,#0]
0001be  ea424303          ORR      r3,r2,r3,LSL #16
0001c2  4a90              LDR      r2,|L1.1028|
0001c4  7a84              LDRB     r4,[r0,#0xa]
0001c6  f8423034          STR      r3,[r2,r4,LSL #3]
;;;351        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;352            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;353        /* 32-bit mask or Second 32-bit identifier */
;;;354        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
0001ca  88c2              LDRH     r2,[r0,#6]
0001cc  8883              LDRH     r3,[r0,#4]
0001ce  ea424303          ORR      r3,r2,r3,LSL #16
0001d2  4a8c              LDR      r2,|L1.1028|
0001d4  7a84              LDRB     r4,[r0,#0xa]
0001d6  eb0202c4          ADD      r2,r2,r4,LSL #3
0001da  6053              STR      r3,[r2,#4]
                  |L1.476|
;;;355        ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;356            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;357      }
;;;358    
;;;359      /* Filter Mode */
;;;360      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
0001dc  7ac2              LDRB     r2,[r0,#0xb]
0001de  b93a              CBNZ     r2,|L1.496|
;;;361      {
;;;362        /*Id/Mask mode for the filter*/
;;;363        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
0001e0  4a89              LDR      r2,|L1.1032|
0001e2  6812              LDR      r2,[r2,#0]
0001e4  ea220201          BIC      r2,r2,r1
0001e8  4b83              LDR      r3,|L1.1016|
0001ea  f8c32604          STR      r2,[r3,#0x604]
0001ee  e006              B        |L1.510|
                  |L1.496|
;;;364      }
;;;365      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;366      {
;;;367        /*Identifier list mode for the filter*/
;;;368        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
0001f0  4a85              LDR      r2,|L1.1032|
0001f2  6812              LDR      r2,[r2,#0]
0001f4  ea420201          ORR      r2,r2,r1
0001f8  4b7f              LDR      r3,|L1.1016|
0001fa  f8c32604          STR      r2,[r3,#0x604]
                  |L1.510|
;;;369      }
;;;370    
;;;371      /* Filter FIFO assignment */
;;;372      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
0001fe  8902              LDRH     r2,[r0,#8]
000200  b932              CBNZ     r2,|L1.528|
;;;373      {
;;;374        /* FIFO 0 assignation for the filter */
;;;375        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
000202  4a82              LDR      r2,|L1.1036|
000204  6812              LDR      r2,[r2,#0]
000206  ea220201          BIC      r2,r2,r1
00020a  4b7b              LDR      r3,|L1.1016|
00020c  f8c32614          STR      r2,[r3,#0x614]
                  |L1.528|
;;;376      }
;;;377    
;;;378      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
000210  8902              LDRH     r2,[r0,#8]
000212  2a01              CMP      r2,#1
000214  d106              BNE      |L1.548|
;;;379      {
;;;380        /* FIFO 1 assignation for the filter */
;;;381        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
000216  4a7d              LDR      r2,|L1.1036|
000218  6812              LDR      r2,[r2,#0]
00021a  ea420201          ORR      r2,r2,r1
00021e  4b76              LDR      r3,|L1.1016|
000220  f8c32614          STR      r2,[r3,#0x614]
                  |L1.548|
;;;382      }
;;;383      
;;;384      /* Filter activation */
;;;385      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
000224  7b42              LDRB     r2,[r0,#0xd]
000226  2a01              CMP      r2,#1
000228  d106              BNE      |L1.568|
;;;386      {
;;;387        CAN1->FA1R |= filter_number_bit_pos;
00022a  4a74              LDR      r2,|L1.1020|
00022c  6812              LDR      r2,[r2,#0]
00022e  ea420201          ORR      r2,r2,r1
000232  4b71              LDR      r3,|L1.1016|
000234  f8c3261c          STR      r2,[r3,#0x61c]
                  |L1.568|
;;;388      }
;;;389    
;;;390      /* Leave the initialisation mode for the filter */
;;;391      CAN1->FMR &= ~FMR_FINIT;
000238  4a6e              LDR      r2,|L1.1012|
00023a  6812              LDR      r2,[r2,#0]
00023c  f0220201          BIC      r2,r2,#1
000240  4b6d              LDR      r3,|L1.1016|
000242  f8c32600          STR      r2,[r3,#0x600]
;;;392    }
000246  bd10              POP      {r4,pc}
;;;393    
                          ENDP

                  CAN_StructInit PROC
;;;399      */
;;;400    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000248  2100              MOVS     r1,#0
;;;401    {
;;;402      /* Reset CAN init structure parameters values */
;;;403      /* Initialize the time triggered communication mode */
;;;404      CAN_InitStruct->CAN_TTCM = DISABLE;
00024a  7181              STRB     r1,[r0,#6]
;;;405      /* Initialize the automatic bus-off management */
;;;406      CAN_InitStruct->CAN_ABOM = DISABLE;
00024c  71c1              STRB     r1,[r0,#7]
;;;407      /* Initialize the automatic wake-up mode */
;;;408      CAN_InitStruct->CAN_AWUM = DISABLE;
00024e  7201              STRB     r1,[r0,#8]
;;;409      /* Initialize the no automatic retransmission */
;;;410      CAN_InitStruct->CAN_NART = DISABLE;
000250  7241              STRB     r1,[r0,#9]
;;;411      /* Initialize the receive FIFO locked mode */
;;;412      CAN_InitStruct->CAN_RFLM = DISABLE;
000252  7281              STRB     r1,[r0,#0xa]
;;;413      /* Initialize the transmit FIFO priority */
;;;414      CAN_InitStruct->CAN_TXFP = DISABLE;
000254  72c1              STRB     r1,[r0,#0xb]
;;;415      /* Initialize the CAN_Mode member */
;;;416      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
000256  7081              STRB     r1,[r0,#2]
;;;417      /* Initialize the CAN_SJW member */
;;;418      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000258  70c1              STRB     r1,[r0,#3]
;;;419      /* Initialize the CAN_BS1 member */
;;;420      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
00025a  2103              MOVS     r1,#3
00025c  7101              STRB     r1,[r0,#4]
;;;421      /* Initialize the CAN_BS2 member */
;;;422      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
00025e  2102              MOVS     r1,#2
000260  7141              STRB     r1,[r0,#5]
;;;423      /* Initialize the CAN_Prescaler member */
;;;424      CAN_InitStruct->CAN_Prescaler = 1;
000262  2101              MOVS     r1,#1
000264  8001              STRH     r1,[r0,#0]
;;;425    }
000266  4770              BX       lr
;;;426    
                          ENDP

                  CAN_SlaveStartBank PROC
;;;432      */
;;;433    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000268  4962              LDR      r1,|L1.1012|
;;;434    {
;;;435      /* Check the parameters */
;;;436      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;437      /* enter Initialisation mode for the filter */
;;;438      CAN1->FMR |= FMR_FINIT;
00026a  6809              LDR      r1,[r1,#0]
00026c  f0410101          ORR      r1,r1,#1
000270  4a61              LDR      r2,|L1.1016|
000272  f8c21600          STR      r1,[r2,#0x600]
;;;439      /* Select the start slave bank */
;;;440      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
000276  495f              LDR      r1,|L1.1012|
000278  6809              LDR      r1,[r1,#0]
00027a  f643720e          MOV      r2,#0x3f0e
00027e  ea210102          BIC      r1,r1,r2
000282  4a5d              LDR      r2,|L1.1016|
000284  f8c21600          STR      r1,[r2,#0x600]
;;;441      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
000288  4611              MOV      r1,r2
00028a  f8d11600          LDR      r1,[r1,#0x600]
00028e  ea412100          ORR      r1,r1,r0,LSL #8
000292  f8c21600          STR      r1,[r2,#0x600]
;;;442      /* Leave Initialisation mode for the filter */
;;;443      CAN1->FMR &= ~FMR_FINIT;
000296  4611              MOV      r1,r2
000298  f8d11600          LDR      r1,[r1,#0x600]
00029c  f0210101          BIC      r1,r1,#1
0002a0  f8c21600          STR      r1,[r2,#0x600]
;;;444    }
0002a4  4770              BX       lr
;;;445    
                          ENDP

                  CAN_ITConfig PROC
;;;458      */
;;;459    void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
0002a6  b11a              CBZ      r2,|L1.688|
;;;460    {
;;;461      /* Check the parameters */
;;;462      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;463      assert_param(IS_CAN_ITConfig(CAN_IT));
;;;464      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;465    
;;;466      if (NewState != DISABLE)
;;;467      {
;;;468        /* Enable the selected CAN interrupt */
;;;469        CANx->IER |= CAN_IT;
0002a8  6943              LDR      r3,[r0,#0x14]
0002aa  430b              ORRS     r3,r3,r1
0002ac  6143              STR      r3,[r0,#0x14]
0002ae  e002              B        |L1.694|
                  |L1.688|
;;;470      }
;;;471      else
;;;472      {
;;;473        /* Disable the selected CAN interrupt */
;;;474        CANx->IER &= ~CAN_IT;
0002b0  6943              LDR      r3,[r0,#0x14]
0002b2  438b              BICS     r3,r3,r1
0002b4  6143              STR      r3,[r0,#0x14]
                  |L1.694|
;;;475      }
;;;476    }
0002b6  4770              BX       lr
;;;477    
                          ENDP

                  CAN_Transmit PROC
;;;485      */
;;;486    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
0002b8  b510              PUSH     {r4,lr}
;;;487    {
0002ba  4602              MOV      r2,r0
;;;488      uint8_t transmit_mailbox = 0;
0002bc  2000              MOVS     r0,#0
;;;489      /* Check the parameters */
;;;490      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;491      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;492      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;493      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;494    
;;;495      /* Select one empty transmit mailbox */
;;;496      if ((CANx->TSR&TSR_TME0) == TSR_TME0)
0002be  6893              LDR      r3,[r2,#8]
0002c0  f0036380          AND      r3,r3,#0x4000000
0002c4  f1b36f80          CMP      r3,#0x4000000
0002c8  d100              BNE      |L1.716|
;;;497      {
;;;498        transmit_mailbox = 0;
0002ca  e010              B        |L1.750|
                  |L1.716|
;;;499      }
;;;500      else if ((CANx->TSR&TSR_TME1) == TSR_TME1)
0002cc  6893              LDR      r3,[r2,#8]
0002ce  f0036300          AND      r3,r3,#0x8000000
0002d2  f1b36f00          CMP      r3,#0x8000000
0002d6  d101              BNE      |L1.732|
;;;501      {
;;;502        transmit_mailbox = 1;
0002d8  2001              MOVS     r0,#1
0002da  e008              B        |L1.750|
                  |L1.732|
;;;503      }
;;;504      else if ((CANx->TSR&TSR_TME2) == TSR_TME2)
0002dc  6893              LDR      r3,[r2,#8]
0002de  f0035380          AND      r3,r3,#0x10000000
0002e2  f1b35f80          CMP      r3,#0x10000000
0002e6  d101              BNE      |L1.748|
;;;505      {
;;;506        transmit_mailbox = 2;
0002e8  2002              MOVS     r0,#2
0002ea  e000              B        |L1.750|
                  |L1.748|
;;;507      }
;;;508      else
;;;509      {
;;;510        transmit_mailbox = CAN_NO_MB;
0002ec  2004              MOVS     r0,#4
                  |L1.750|
;;;511      }
;;;512    
;;;513      if (transmit_mailbox != CAN_NO_MB)
0002ee  2804              CMP      r0,#4
0002f0  d074              BEQ      |L1.988|
;;;514      {
;;;515        /* Set up the Id */
;;;516        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
0002f2  f50273c0          ADD      r3,r2,#0x180
0002f6  eb031300          ADD      r3,r3,r0,LSL #4
0002fa  681b              LDR      r3,[r3,#0]
0002fc  f0030401          AND      r4,r3,#1
000300  f50273c0          ADD      r3,r2,#0x180
000304  eb031300          ADD      r3,r3,r0,LSL #4
000308  601c              STR      r4,[r3,#0]
;;;517        if (TxMessage->IDE == CAN_ID_STD)
00030a  7a0b              LDRB     r3,[r1,#8]
00030c  b97b              CBNZ     r3,|L1.814|
;;;518        {
;;;519          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;520          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | TxMessage->RTR);
00030e  7a4b              LDRB     r3,[r1,#9]
000310  680c              LDR      r4,[r1,#0]
000312  ea435344          ORR      r3,r3,r4,LSL #21
000316  f50274c0          ADD      r4,r2,#0x180
00031a  eb041400          ADD      r4,r4,r0,LSL #4
00031e  6824              LDR      r4,[r4,#0]
000320  4323              ORRS     r3,r3,r4
000322  f50274c0          ADD      r4,r2,#0x180
000326  eb041400          ADD      r4,r4,r0,LSL #4
00032a  6023              STR      r3,[r4,#0]
00032c  e010              B        |L1.848|
                  |L1.814|
;;;521        }
;;;522        else
;;;523        {
;;;524          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;525          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId<<3) | TxMessage->IDE | 
00032e  7a0b              LDRB     r3,[r1,#8]
000330  684c              LDR      r4,[r1,#4]
000332  ea4303c4          ORR      r3,r3,r4,LSL #3
000336  7a4c              LDRB     r4,[r1,#9]
000338  4323              ORRS     r3,r3,r4
00033a  f50274c0          ADD      r4,r2,#0x180
00033e  eb041400          ADD      r4,r4,r0,LSL #4
000342  6824              LDR      r4,[r4,#0]
000344  4323              ORRS     r3,r3,r4
000346  f50274c0          ADD      r4,r2,#0x180
00034a  eb041400          ADD      r4,r4,r0,LSL #4
00034e  6023              STR      r3,[r4,#0]
                  |L1.848|
;;;526                                                   TxMessage->RTR);
;;;527        }
;;;528        
;;;529    
;;;530        /* Set up the DLC */
;;;531        TxMessage->DLC &= (uint8_t)0x0000000F;
000350  7a8b              LDRB     r3,[r1,#0xa]
000352  f003030f          AND      r3,r3,#0xf
000356  728b              STRB     r3,[r1,#0xa]
;;;532        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
000358  f50273c0          ADD      r3,r2,#0x180
00035c  eb031300          ADD      r3,r3,r0,LSL #4
000360  685b              LDR      r3,[r3,#4]
000362  f023040f          BIC      r4,r3,#0xf
000366  f50273c0          ADD      r3,r2,#0x180
00036a  eb031300          ADD      r3,r3,r0,LSL #4
00036e  605c              STR      r4,[r3,#4]
;;;533        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
000370  f50273c0          ADD      r3,r2,#0x180
000374  eb031300          ADD      r3,r3,r0,LSL #4
000378  685b              LDR      r3,[r3,#4]
00037a  7a8c              LDRB     r4,[r1,#0xa]
00037c  4323              ORRS     r3,r3,r4
00037e  f50274c0          ADD      r4,r2,#0x180
000382  eb041400          ADD      r4,r4,r0,LSL #4
000386  6063              STR      r3,[r4,#4]
;;;534    
;;;535        /* Set up the data field */
;;;536        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
000388  7b8b              LDRB     r3,[r1,#0xe]
00038a  061c              LSLS     r4,r3,#24
00038c  7b4b              LDRB     r3,[r1,#0xd]
00038e  ea444403          ORR      r4,r4,r3,LSL #16
000392  7b0b              LDRB     r3,[r1,#0xc]
000394  ea442303          ORR      r3,r4,r3,LSL #8
000398  7acc              LDRB     r4,[r1,#0xb]
00039a  4323              ORRS     r3,r3,r4
00039c  f50274c0          ADD      r4,r2,#0x180
0003a0  eb041400          ADD      r4,r4,r0,LSL #4
0003a4  60a3              STR      r3,[r4,#8]
;;;537                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;538                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;539                                                 ((uint32_t)TxMessage->Data[0]));
;;;540        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
0003a6  7c8b              LDRB     r3,[r1,#0x12]
0003a8  061c              LSLS     r4,r3,#24
0003aa  7c4b              LDRB     r3,[r1,#0x11]
0003ac  ea444403          ORR      r4,r4,r3,LSL #16
0003b0  7c0b              LDRB     r3,[r1,#0x10]
0003b2  ea442303          ORR      r3,r4,r3,LSL #8
0003b6  7bcc              LDRB     r4,[r1,#0xf]
0003b8  4323              ORRS     r3,r3,r4
0003ba  f50274c0          ADD      r4,r2,#0x180
0003be  eb041400          ADD      r4,r4,r0,LSL #4
0003c2  60e3              STR      r3,[r4,#0xc]
;;;541                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;542                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;543                                                 ((uint32_t)TxMessage->Data[4]));
;;;544        /* Request transmission */
;;;545        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
0003c4  f50273c0          ADD      r3,r2,#0x180
0003c8  eb031300          ADD      r3,r3,r0,LSL #4
0003cc  681b              LDR      r3,[r3,#0]
0003ce  f0430401          ORR      r4,r3,#1
0003d2  f50273c0          ADD      r3,r2,#0x180
0003d6  eb031300          ADD      r3,r3,r0,LSL #4
0003da  601c              STR      r4,[r3,#0]
                  |L1.988|
;;;546      }
;;;547      return transmit_mailbox;
;;;548    }
0003dc  bd10              POP      {r4,pc}
;;;549    
                          ENDP

                  CAN_TransmitStatus PROC
;;;555      */
;;;556    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
0003de  4602              MOV      r2,r0
;;;557    {
;;;558      /* RQCP, TXOK and TME bits */
;;;559      uint8_t state = 0;
0003e0  2000              MOVS     r0,#0
;;;560      /* Check the parameters */
;;;561      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;562      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;563      switch (TransmitMailbox)
0003e2  b1a9              CBZ      r1,|L1.1040|
0003e4  2901              CMP      r1,#1
0003e6  d020              BEQ      |L1.1066|
0003e8  2902              CMP      r1,#2
0003ea  d13c              BNE      |L1.1126|
0003ec  e02c              B        |L1.1096|
0003ee  0000              DCW      0x0000
                  |L1.1008|
                          DCD      0x40006400
                  |L1.1012|
                          DCD      0x40006600
                  |L1.1016|
                          DCD      0x40006000
                  |L1.1020|
                          DCD      0x4000661c
                  |L1.1024|
                          DCD      0x4000660c
                  |L1.1028|
                          DCD      0x40006640
                  |L1.1032|
                          DCD      0x40006604
                  |L1.1036|
                          DCD      0x40006614
                  |L1.1040|
;;;564      {
;;;565        case (0): state |= (uint8_t)((CANx->TSR & TSR_RQCP0) << 2);
000410  6893              LDR      r3,[r2,#8]
000412  07db              LSLS     r3,r3,#31
000414  ea407053          ORR      r0,r0,r3,LSR #29
;;;566          state |= (uint8_t)((CANx->TSR & TSR_TXOK0) >> 0);
000418  6893              LDR      r3,[r2,#8]
00041a  f0030302          AND      r3,r3,#2
00041e  4318              ORRS     r0,r0,r3
;;;567          state |= (uint8_t)((CANx->TSR & TSR_TME0) >> 26);
000420  6893              LDR      r3,[r2,#8]
000422  f3c36380          UBFX     r3,r3,#26,#1
000426  4318              ORRS     r0,r0,r3
;;;568          break;
000428  e01f              B        |L1.1130|
                  |L1.1066|
;;;569        case (1): state |= (uint8_t)((CANx->TSR & TSR_RQCP1) >> 6);
00042a  6893              LDR      r3,[r2,#8]
00042c  f4037380          AND      r3,r3,#0x100
000430  ea401093          ORR      r0,r0,r3,LSR #6
;;;570          state |= (uint8_t)((CANx->TSR & TSR_TXOK1) >> 8);
000434  6893              LDR      r3,[r2,#8]
000436  f4037300          AND      r3,r3,#0x200
00043a  ea402013          ORR      r0,r0,r3,LSR #8
;;;571          state |= (uint8_t)((CANx->TSR & TSR_TME1) >> 27);
00043e  6893              LDR      r3,[r2,#8]
000440  f3c363c0          UBFX     r3,r3,#27,#1
000444  4318              ORRS     r0,r0,r3
;;;572          break;
000446  e010              B        |L1.1130|
                  |L1.1096|
;;;573        case (2): state |= (uint8_t)((CANx->TSR & TSR_RQCP2) >> 14);
000448  6893              LDR      r3,[r2,#8]
00044a  f4033380          AND      r3,r3,#0x10000
00044e  ea403093          ORR      r0,r0,r3,LSR #14
;;;574          state |= (uint8_t)((CANx->TSR & TSR_TXOK2) >> 16);
000452  6893              LDR      r3,[r2,#8]
000454  f4033300          AND      r3,r3,#0x20000
000458  ea404013          ORR      r0,r0,r3,LSR #16
;;;575          state |= (uint8_t)((CANx->TSR & TSR_TME2) >> 28);
00045c  6893              LDR      r3,[r2,#8]
00045e  f3c37300          UBFX     r3,r3,#28,#1
000462  4318              ORRS     r0,r0,r3
;;;576          break;
000464  e001              B        |L1.1130|
                  |L1.1126|
;;;577        default:
;;;578          state = CANTXFAILED;
000466  2000              MOVS     r0,#0
;;;579          break;
000468  bf00              NOP      
                  |L1.1130|
00046a  bf00              NOP                            ;568
;;;580      }
;;;581      switch (state)
00046c  b120              CBZ      r0,|L1.1144|
00046e  2805              CMP      r0,#5
000470  d004              BEQ      |L1.1148|
000472  2807              CMP      r0,#7
000474  d106              BNE      |L1.1156|
000476  e003              B        |L1.1152|
                  |L1.1144|
;;;582      {
;;;583          /* transmit pending  */
;;;584        case (0x0): state = CANTXPENDING;
000478  2002              MOVS     r0,#2
;;;585          break;
00047a  e005              B        |L1.1160|
                  |L1.1148|
;;;586          /* transmit failed  */
;;;587        case (0x5): state = CANTXFAILED;
00047c  2000              MOVS     r0,#0
;;;588          break;
00047e  e003              B        |L1.1160|
                  |L1.1152|
;;;589          /* transmit succedeed  */
;;;590        case (0x7): state = CANTXOK;
000480  2001              MOVS     r0,#1
;;;591          break;
000482  e001              B        |L1.1160|
                  |L1.1156|
;;;592        default:
;;;593          state = CANTXFAILED;
000484  2000              MOVS     r0,#0
;;;594          break;
000486  bf00              NOP      
                  |L1.1160|
000488  bf00              NOP                            ;585
;;;595      }
;;;596      return state;
;;;597    }
00048a  4770              BX       lr
;;;598    
                          ENDP

                  CAN_CancelTransmit PROC
;;;604      */
;;;605    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
00048c  b121              CBZ      r1,|L1.1176|
;;;606    {
;;;607      /* Check the parameters */
;;;608      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;609      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;610      /* abort transmission */
;;;611      switch (Mailbox)
00048e  2901              CMP      r1,#1
000490  d007              BEQ      |L1.1186|
000492  2902              CMP      r1,#2
000494  d10f              BNE      |L1.1206|
000496  e009              B        |L1.1196|
                  |L1.1176|
;;;612      {
;;;613        case (0): CANx->TSR |= TSR_ABRQ0;
000498  6882              LDR      r2,[r0,#8]
00049a  f0420280          ORR      r2,r2,#0x80
00049e  6082              STR      r2,[r0,#8]
;;;614          break;
0004a0  e00a              B        |L1.1208|
                  |L1.1186|
;;;615        case (1): CANx->TSR |= TSR_ABRQ1;
0004a2  6882              LDR      r2,[r0,#8]
0004a4  f4424200          ORR      r2,r2,#0x8000
0004a8  6082              STR      r2,[r0,#8]
;;;616          break;
0004aa  e005              B        |L1.1208|
                  |L1.1196|
;;;617        case (2): CANx->TSR |= TSR_ABRQ2;
0004ac  6882              LDR      r2,[r0,#8]
0004ae  f4420200          ORR      r2,r2,#0x800000
0004b2  6082              STR      r2,[r0,#8]
;;;618          break;
0004b4  e000              B        |L1.1208|
                  |L1.1206|
;;;619        default:
;;;620          break;
0004b6  bf00              NOP      
                  |L1.1208|
0004b8  bf00              NOP                            ;614
;;;621      }
;;;622    }
0004ba  4770              BX       lr
;;;623    
                          ENDP

                  CAN_FIFORelease PROC
;;;629      */
;;;630    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
0004bc  b911              CBNZ     r1,|L1.1220|
;;;631    {
;;;632      /* Check the parameters */
;;;633      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;634      assert_param(IS_CAN_FIFO(FIFONumber));
;;;635      /* Release FIFO0 */
;;;636      if (FIFONumber == CAN_FIFO0)
;;;637      {
;;;638        CANx->RF0R = RF0R_RFOM0;
0004be  2220              MOVS     r2,#0x20
0004c0  60c2              STR      r2,[r0,#0xc]
0004c2  e001              B        |L1.1224|
                  |L1.1220|
;;;639      }
;;;640      /* Release FIFO1 */
;;;641      else /* FIFONumber == CAN_FIFO1 */
;;;642      {
;;;643        CANx->RF1R = RF1R_RFOM1;
0004c4  2220              MOVS     r2,#0x20
0004c6  6102              STR      r2,[r0,#0x10]
                  |L1.1224|
;;;644      }
;;;645    }
0004c8  4770              BX       lr
;;;646    
                          ENDP

                  CAN_MessagePending PROC
;;;652      */
;;;653    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
0004ca  4602              MOV      r2,r0
;;;654    {
;;;655      uint8_t message_pending=0;
0004cc  2000              MOVS     r0,#0
;;;656      /* Check the parameters */
;;;657      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;658      assert_param(IS_CAN_FIFO(FIFONumber));
;;;659      if (FIFONumber == CAN_FIFO0)
0004ce  b919              CBNZ     r1,|L1.1240|
;;;660      {
;;;661        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
0004d0  68d3              LDR      r3,[r2,#0xc]
0004d2  f0030003          AND      r0,r3,#3
0004d6  e006              B        |L1.1254|
                  |L1.1240|
;;;662      }
;;;663      else if (FIFONumber == CAN_FIFO1)
0004d8  2901              CMP      r1,#1
0004da  d103              BNE      |L1.1252|
;;;664      {
;;;665        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
0004dc  6913              LDR      r3,[r2,#0x10]
0004de  f0030003          AND      r0,r3,#3
0004e2  e000              B        |L1.1254|
                  |L1.1252|
;;;666      }
;;;667      else
;;;668      {
;;;669        message_pending = 0;
0004e4  2000              MOVS     r0,#0
                  |L1.1254|
;;;670      }
;;;671      return message_pending;
;;;672    }
0004e6  4770              BX       lr
;;;673    
                          ENDP

                  CAN_Receive PROC
;;;681      */
;;;682    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
0004e8  b530              PUSH     {r4,r5,lr}
;;;683    {
0004ea  4604              MOV      r4,r0
0004ec  460d              MOV      r5,r1
0004ee  4613              MOV      r3,r2
;;;684      /* Check the parameters */
;;;685      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;686      assert_param(IS_CAN_FIFO(FIFONumber));
;;;687      /* Get the Id */
;;;688      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
0004f0  f50470d8          ADD      r0,r4,#0x1b0
0004f4  eb001005          ADD      r0,r0,r5,LSL #4
0004f8  6800              LDR      r0,[r0,#0]
0004fa  f0000004          AND      r0,r0,#4
0004fe  7218              STRB     r0,[r3,#8]
;;;689      if (RxMessage->IDE == CAN_ID_STD)
000500  7a18              LDRB     r0,[r3,#8]
000502  b950              CBNZ     r0,|L1.1306|
;;;690      {
;;;691        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
000504  f50470d8          ADD      r0,r4,#0x1b0
000508  eb001005          ADD      r0,r0,r5,LSL #4
00050c  6800              LDR      r0,[r0,#0]
00050e  f24071ff          MOV      r1,#0x7ff
000512  ea015050          AND      r0,r1,r0,LSR #21
000516  6018              STR      r0,[r3,#0]
000518  e009              B        |L1.1326|
                  |L1.1306|
;;;692      }
;;;693      else
;;;694      {
;;;695        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
00051a  f50470d8          ADD      r0,r4,#0x1b0
00051e  eb001005          ADD      r0,r0,r5,LSL #4
000522  6800              LDR      r0,[r0,#0]
000524  f06f4160          MVN      r1,#0xe0000000
000528  ea0100d0          AND      r0,r1,r0,LSR #3
00052c  6058              STR      r0,[r3,#4]
                  |L1.1326|
;;;696      }
;;;697      
;;;698      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
00052e  f50470d8          ADD      r0,r4,#0x1b0
000532  eb001005          ADD      r0,r0,r5,LSL #4
000536  6800              LDR      r0,[r0,#0]
000538  f0000002          AND      r0,r0,#2
00053c  7258              STRB     r0,[r3,#9]
;;;699      /* Get the DLC */
;;;700      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
00053e  f50470d8          ADD      r0,r4,#0x1b0
000542  eb001005          ADD      r0,r0,r5,LSL #4
000546  6840              LDR      r0,[r0,#4]
000548  f000000f          AND      r0,r0,#0xf
00054c  7298              STRB     r0,[r3,#0xa]
;;;701      /* Get the FMI */
;;;702      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
00054e  f50470d8          ADD      r0,r4,#0x1b0
000552  eb001005          ADD      r0,r0,r5,LSL #4
000556  6840              LDR      r0,[r0,#4]
000558  0a00              LSRS     r0,r0,#8
00055a  74d8              STRB     r0,[r3,#0x13]
;;;703      /* Get the data field */
;;;704      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
00055c  f50470d8          ADD      r0,r4,#0x1b0
000560  eb001005          ADD      r0,r0,r5,LSL #4
000564  6880              LDR      r0,[r0,#8]
000566  72d8              STRB     r0,[r3,#0xb]
;;;705      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
000568  f50470d8          ADD      r0,r4,#0x1b0
00056c  eb001005          ADD      r0,r0,r5,LSL #4
000570  6880              LDR      r0,[r0,#8]
000572  0a00              LSRS     r0,r0,#8
000574  7318              STRB     r0,[r3,#0xc]
;;;706      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000576  f50470d8          ADD      r0,r4,#0x1b0
00057a  eb001005          ADD      r0,r0,r5,LSL #4
00057e  6880              LDR      r0,[r0,#8]
000580  0c00              LSRS     r0,r0,#16
000582  7358              STRB     r0,[r3,#0xd]
;;;707      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
000584  f50470d8          ADD      r0,r4,#0x1b0
000588  eb001005          ADD      r0,r0,r5,LSL #4
00058c  6880              LDR      r0,[r0,#8]
00058e  0e00              LSRS     r0,r0,#24
000590  7398              STRB     r0,[r3,#0xe]
;;;708      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
000592  f50470d8          ADD      r0,r4,#0x1b0
000596  eb001005          ADD      r0,r0,r5,LSL #4
00059a  68c0              LDR      r0,[r0,#0xc]
00059c  73d8              STRB     r0,[r3,#0xf]
;;;709      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
00059e  f50470d8          ADD      r0,r4,#0x1b0
0005a2  eb001005          ADD      r0,r0,r5,LSL #4
0005a6  68c0              LDR      r0,[r0,#0xc]
0005a8  0a00              LSRS     r0,r0,#8
0005aa  7418              STRB     r0,[r3,#0x10]
;;;710      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
0005ac  f50470d8          ADD      r0,r4,#0x1b0
0005b0  eb001005          ADD      r0,r0,r5,LSL #4
0005b4  68c0              LDR      r0,[r0,#0xc]
0005b6  0c00              LSRS     r0,r0,#16
0005b8  7458              STRB     r0,[r3,#0x11]
;;;711      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
0005ba  f50470d8          ADD      r0,r4,#0x1b0
0005be  eb001005          ADD      r0,r0,r5,LSL #4
0005c2  68c0              LDR      r0,[r0,#0xc]
0005c4  0e00              LSRS     r0,r0,#24
0005c6  7498              STRB     r0,[r3,#0x12]
;;;712      /* Release the FIFO */
;;;713      CAN_FIFORelease(CANx, FIFONumber);
0005c8  4629              MOV      r1,r5
0005ca  4620              MOV      r0,r4
0005cc  f7fffffe          BL       CAN_FIFORelease
;;;714    }
0005d0  bd30              POP      {r4,r5,pc}
;;;715    
                          ENDP

                  CAN_DBGFreeze PROC
;;;722      */
;;;723    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
0005d2  b121              CBZ      r1,|L1.1502|
;;;724    {
;;;725      /* Check the parameters */
;;;726      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;727      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;728      
;;;729      if (NewState != DISABLE)
;;;730      {
;;;731        /* Enable Debug Freeze  */
;;;732        CANx->MCR |= MCR_DBF;
0005d4  6802              LDR      r2,[r0,#0]
0005d6  f4423280          ORR      r2,r2,#0x10000
0005da  6002              STR      r2,[r0,#0]
0005dc  e003              B        |L1.1510|
                  |L1.1502|
;;;733      }
;;;734      else
;;;735      {
;;;736        /* Disable Debug Freeze */
;;;737        CANx->MCR &= ~MCR_DBF;
0005de  6802              LDR      r2,[r0,#0]
0005e0  f4223280          BIC      r2,r2,#0x10000
0005e4  6002              STR      r2,[r0,#0]
                  |L1.1510|
;;;738      }
;;;739    }
0005e6  4770              BX       lr
;;;740    
                          ENDP

                  CAN_Sleep PROC
;;;745      */
;;;746    uint8_t CAN_Sleep(CAN_TypeDef* CANx)
0005e8  4601              MOV      r1,r0
;;;747    {
;;;748      uint8_t sleepstatus = CANSLEEPFAILED;
0005ea  2000              MOVS     r0,#0
;;;749      
;;;750      /* Check the parameters */
;;;751      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;752        
;;;753      /* Request Sleep mode */
;;;754       CANx->MCR = (((CANx->MCR) & (uint32_t)(~MCR_INRQ)) | MCR_SLEEP);
0005ec  680a              LDR      r2,[r1,#0]
0005ee  f0220201          BIC      r2,r2,#1
0005f2  f0420202          ORR      r2,r2,#2
0005f6  600a              STR      r2,[r1,#0]
;;;755       
;;;756      /* Sleep mode status */
;;;757      if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
0005f8  684a              LDR      r2,[r1,#4]
0005fa  f0020203          AND      r2,r2,#3
0005fe  2a02              CMP      r2,#2
000600  d100              BNE      |L1.1540|
;;;758      {
;;;759        /* Sleep mode not entered */
;;;760        sleepstatus =  CANSLEEPOK;
000602  2001              MOVS     r0,#1
                  |L1.1540|
;;;761      }
;;;762      /* At this step, sleep mode status */
;;;763       return (uint8_t)sleepstatus;
;;;764    }
000604  4770              BX       lr
;;;765    
                          ENDP

                  CAN_WakeUp PROC
;;;770      */
;;;771    uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
000606  4601              MOV      r1,r0
;;;772    {
;;;773      uint32_t wait_slak = SLAK_TimeOut	;
000608  f64f72ff          MOV      r2,#0xffff
;;;774      uint8_t wakeupstatus = CANWAKEUPFAILED;
00060c  2000              MOVS     r0,#0
;;;775      
;;;776      /* Check the parameters */
;;;777      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;778        
;;;779      /* Wake up request */
;;;780      CANx->MCR &= ~MCR_SLEEP;
00060e  680b              LDR      r3,[r1,#0]
000610  f0230302          BIC      r3,r3,#2
000614  600b              STR      r3,[r1,#0]
;;;781        
;;;782      /* Sleep mode status */
;;;783      while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
000616  e000              B        |L1.1562|
                  |L1.1560|
;;;784      {
;;;785       wait_slak--;
000618  1e52              SUBS     r2,r2,#1
                  |L1.1562|
00061a  684b              LDR      r3,[r1,#4]            ;783
00061c  f0030302          AND      r3,r3,#2              ;783
000620  2b02              CMP      r3,#2                 ;783
000622  d101              BNE      |L1.1576|
000624  2a00              CMP      r2,#0                 ;783
000626  d1f7              BNE      |L1.1560|
                  |L1.1576|
;;;786      }
;;;787      if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
000628  684b              LDR      r3,[r1,#4]
00062a  f0030302          AND      r3,r3,#2
00062e  2b02              CMP      r3,#2
000630  d000              BEQ      |L1.1588|
;;;788      {
;;;789       /* Sleep mode exited */
;;;790        wakeupstatus = CANWAKEUPOK;
000632  2001              MOVS     r0,#1
                  |L1.1588|
;;;791      }
;;;792      /* At this step, sleep mode status */
;;;793      return (uint8_t)wakeupstatus;
;;;794    }
000634  4770              BX       lr
;;;795    
                          ENDP

                  CAN_GetFlagStatus PROC
;;;802      */
;;;803    FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000636  4602              MOV      r2,r0
;;;804    {
;;;805      FlagStatus bitstatus = RESET;
000638  2000              MOVS     r0,#0
;;;806      /* Check the parameters */
;;;807      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;808      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;809      /* Check the status of the specified CAN flag */
;;;810      if ((CANx->ESR & CAN_FLAG) != (uint32_t)RESET)
00063a  6993              LDR      r3,[r2,#0x18]
00063c  420b              TST      r3,r1
00063e  d001              BEQ      |L1.1604|
;;;811      {
;;;812        /* CAN_FLAG is set */
;;;813        bitstatus = SET;
000640  2001              MOVS     r0,#1
000642  e000              B        |L1.1606|
                  |L1.1604|
;;;814      }
;;;815      else
;;;816      {
;;;817        /* CAN_FLAG is reset */
;;;818        bitstatus = RESET;
000644  2000              MOVS     r0,#0
                  |L1.1606|
;;;819      }
;;;820      /* Return the CAN_FLAG status */
;;;821      return  bitstatus;
;;;822    }
000646  4770              BX       lr
;;;823    
                          ENDP

                  CAN_ClearFlag PROC
;;;829      */
;;;830    void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000648  6982              LDR      r2,[r0,#0x18]
;;;831    {
;;;832      /* Check the parameters */
;;;833      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;834      assert_param(IS_CAN_FLAG(CAN_FLAG));
;;;835      /* Clear the selected CAN flags */
;;;836      CANx->ESR &= ~CAN_FLAG;
00064a  438a              BICS     r2,r2,r1
00064c  6182              STR      r2,[r0,#0x18]
;;;837    }
00064e  4770              BX       lr
;;;838    
                          ENDP

                  CheckITStatus PROC
;;;960      */
;;;961    static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
000650  4602              MOV      r2,r0
;;;962    {
;;;963      ITStatus pendingbitstatus = RESET;
000652  2000              MOVS     r0,#0
;;;964      
;;;965      if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000654  420a              TST      r2,r1
000656  d001              BEQ      |L1.1628|
;;;966      {
;;;967        /* CAN_IT is set */
;;;968        pendingbitstatus = SET;
000658  2001              MOVS     r0,#1
00065a  e000              B        |L1.1630|
                  |L1.1628|
;;;969      }
;;;970      else
;;;971      {
;;;972        /* CAN_IT is reset */
;;;973        pendingbitstatus = RESET;
00065c  2000              MOVS     r0,#0
                  |L1.1630|
;;;974      }
;;;975      return pendingbitstatus;
;;;976    }
00065e  4770              BX       lr
;;;977    
                          ENDP

                  CAN_GetITStatus PROC
;;;848      */
;;;849    ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000660  b570              PUSH     {r4-r6,lr}
;;;850    {
000662  4604              MOV      r4,r0
000664  460d              MOV      r5,r1
;;;851      ITStatus pendingbitstatus = RESET;
000666  2600              MOVS     r6,#0
;;;852      /* Check the parameters */
;;;853      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;854      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;855      switch (CAN_IT)
000668  2d40              CMP      r5,#0x40
00066a  d047              BEQ      |L1.1788|
00066c  dc0e              BGT      |L1.1676|
00066e  2d07              CMP      r5,#7
000670  d02b              BEQ      |L1.1738|
000672  dc06              BGT      |L1.1666|
000674  2d04              CMP      r5,#4
000676  d02f              BEQ      |L1.1752|
000678  2d05              CMP      r5,#5
00067a  d019              BEQ      |L1.1712|
00067c  2d06              CMP      r5,#6
00067e  d161              BNE      |L1.1860|
000680  e01c              B        |L1.1724|
                  |L1.1666|
000682  2d08              CMP      r5,#8
000684  d02e              BEQ      |L1.1764|
000686  2d20              CMP      r5,#0x20
000688  d15c              BNE      |L1.1860|
00068a  e031              B        |L1.1776|
                  |L1.1676|
00068c  f5b56f80          CMP      r5,#0x400
000690  d046              BEQ      |L1.1824|
000692  dc06              BGT      |L1.1698|
000694  f5b57f80          CMP      r5,#0x100
000698  d036              BEQ      |L1.1800|
00069a  f5b57f00          CMP      r5,#0x200
00069e  d151              BNE      |L1.1860|
0006a0  e038              B        |L1.1812|
                  |L1.1698|
0006a2  f5b53f80          CMP      r5,#0x10000
0006a6  d047              BEQ      |L1.1848|
0006a8  f5b53f00          CMP      r5,#0x20000
0006ac  d14a              BNE      |L1.1860|
0006ae  e03d              B        |L1.1836|
                  |L1.1712|
;;;856      {
;;;857        case CAN_IT_RQCP0:
;;;858          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP0);
0006b0  68a0              LDR      r0,[r4,#8]
0006b2  2101              MOVS     r1,#1
0006b4  f7fffffe          BL       CheckITStatus
0006b8  4606              MOV      r6,r0
;;;859          break;
0006ba  e045              B        |L1.1864|
                  |L1.1724|
;;;860        case CAN_IT_RQCP1:
;;;861          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP1);
0006bc  68a0              LDR      r0,[r4,#8]
0006be  f44f7180          MOV      r1,#0x100
0006c2  f7fffffe          BL       CheckITStatus
0006c6  4606              MOV      r6,r0
;;;862          break;
0006c8  e03e              B        |L1.1864|
                  |L1.1738|
;;;863        case CAN_IT_RQCP2:
;;;864          pendingbitstatus = CheckITStatus(CANx->TSR, TSR_RQCP2);
0006ca  68a0              LDR      r0,[r4,#8]
0006cc  f44f3180          MOV      r1,#0x10000
0006d0  f7fffffe          BL       CheckITStatus
0006d4  4606              MOV      r6,r0
;;;865          break;
0006d6  e037              B        |L1.1864|
                  |L1.1752|
;;;866        case CAN_IT_FF0:
;;;867          pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FULL0);
0006d8  68e0              LDR      r0,[r4,#0xc]
0006da  2108              MOVS     r1,#8
0006dc  f7fffffe          BL       CheckITStatus
0006e0  4606              MOV      r6,r0
;;;868          break;
0006e2  e031              B        |L1.1864|
                  |L1.1764|
;;;869        case CAN_IT_FOV0:
;;;870          pendingbitstatus = CheckITStatus(CANx->RF0R, RF0R_FOVR0);
0006e4  68e0              LDR      r0,[r4,#0xc]
0006e6  2110              MOVS     r1,#0x10
0006e8  f7fffffe          BL       CheckITStatus
0006ec  4606              MOV      r6,r0
;;;871          break;
0006ee  e02b              B        |L1.1864|
                  |L1.1776|
;;;872        case CAN_IT_FF1:
;;;873          pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FULL1);
0006f0  6920              LDR      r0,[r4,#0x10]
0006f2  2108              MOVS     r1,#8
0006f4  f7fffffe          BL       CheckITStatus
0006f8  4606              MOV      r6,r0
;;;874          break;
0006fa  e025              B        |L1.1864|
                  |L1.1788|
;;;875        case CAN_IT_FOV1:
;;;876          pendingbitstatus = CheckITStatus(CANx->RF1R, RF1R_FOVR1);
0006fc  6920              LDR      r0,[r4,#0x10]
0006fe  2110              MOVS     r1,#0x10
000700  f7fffffe          BL       CheckITStatus
000704  4606              MOV      r6,r0
;;;877          break;
000706  e01f              B        |L1.1864|
                  |L1.1800|
;;;878        case CAN_IT_EWG:
;;;879          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EWGF);
000708  69a0              LDR      r0,[r4,#0x18]
00070a  2101              MOVS     r1,#1
00070c  f7fffffe          BL       CheckITStatus
000710  4606              MOV      r6,r0
;;;880          break;
000712  e019              B        |L1.1864|
                  |L1.1812|
;;;881        case CAN_IT_EPV:
;;;882          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_EPVF);
000714  69a0              LDR      r0,[r4,#0x18]
000716  2102              MOVS     r1,#2
000718  f7fffffe          BL       CheckITStatus
00071c  4606              MOV      r6,r0
;;;883          break;
00071e  e013              B        |L1.1864|
                  |L1.1824|
;;;884        case CAN_IT_BOF:
;;;885          pendingbitstatus = CheckITStatus(CANx->ESR, ESR_BOFF);
000720  69a0              LDR      r0,[r4,#0x18]
000722  2104              MOVS     r1,#4
000724  f7fffffe          BL       CheckITStatus
000728  4606              MOV      r6,r0
;;;886          break;
00072a  e00d              B        |L1.1864|
                  |L1.1836|
;;;887        case CAN_IT_SLK:
;;;888          pendingbitstatus = CheckITStatus(CANx->MSR, MSR_SLAKI);
00072c  6860              LDR      r0,[r4,#4]
00072e  2110              MOVS     r1,#0x10
000730  f7fffffe          BL       CheckITStatus
000734  4606              MOV      r6,r0
;;;889          break;
000736  e007              B        |L1.1864|
                  |L1.1848|
;;;890        case CAN_IT_WKU:
;;;891          pendingbitstatus = CheckITStatus(CANx->MSR, MSR_WKUI);
000738  6860              LDR      r0,[r4,#4]
00073a  2108              MOVS     r1,#8
00073c  f7fffffe          BL       CheckITStatus
000740  4606              MOV      r6,r0
;;;892          break;
000742  e001              B        |L1.1864|
                  |L1.1860|
;;;893        default :
;;;894          pendingbitstatus = RESET;
000744  2600              MOVS     r6,#0
;;;895          break;
000746  bf00              NOP      
                  |L1.1864|
000748  bf00              NOP                            ;859
;;;896      }
;;;897      /* Return the CAN_IT status */
;;;898      return  pendingbitstatus;
00074a  4630              MOV      r0,r6
;;;899    }
00074c  bd70              POP      {r4-r6,pc}
;;;900    
                          ENDP

                  CAN_ClearITPendingBit PROC
;;;906      */
;;;907    void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
00074e  2940              CMP      r1,#0x40
;;;908    {
;;;909      /* Check the parameters */
;;;910      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;911      assert_param(IS_CAN_ITStatus(CAN_IT));
;;;912      switch (CAN_IT)
000750  d035              BEQ      |L1.1982|
000752  dc0e              BGT      |L1.1906|
000754  2907              CMP      r1,#7
000756  d025              BEQ      |L1.1956|
000758  dc06              BGT      |L1.1896|
00075a  2904              CMP      r1,#4
00075c  d026              BEQ      |L1.1964|
00075e  2905              CMP      r1,#5
000760  d019              BEQ      |L1.1942|
000762  2906              CMP      r1,#6
000764  d143              BNE      |L1.2030|
000766  e019              B        |L1.1948|
                  |L1.1896|
000768  2908              CMP      r1,#8
00076a  d022              BEQ      |L1.1970|
00076c  2920              CMP      r1,#0x20
00076e  d13e              BNE      |L1.2030|
000770  e022              B        |L1.1976|
                  |L1.1906|
000772  f5b16f80          CMP      r1,#0x400
000776  d02f              BEQ      |L1.2008|
000778  dc06              BGT      |L1.1928|
00077a  f5b17f80          CMP      r1,#0x100
00077e  d021              BEQ      |L1.1988|
000780  f5b17f00          CMP      r1,#0x200
000784  d133              BNE      |L1.2030|
000786  e022              B        |L1.1998|
                  |L1.1928|
000788  f5b13f80          CMP      r1,#0x10000
00078c  d029              BEQ      |L1.2018|
00078e  f5b13f00          CMP      r1,#0x20000
000792  d12c              BNE      |L1.2030|
000794  e028              B        |L1.2024|
                  |L1.1942|
;;;913      {
;;;914        case CAN_IT_RQCP0:
;;;915          CANx->TSR = TSR_RQCP0; /* rc_w1*/
000796  2201              MOVS     r2,#1
000798  6082              STR      r2,[r0,#8]
;;;916          break;
00079a  e029              B        |L1.2032|
                  |L1.1948|
;;;917        case CAN_IT_RQCP1:
;;;918          CANx->TSR = TSR_RQCP1; /* rc_w1*/
00079c  f44f7280          MOV      r2,#0x100
0007a0  6082              STR      r2,[r0,#8]
;;;919          break;
0007a2  e025              B        |L1.2032|
                  |L1.1956|
;;;920        case CAN_IT_RQCP2:
;;;921          CANx->TSR = TSR_RQCP2; /* rc_w1*/
0007a4  f44f3280          MOV      r2,#0x10000
0007a8  6082              STR      r2,[r0,#8]
;;;922          break;
0007aa  e021              B        |L1.2032|
                  |L1.1964|
;;;923        case CAN_IT_FF0:
;;;924          CANx->RF0R = RF0R_FULL0; /* rc_w1*/
0007ac  2208              MOVS     r2,#8
0007ae  60c2              STR      r2,[r0,#0xc]
;;;925          break;
0007b0  e01e              B        |L1.2032|
                  |L1.1970|
;;;926        case CAN_IT_FOV0:
;;;927          CANx->RF0R = RF0R_FOVR0; /* rc_w1*/
0007b2  2210              MOVS     r2,#0x10
0007b4  60c2              STR      r2,[r0,#0xc]
;;;928          break;
0007b6  e01b              B        |L1.2032|
                  |L1.1976|
;;;929        case CAN_IT_FF1:
;;;930          CANx->RF1R = RF1R_FULL1; /* rc_w1*/
0007b8  2208              MOVS     r2,#8
0007ba  6102              STR      r2,[r0,#0x10]
;;;931          break;
0007bc  e018              B        |L1.2032|
                  |L1.1982|
;;;932        case CAN_IT_FOV1:
;;;933          CANx->RF1R = RF1R_FOVR1; /* rc_w1*/
0007be  2210              MOVS     r2,#0x10
0007c0  6102              STR      r2,[r0,#0x10]
;;;934          break;
0007c2  e015              B        |L1.2032|
                  |L1.1988|
;;;935        case CAN_IT_EWG:
;;;936          CANx->ESR &= ~ ESR_EWGF; /* rw */
0007c4  6982              LDR      r2,[r0,#0x18]
0007c6  f0220201          BIC      r2,r2,#1
0007ca  6182              STR      r2,[r0,#0x18]
;;;937          break;
0007cc  e010              B        |L1.2032|
                  |L1.1998|
;;;938        case CAN_IT_EPV:
;;;939          CANx->ESR &= ~ ESR_EPVF; /* rw */
0007ce  6982              LDR      r2,[r0,#0x18]
0007d0  f0220202          BIC      r2,r2,#2
0007d4  6182              STR      r2,[r0,#0x18]
;;;940          break;
0007d6  e00b              B        |L1.2032|
                  |L1.2008|
;;;941        case CAN_IT_BOF:
;;;942          CANx->ESR &= ~ ESR_BOFF; /* rw */
0007d8  6982              LDR      r2,[r0,#0x18]
0007da  f0220204          BIC      r2,r2,#4
0007de  6182              STR      r2,[r0,#0x18]
;;;943          break;
0007e0  e006              B        |L1.2032|
                  |L1.2018|
;;;944        case CAN_IT_WKU:
;;;945          CANx->MSR = MSR_WKUI;  /* rc_w1*/
0007e2  2208              MOVS     r2,#8
0007e4  6042              STR      r2,[r0,#4]
;;;946          break;
0007e6  e003              B        |L1.2032|
                  |L1.2024|
;;;947        case CAN_IT_SLK:
;;;948          CANx->MSR = MSR_SLAKI;  /* rc_w1*/
0007e8  2210              MOVS     r2,#0x10
0007ea  6042              STR      r2,[r0,#4]
;;;949          break;
0007ec  e000              B        |L1.2032|
                  |L1.2030|
;;;950        default :
;;;951          break;
0007ee  bf00              NOP      
                  |L1.2032|
0007f0  bf00              NOP                            ;916
;;;952      }
;;;953    }
0007f2  4770              BX       lr
;;;954    
                          ENDP

