; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\os_q.o --depend=.\exe\os_q.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\os_q.crf ..\Source\OS\uCOS-II\Source\os_q.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  OSQAccept PROC
;;;60     #if OS_Q_ACCEPT_EN > 0
;;;61     void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;63         void      *pmsg;
;;;64         OS_Q      *pq;
;;;65     #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;66         OS_CPU_SR  cpu_sr = 0;
000008  f04f0800          MOV      r8,#0
;;;67     #endif
;;;68     
;;;69     
;;;70     
;;;71     #if OS_ARG_CHK_EN > 0
;;;72         if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
00000c  b915              CBNZ     r5,|L1.20|
;;;73             return ((void *)0);
00000e  2000              MOVS     r0,#0
                  |L1.16|
;;;74         }
;;;75         if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;76             *perr = OS_ERR_PEVENT_NULL;
;;;77             return ((void *)0);
;;;78         }
;;;79     #endif
;;;80         if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
;;;81             *perr = OS_ERR_EVENT_TYPE;
;;;82             return ((void *)0);
;;;83         }
;;;84         OS_ENTER_CRITICAL();
;;;85         pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;86         if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
;;;87             pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;88             pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;89             if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;90                 pq->OSQOut = pq->OSQStart;
;;;91             }
;;;92             *perr = OS_ERR_NONE;
;;;93         } else {
;;;94             *perr = OS_ERR_Q_EMPTY;
;;;95             pmsg  = (void *)0;                       /* Queue is empty                                     */
;;;96         }
;;;97         OS_EXIT_CRITICAL();
;;;98         return (pmsg);                               /* Return message received (or NULL)                  */
;;;99     }
000010  e8bd81f0          POP      {r4-r8,pc}
                  |L1.20|
000014  b91e              CBNZ     r6,|L1.30|
000016  2004              MOVS     r0,#4                 ;76
000018  7028              STRB     r0,[r5,#0]            ;76
00001a  2000              MOVS     r0,#0                 ;77
00001c  e7f8              B        |L1.16|
                  |L1.30|
00001e  7830              LDRB     r0,[r6,#0]            ;80
000020  2802              CMP      r0,#2                 ;80
000022  d003              BEQ      |L1.44|
000024  2001              MOVS     r0,#1                 ;81
000026  7028              STRB     r0,[r5,#0]            ;81
000028  2000              MOVS     r0,#0                 ;82
00002a  e7f1              B        |L1.16|
                  |L1.44|
00002c  f7fffffe          BL       OS_CPU_SR_Save
000030  4680              MOV      r8,r0                 ;84
000032  6874              LDR      r4,[r6,#4]            ;85
000034  8ae0              LDRH     r0,[r4,#0x16]         ;86
000036  2800              CMP      r0,#0                 ;86
000038  dd0f              BLE      |L1.90|
00003a  6921              LDR      r1,[r4,#0x10]         ;87
00003c  1d08              ADDS     r0,r1,#4              ;87
00003e  6120              STR      r0,[r4,#0x10]         ;87
000040  680f              LDR      r7,[r1,#0]            ;87
000042  8ae0              LDRH     r0,[r4,#0x16]         ;88
000044  1e40              SUBS     r0,r0,#1              ;88
000046  82e0              STRH     r0,[r4,#0x16]         ;88
000048  68a1              LDR      r1,[r4,#8]            ;89
00004a  6920              LDR      r0,[r4,#0x10]         ;89
00004c  4288              CMP      r0,r1                 ;89
00004e  d101              BNE      |L1.84|
000050  6860              LDR      r0,[r4,#4]            ;90
000052  6120              STR      r0,[r4,#0x10]         ;90
                  |L1.84|
000054  2000              MOVS     r0,#0                 ;92
000056  7028              STRB     r0,[r5,#0]            ;92
000058  e002              B        |L1.96|
                  |L1.90|
00005a  201f              MOVS     r0,#0x1f              ;94
00005c  7028              STRB     r0,[r5,#0]            ;94
00005e  2700              MOVS     r7,#0                 ;95
                  |L1.96|
000060  4640              MOV      r0,r8                 ;97
000062  f7fffffe          BL       OS_CPU_SR_Restore
000066  4638              MOV      r0,r7                 ;98
000068  e7d2              B        |L1.16|
;;;100    #endif
                          ENDP

                  OSQCreate PROC
;;;120    
;;;121    OS_EVENT  *OSQCreate (void **start, INT16U size)
00006a  e92d41f0          PUSH     {r4-r8,lr}
;;;122    {
00006e  4606              MOV      r6,r0
000070  460f              MOV      r7,r1
;;;123        OS_EVENT  *pevent;
;;;124        OS_Q      *pq;
;;;125    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;126        OS_CPU_SR  cpu_sr = 0;
000072  f04f0800          MOV      r8,#0
;;;127    #endif
;;;128    
;;;129    
;;;130    
;;;131        if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
000076  48ff              LDR      r0,|L1.1140|
000078  7800              LDRB     r0,[r0,#0]  ; OSIntNesting
00007a  2800              CMP      r0,#0
00007c  dd02              BLE      |L1.132|
;;;132            return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
00007e  2000              MOVS     r0,#0
                  |L1.128|
;;;133        }
;;;134        OS_ENTER_CRITICAL();
;;;135        pevent = OSEventFreeList;                    /* Get next free event control block                  */
;;;136        if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
;;;137            OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
;;;138        }
;;;139        OS_EXIT_CRITICAL();
;;;140        if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
;;;141            OS_ENTER_CRITICAL();
;;;142            pq = OSQFreeList;                        /* Get a free queue control block                     */
;;;143            if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
;;;144                OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
;;;145                OS_EXIT_CRITICAL();
;;;146                pq->OSQStart           = start;               /*      Initialize the queue                 */
;;;147                pq->OSQEnd             = &start[size];
;;;148                pq->OSQIn              = start;
;;;149                pq->OSQOut             = start;
;;;150                pq->OSQSize            = size;
;;;151                pq->OSQEntries         = 0;
;;;152                pevent->OSEventType    = OS_EVENT_TYPE_Q;
;;;153                pevent->OSEventCnt     = 0;
;;;154                pevent->OSEventPtr     = pq;
;;;155    #if OS_EVENT_NAME_SIZE > 1
;;;156                pevent->OSEventName[0] = '?';                  /* Unknown name                             */
;;;157                pevent->OSEventName[1] = OS_ASCII_NUL;
;;;158    #endif
;;;159                OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
;;;160            } else {
;;;161                pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
;;;162                OSEventFreeList    = pevent;
;;;163                OS_EXIT_CRITICAL();
;;;164                pevent = (OS_EVENT *)0;
;;;165            }
;;;166        }
;;;167        return (pevent);
;;;168    }
000080  e8bd81f0          POP      {r4-r8,pc}
                  |L1.132|
000084  f7fffffe          BL       OS_CPU_SR_Save
000088  4680              MOV      r8,r0                 ;134
00008a  48fb              LDR      r0,|L1.1144|
00008c  6804              LDR      r4,[r0,#0]            ;135  ; OSEventFreeList
00008e  6800              LDR      r0,[r0,#0]            ;136  ; OSEventFreeList
000090  b120              CBZ      r0,|L1.156|
000092  48f9              LDR      r0,|L1.1144|
000094  6800              LDR      r0,[r0,#0]            ;137  ; OSEventFreeList
000096  6840              LDR      r0,[r0,#4]            ;137
000098  49f7              LDR      r1,|L1.1144|
00009a  6008              STR      r0,[r1,#0]            ;137  ; OSEventFreeList
                  |L1.156|
00009c  4640              MOV      r0,r8                 ;139
00009e  f7fffffe          BL       OS_CPU_SR_Restore
0000a2  b30c              CBZ      r4,|L1.232|
0000a4  f7fffffe          BL       OS_CPU_SR_Save
0000a8  4680              MOV      r8,r0                 ;141
0000aa  48f4              LDR      r0,|L1.1148|
0000ac  6805              LDR      r5,[r0,#0]            ;142  ; OSQFreeList
0000ae  b1e5              CBZ      r5,|L1.234|
0000b0  6800              LDR      r0,[r0,#0]            ;144  ; OSQFreeList
0000b2  6800              LDR      r0,[r0,#0]            ;144
0000b4  49f1              LDR      r1,|L1.1148|
0000b6  6008              STR      r0,[r1,#0]            ;144  ; OSQFreeList
0000b8  4640              MOV      r0,r8                 ;145
0000ba  f7fffffe          BL       OS_CPU_SR_Restore
0000be  606e              STR      r6,[r5,#4]            ;146
0000c0  eb060087          ADD      r0,r6,r7,LSL #2       ;147
0000c4  60a8              STR      r0,[r5,#8]            ;147
0000c6  60ee              STR      r6,[r5,#0xc]          ;148
0000c8  612e              STR      r6,[r5,#0x10]         ;149
0000ca  82af              STRH     r7,[r5,#0x14]         ;150
0000cc  2000              MOVS     r0,#0                 ;151
0000ce  82e8              STRH     r0,[r5,#0x16]         ;151
0000d0  2002              MOVS     r0,#2                 ;152
0000d2  7020              STRB     r0,[r4,#0]            ;152
0000d4  2000              MOVS     r0,#0                 ;153
0000d6  8120              STRH     r0,[r4,#8]            ;153
0000d8  6065              STR      r5,[r4,#4]            ;154
0000da  203f              MOVS     r0,#0x3f              ;156
0000dc  73e0              STRB     r0,[r4,#0xf]          ;156
0000de  2100              MOVS     r1,#0                 ;157
0000e0  7421              STRB     r1,[r4,#0x10]         ;157
0000e2  4620              MOV      r0,r4                 ;159
0000e4  f7fffffe          BL       OS_EventWaitListInit
                  |L1.232|
0000e8  e008              B        |L1.252|
                  |L1.234|
0000ea  48e3              LDR      r0,|L1.1144|
0000ec  6800              LDR      r0,[r0,#0]            ;161  ; OSEventFreeList
0000ee  6060              STR      r0,[r4,#4]            ;161
0000f0  48e1              LDR      r0,|L1.1144|
0000f2  6004              STR      r4,[r0,#0]            ;162  ; OSEventFreeList
0000f4  4640              MOV      r0,r8                 ;163
0000f6  f7fffffe          BL       OS_CPU_SR_Restore
0000fa  2400              MOVS     r4,#0                 ;164
                  |L1.252|
0000fc  4620              MOV      r0,r4                 ;167
0000fe  e7bf              B        |L1.128|
;;;169    /*$PAGE*/
                          ENDP

                  OSQDel PROC
;;;211    #if OS_Q_DEL_EN > 0
;;;212    OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
000100  e92d47f0          PUSH     {r4-r10,lr}
;;;213    {
000104  4604              MOV      r4,r0
000106  4689              MOV      r9,r1
000108  4615              MOV      r5,r2
;;;214        BOOLEAN    tasks_waiting;
;;;215        OS_EVENT  *pevent_return;
;;;216        OS_Q      *pq;
;;;217    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;218        OS_CPU_SR  cpu_sr = 0;
00010a  f04f0a00          MOV      r10,#0
;;;219    #endif
;;;220    
;;;221    
;;;222    
;;;223    #if OS_ARG_CHK_EN > 0
;;;224        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00010e  b915              CBNZ     r5,|L1.278|
;;;225            return (pevent);
000110  4620              MOV      r0,r4
                  |L1.274|
;;;226        }
;;;227        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;228            *perr = OS_ERR_PEVENT_NULL;
;;;229            return (pevent);
;;;230        }
;;;231    #endif
;;;232        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
;;;233            *perr = OS_ERR_EVENT_TYPE;
;;;234            return (pevent);
;;;235        }
;;;236        if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
;;;237            *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
;;;238            return (pevent);
;;;239        }
;;;240        OS_ENTER_CRITICAL();
;;;241        if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
;;;242            tasks_waiting = OS_TRUE;                           /* Yes                                      */
;;;243        } else {
;;;244            tasks_waiting = OS_FALSE;                          /* No                                       */
;;;245        }
;;;246        switch (opt) {
;;;247            case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
;;;248                 if (tasks_waiting == OS_FALSE) {
;;;249    #if OS_EVENT_NAME_SIZE > 1
;;;250                     pevent->OSEventName[0] = '?';             /* Unknown name                             */
;;;251                     pevent->OSEventName[1] = OS_ASCII_NUL;
;;;252    #endif
;;;253                     pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
;;;254                     pq->OSQPtr             = OSQFreeList;
;;;255                     OSQFreeList            = pq;
;;;256                     pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;257                     pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
;;;258                     pevent->OSEventCnt     = 0;
;;;259                     OSEventFreeList        = pevent;          /* Get next free event control block        */
;;;260                     OS_EXIT_CRITICAL();
;;;261                     *perr                  = OS_ERR_NONE;
;;;262                     pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
;;;263                 } else {
;;;264                     OS_EXIT_CRITICAL();
;;;265                     *perr                  = OS_ERR_TASK_WAITING;
;;;266                     pevent_return          = pevent;
;;;267                 }
;;;268                 break;
;;;269    
;;;270            case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
;;;271                 while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
;;;272                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
;;;273                 }
;;;274    #if OS_EVENT_NAME_SIZE > 1
;;;275                 pevent->OSEventName[0] = '?';                 /* Unknown name                             */
;;;276                 pevent->OSEventName[1] = OS_ASCII_NUL;
;;;277    #endif
;;;278                 pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
;;;279                 pq->OSQPtr             = OSQFreeList;
;;;280                 OSQFreeList            = pq;
;;;281                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
;;;282                 pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
;;;283                 pevent->OSEventCnt     = 0;
;;;284                 OSEventFreeList        = pevent;              /* Get next free event control block        */
;;;285                 OS_EXIT_CRITICAL();
;;;286                 if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
;;;287                     OS_Sched();                               /* Find highest priority task ready to run  */
;;;288                 }
;;;289                 *perr                  = OS_ERR_NONE;
;;;290                 pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
;;;291                 break;
;;;292    
;;;293            default:
;;;294                 OS_EXIT_CRITICAL();
;;;295                 *perr                  = OS_ERR_INVALID_OPT;
;;;296                 pevent_return          = pevent;
;;;297                 break;
;;;298        }
;;;299        return (pevent_return);
;;;300    }
000112  e8bd87f0          POP      {r4-r10,pc}
                  |L1.278|
000116  b91c              CBNZ     r4,|L1.288|
000118  2004              MOVS     r0,#4                 ;228
00011a  7028              STRB     r0,[r5,#0]            ;228
00011c  4620              MOV      r0,r4                 ;229
00011e  e7f8              B        |L1.274|
                  |L1.288|
000120  7820              LDRB     r0,[r4,#0]            ;232
000122  2802              CMP      r0,#2                 ;232
000124  d003              BEQ      |L1.302|
000126  2001              MOVS     r0,#1                 ;233
000128  7028              STRB     r0,[r5,#0]            ;233
00012a  4620              MOV      r0,r4                 ;234
00012c  e7f1              B        |L1.274|
                  |L1.302|
00012e  48d1              LDR      r0,|L1.1140|
000130  7800              LDRB     r0,[r0,#0]            ;236  ; OSIntNesting
000132  2800              CMP      r0,#0                 ;236
000134  dd03              BLE      |L1.318|
000136  200f              MOVS     r0,#0xf               ;237
000138  7028              STRB     r0,[r5,#0]            ;237
00013a  4620              MOV      r0,r4                 ;238
00013c  e7e9              B        |L1.274|
                  |L1.318|
00013e  f7fffffe          BL       OS_CPU_SR_Save
000142  4682              MOV      r10,r0                ;240
000144  7aa0              LDRB     r0,[r4,#0xa]          ;241
000146  b110              CBZ      r0,|L1.334|
000148  f04f0801          MOV      r8,#1                 ;242
00014c  e001              B        |L1.338|
                  |L1.334|
00014e  f04f0800          MOV      r8,#0                 ;244
                  |L1.338|
000152  f1b90f00          CMP      r9,#0                 ;246
000156  d003              BEQ      |L1.352|
000158  f1b90f01          CMP      r9,#1                 ;246
00015c  d14d              BNE      |L1.506|
00015e  e023              B        |L1.424|
                  |L1.352|
000160  f1b80f00          CMP      r8,#0                 ;248
000164  d119              BNE      |L1.410|
000166  203f              MOVS     r0,#0x3f              ;250
000168  73e0              STRB     r0,[r4,#0xf]          ;250
00016a  2100              MOVS     r1,#0                 ;251
00016c  7421              STRB     r1,[r4,#0x10]         ;251
00016e  6866              LDR      r6,[r4,#4]            ;253
000170  48c2              LDR      r0,|L1.1148|
000172  6800              LDR      r0,[r0,#0]            ;254  ; OSQFreeList
000174  6030              STR      r0,[r6,#0]            ;254
000176  48c1              LDR      r0,|L1.1148|
000178  6006              STR      r6,[r0,#0]            ;255  ; OSQFreeList
00017a  2000              MOVS     r0,#0                 ;256
00017c  7020              STRB     r0,[r4,#0]            ;256
00017e  48be              LDR      r0,|L1.1144|
000180  6800              LDR      r0,[r0,#0]            ;257  ; OSEventFreeList
000182  6060              STR      r0,[r4,#4]            ;257
000184  2000              MOVS     r0,#0                 ;258
000186  8120              STRH     r0,[r4,#8]            ;258
000188  48bb              LDR      r0,|L1.1144|
00018a  6004              STR      r4,[r0,#0]            ;259  ; OSEventFreeList
00018c  4650              MOV      r0,r10                ;260
00018e  f7fffffe          BL       OS_CPU_SR_Restore
000192  2000              MOVS     r0,#0                 ;261
000194  7028              STRB     r0,[r5,#0]            ;261
000196  2700              MOVS     r7,#0                 ;262
000198  e005              B        |L1.422|
                  |L1.410|
00019a  4650              MOV      r0,r10                ;264
00019c  f7fffffe          BL       OS_CPU_SR_Restore
0001a0  2049              MOVS     r0,#0x49              ;265
0001a2  7028              STRB     r0,[r5,#0]            ;265
0001a4  4627              MOV      r7,r4                 ;266
                  |L1.422|
0001a6  e02f              B        |L1.520|
                  |L1.424|
0001a8  e005              B        |L1.438|
                  |L1.426|
0001aa  2300              MOVS     r3,#0                 ;272
0001ac  2204              MOVS     r2,#4                 ;272
0001ae  4619              MOV      r1,r3                 ;272
0001b0  4620              MOV      r0,r4                 ;272
0001b2  f7fffffe          BL       OS_EventTaskRdy
                  |L1.438|
0001b6  7aa0              LDRB     r0,[r4,#0xa]          ;271
0001b8  2800              CMP      r0,#0                 ;271
0001ba  d1f6              BNE      |L1.426|
0001bc  203f              MOVS     r0,#0x3f              ;275
0001be  73e0              STRB     r0,[r4,#0xf]          ;275
0001c0  2100              MOVS     r1,#0                 ;276
0001c2  7421              STRB     r1,[r4,#0x10]         ;276
0001c4  6866              LDR      r6,[r4,#4]            ;278
0001c6  48ad              LDR      r0,|L1.1148|
0001c8  6800              LDR      r0,[r0,#0]            ;279  ; OSQFreeList
0001ca  6030              STR      r0,[r6,#0]            ;279
0001cc  48ab              LDR      r0,|L1.1148|
0001ce  6006              STR      r6,[r0,#0]            ;280  ; OSQFreeList
0001d0  2000              MOVS     r0,#0                 ;281
0001d2  7020              STRB     r0,[r4,#0]            ;281
0001d4  48a8              LDR      r0,|L1.1144|
0001d6  6800              LDR      r0,[r0,#0]            ;282  ; OSEventFreeList
0001d8  6060              STR      r0,[r4,#4]            ;282
0001da  2000              MOVS     r0,#0                 ;283
0001dc  8120              STRH     r0,[r4,#8]            ;283
0001de  48a6              LDR      r0,|L1.1144|
0001e0  6004              STR      r4,[r0,#0]            ;284  ; OSEventFreeList
0001e2  4650              MOV      r0,r10                ;285
0001e4  f7fffffe          BL       OS_CPU_SR_Restore
0001e8  f1b80f01          CMP      r8,#1                 ;286
0001ec  d101              BNE      |L1.498|
0001ee  f7fffffe          BL       OS_Sched
                  |L1.498|
0001f2  2000              MOVS     r0,#0                 ;289
0001f4  7028              STRB     r0,[r5,#0]            ;289
0001f6  2700              MOVS     r7,#0                 ;290
0001f8  e006              B        |L1.520|
                  |L1.506|
0001fa  4650              MOV      r0,r10                ;294
0001fc  f7fffffe          BL       OS_CPU_SR_Restore
000200  2007              MOVS     r0,#7                 ;295
000202  7028              STRB     r0,[r5,#0]            ;295
000204  4627              MOV      r7,r4                 ;296
000206  bf00              NOP                            ;297
                  |L1.520|
000208  bf00              NOP                            ;268
00020a  4638              MOV      r0,r7                 ;299
00020c  e781              B        |L1.274|
;;;301    #endif
                          ENDP

                  OSQFlush PROC
;;;323    #if OS_Q_FLUSH_EN > 0
;;;324    INT8U  OSQFlush (OS_EVENT *pevent)
00020e  b570              PUSH     {r4-r6,lr}
;;;325    {
000210  4605              MOV      r5,r0
;;;326        OS_Q      *pq;
;;;327    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;328        OS_CPU_SR  cpu_sr = 0;
000212  2600              MOVS     r6,#0
;;;329    #endif
;;;330    
;;;331    
;;;332    
;;;333    #if OS_ARG_CHK_EN > 0
;;;334        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000214  b90d              CBNZ     r5,|L1.538|
;;;335            return (OS_ERR_PEVENT_NULL);
000216  2004              MOVS     r0,#4
                  |L1.536|
;;;336        }
;;;337        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;338            return (OS_ERR_EVENT_TYPE);
;;;339        }
;;;340    #endif
;;;341        OS_ENTER_CRITICAL();
;;;342        pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
;;;343        pq->OSQIn      = pq->OSQStart;
;;;344        pq->OSQOut     = pq->OSQStart;
;;;345        pq->OSQEntries = 0;
;;;346        OS_EXIT_CRITICAL();
;;;347        return (OS_ERR_NONE);
;;;348    }
000218  bd70              POP      {r4-r6,pc}
                  |L1.538|
00021a  7828              LDRB     r0,[r5,#0]            ;337
00021c  2802              CMP      r0,#2                 ;337
00021e  d001              BEQ      |L1.548|
000220  2001              MOVS     r0,#1                 ;338
000222  e7f9              B        |L1.536|
                  |L1.548|
000224  f7fffffe          BL       OS_CPU_SR_Save
000228  4606              MOV      r6,r0                 ;341
00022a  686c              LDR      r4,[r5,#4]            ;342
00022c  6860              LDR      r0,[r4,#4]            ;343
00022e  60e0              STR      r0,[r4,#0xc]          ;343
000230  6860              LDR      r0,[r4,#4]            ;344
000232  6120              STR      r0,[r4,#0x10]         ;344
000234  2000              MOVS     r0,#0                 ;345
000236  82e0              STRH     r0,[r4,#0x16]         ;345
000238  4630              MOV      r0,r6                 ;346
00023a  f7fffffe          BL       OS_CPU_SR_Restore
00023e  2000              MOVS     r0,#0                 ;347
000240  e7ea              B        |L1.536|
;;;349    #endif
                          ENDP

                  OSQPend PROC
;;;387    
;;;388    void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
000242  e92d47f0          PUSH     {r4-r10,lr}
;;;389    {
000246  4606              MOV      r6,r0
000248  4688              MOV      r8,r1
00024a  4615              MOV      r5,r2
;;;390        void      *pmsg;
;;;391        OS_Q      *pq;
;;;392    #if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
;;;393        OS_CPU_SR  cpu_sr = 0;
00024c  f04f0900          MOV      r9,#0
;;;394    #endif
;;;395    
;;;396    
;;;397    
;;;398    #if OS_ARG_CHK_EN > 0
;;;399        if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
000250  b915              CBNZ     r5,|L1.600|
;;;400            return ((void *)0);
000252  2000              MOVS     r0,#0
                  |L1.596|
;;;401        }
;;;402        if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
;;;403            *perr = OS_ERR_PEVENT_NULL;
;;;404            return ((void *)0);
;;;405        }
;;;406    #endif
;;;407        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
;;;408            *perr = OS_ERR_EVENT_TYPE;
;;;409            return ((void *)0);
;;;410        }
;;;411        if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
;;;412            *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
;;;413            return ((void *)0);
;;;414        }
;;;415        if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
;;;416            *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
;;;417            return ((void *)0);
;;;418        }
;;;419        OS_ENTER_CRITICAL();
;;;420        pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
;;;421        if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
;;;422            pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
;;;423            pq->OSQEntries--;                        /* Update the number of entries in the queue          */
;;;424            if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
;;;425                pq->OSQOut = pq->OSQStart;
;;;426            }
;;;427            OS_EXIT_CRITICAL();
;;;428            *perr = OS_ERR_NONE;
;;;429            return (pmsg);                           /* Return message received                            */
;;;430        }
;;;431        OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
;;;432        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
;;;433        OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
;;;434        OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
;;;435        OS_EXIT_CRITICAL();
;;;436        OS_Sched();                                  /* Find next highest priority task ready to run       */
;;;437        OS_ENTER_CRITICAL();
;;;438        switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
;;;439            case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
;;;440                 pmsg =  OSTCBCur->OSTCBMsg;
;;;441                *perr =  OS_ERR_NONE;
;;;442                 break;
;;;443    
;;;444            case OS_STAT_PEND_ABORT:
;;;445                 pmsg = (void *)0;
;;;446                *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
;;;447                 break;
;;;448    
;;;449            case OS_STAT_PEND_TO:
;;;450            default:
;;;451                 OS_EventTaskRemove(OSTCBCur, pevent);
;;;452                 pmsg = (void *)0;
;;;453                *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
;;;454                 break;
;;;455        }
;;;456        OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
;;;457        OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
;;;458        OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
;;;459    #if (OS_EVENT_MULTI_EN > 0)
;;;460        OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
;;;461    #endif
;;;462        OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
;;;463        OS_EXIT_CRITICAL();
;;;464        return (pmsg);                                    /* Return received message                       */
;;;465    }
000254  e8bd87f0          POP      {r4-r10,pc}
                  |L1.600|
000258  b91e              CBNZ     r6,|L1.610|
00025a  2004              MOVS     r0,#4                 ;403
00025c  7028              STRB     r0,[r5,#0]            ;403
00025e  2000              MOVS     r0,#0                 ;404
000260  e7f8              B        |L1.596|
                  |L1.610|
000262  7830              LDRB     r0,[r6,#0]            ;407
000264  2802              CMP      r0,#2                 ;407
000266  d003              BEQ      |L1.624|
000268  2001              MOVS     r0,#1                 ;408
00026a  7028              STRB     r0,[r5,#0]            ;408
00026c  2000              MOVS     r0,#0                 ;409
00026e  e7f1              B        |L1.596|
                  |L1.624|
000270  4880              LDR      r0,|L1.1140|
000272  7800              LDRB     r0,[r0,#0]            ;411  ; OSIntNesting
000274  2800              CMP      r0,#0                 ;411
000276  dd03              BLE      |L1.640|
000278  2002              MOVS     r0,#2                 ;412
00027a  7028              STRB     r0,[r5,#0]            ;412
00027c  2000              MOVS     r0,#0                 ;413
00027e  e7e9              B        |L1.596|
                  |L1.640|
000280  487f              LDR      r0,|L1.1152|
000282  7800              LDRB     r0,[r0,#0]            ;415  ; OSLockNesting
000284  2800              CMP      r0,#0                 ;415
000286  dd03              BLE      |L1.656|
000288  200d              MOVS     r0,#0xd               ;416
00028a  7028              STRB     r0,[r5,#0]            ;416
00028c  2000              MOVS     r0,#0                 ;417
00028e  e7e1              B        |L1.596|
                  |L1.656|
000290  f7fffffe          BL       OS_CPU_SR_Save
000294  4681              MOV      r9,r0                 ;419
000296  6874              LDR      r4,[r6,#4]            ;420
000298  8ae0              LDRH     r0,[r4,#0x16]         ;421
00029a  2800              CMP      r0,#0                 ;421
00029c  dd13              BLE      |L1.710|
00029e  6921              LDR      r1,[r4,#0x10]         ;422
0002a0  1d08              ADDS     r0,r1,#4              ;422
0002a2  6120              STR      r0,[r4,#0x10]         ;422
0002a4  680f              LDR      r7,[r1,#0]            ;422
0002a6  8ae0              LDRH     r0,[r4,#0x16]         ;423
0002a8  1e40              SUBS     r0,r0,#1              ;423
0002aa  82e0              STRH     r0,[r4,#0x16]         ;423
0002ac  68a1              LDR      r1,[r4,#8]            ;424
0002ae  6920              LDR      r0,[r4,#0x10]         ;424
0002b0  4288              CMP      r0,r1                 ;424
0002b2  d101              BNE      |L1.696|
0002b4  6860              LDR      r0,[r4,#4]            ;425
0002b6  6120              STR      r0,[r4,#0x10]         ;425
                  |L1.696|
0002b8  4648              MOV      r0,r9                 ;427
0002ba  f7fffffe          BL       OS_CPU_SR_Restore
0002be  2000              MOVS     r0,#0                 ;428
0002c0  7028              STRB     r0,[r5,#0]            ;428
0002c2  4638              MOV      r0,r7                 ;429
0002c4  e7c6              B        |L1.596|
                  |L1.710|
0002c6  486f              LDR      r0,|L1.1156|
0002c8  6800              LDR      r0,[r0,#0]            ;431  ; OSTCBCur
0002ca  f8900030          LDRB     r0,[r0,#0x30]         ;431
0002ce  f0400004          ORR      r0,r0,#4              ;431
0002d2  496c              LDR      r1,|L1.1156|
0002d4  6809              LDR      r1,[r1,#0]            ;431  ; OSTCBCur
0002d6  f8810030          STRB     r0,[r1,#0x30]         ;431
0002da  2000              MOVS     r0,#0                 ;432
0002dc  4969              LDR      r1,|L1.1156|
0002de  6809              LDR      r1,[r1,#0]            ;432  ; OSTCBCur
0002e0  f8810031          STRB     r0,[r1,#0x31]         ;432
0002e4  4867              LDR      r0,|L1.1156|
0002e6  6800              LDR      r0,[r0,#0]            ;433  ; OSTCBCur
0002e8  f8a0802e          STRH     r8,[r0,#0x2e]         ;433
0002ec  4630              MOV      r0,r6                 ;434
0002ee  f7fffffe          BL       OS_EventTaskWait
0002f2  4648              MOV      r0,r9                 ;435
0002f4  f7fffffe          BL       OS_CPU_SR_Restore
0002f8  f7fffffe          BL       OS_Sched
0002fc  f7fffffe          BL       OS_CPU_SR_Save
000300  4681              MOV      r9,r0                 ;437
000302  4860              LDR      r0,|L1.1156|
000304  6800              LDR      r0,[r0,#0]            ;438  ; OSTCBCur
000306  f8900031          LDRB     r0,[r0,#0x31]         ;438
00030a  b120              CBZ      r0,|L1.790|
00030c  2801              CMP      r0,#1                 ;438
00030e  d00d              BEQ      |L1.812|
000310  2802              CMP      r0,#2                 ;438
000312  d10a              BNE      |L1.810|
000314  e005              B        |L1.802|
                  |L1.790|
000316  485b              LDR      r0,|L1.1156|
000318  6800              LDR      r0,[r0,#0]            ;440  ; OSTCBCur
00031a  6a47              LDR      r7,[r0,#0x24]         ;440
00031c  2000              MOVS     r0,#0                 ;441
00031e  7028              STRB     r0,[r5,#0]            ;441
000320  e00d              B        |L1.830|
                  |L1.802|
000322  2700              MOVS     r7,#0                 ;445
000324  200e              MOVS     r0,#0xe               ;446
000326  7028              STRB     r0,[r5,#0]            ;446
000328  e009              B        |L1.830|
                  |L1.810|
00032a  bf00              NOP                            ;449
                  |L1.812|
00032c  4631              MOV      r1,r6                 ;451
00032e  4855              LDR      r0,|L1.1156|
000330  6800              LDR      r0,[r0,#0]            ;451  ; OSTCBCur
000332  f7fffffe          BL       OS_EventTaskRemove
000336  2700              MOVS     r7,#0                 ;452
000338  200a              MOVS     r0,#0xa               ;453
00033a  7028              STRB     r0,[r5,#0]            ;453
00033c  bf00              NOP                            ;454
                  |L1.830|
00033e  bf00              NOP                            ;442
000340  2000              MOVS     r0,#0                 ;456
000342  4950              LDR      r1,|L1.1156|
000344  6809              LDR      r1,[r1,#0]            ;456  ; OSTCBCur
000346  f8810030          STRB     r0,[r1,#0x30]         ;456
00034a  494e              LDR      r1,|L1.1156|
00034c  6809              LDR      r1,[r1,#0]            ;457  ; OSTCBCur
00034e  f8810031          STRB     r0,[r1,#0x31]         ;457
000352  494c              LDR      r1,|L1.1156|
000354  6809              LDR      r1,[r1,#0]            ;458  ; OSTCBCur
000356  61c8              STR      r0,[r1,#0x1c]         ;458
000358  494a              LDR      r1,|L1.1156|
00035a  6809              LDR      r1,[r1,#0]            ;460  ; OSTCBCur
00035c  6208              STR      r0,[r1,#0x20]         ;460
00035e  4949              LDR      r1,|L1.1156|
000360  6809              LDR      r1,[r1,#0]            ;462  ; OSTCBCur
000362  6248              STR      r0,[r1,#0x24]         ;462
000364  4648              MOV      r0,r9                 ;463
000366  f7fffffe          BL       OS_CPU_SR_Restore
00036a  4638              MOV      r0,r7                 ;464
00036c  e772              B        |L1.596|
;;;466    /*$PAGE*/
                          ENDP

                  OSQPendAbort PROC
;;;499    #if OS_Q_PEND_ABORT_EN > 0
;;;500    INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
00036e  e92d41f0          PUSH     {r4-r8,lr}
;;;501    {
000372  4605              MOV      r5,r0
000374  460f              MOV      r7,r1
000376  4614              MOV      r4,r2
;;;502        INT8U      nbr_tasks;
;;;503    #if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
;;;504        OS_CPU_SR  cpu_sr = 0;
000378  f04f0800          MOV      r8,#0
;;;505    #endif
;;;506    
;;;507    
;;;508    
;;;509    #if OS_ARG_CHK_EN > 0
;;;510        if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
00037c  b914              CBNZ     r4,|L1.900|
;;;511            return (0);
00037e  2000              MOVS     r0,#0
                  |L1.896|
;;;512        }
;;;513        if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
;;;514            *perr = OS_ERR_PEVENT_NULL;
;;;515            return (0);
;;;516        }
;;;517    #endif
;;;518        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
;;;519            *perr = OS_ERR_EVENT_TYPE;
;;;520            return (0);
;;;521        }
;;;522        OS_ENTER_CRITICAL();
;;;523        if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
;;;524            nbr_tasks = 0;
;;;525            switch (opt) {
;;;526                case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
;;;527                     while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
;;;528                         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;529                         nbr_tasks++;
;;;530                     }
;;;531                     break;
;;;532                   
;;;533                case OS_PEND_OPT_NONE:
;;;534                default:                                       /* No,  ready HPT       waiting on queue    */
;;;535                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
;;;536                     nbr_tasks++;
;;;537                     break;
;;;538            }
;;;539            OS_EXIT_CRITICAL();
;;;540            OS_Sched();                                        /* Find HPT ready to run                    */
;;;541            *perr = OS_ERR_PEND_ABORT;
;;;542            return (nbr_tasks);
;;;543        }
;;;544        OS_EXIT_CRITICAL();
;;;545        *perr = OS_ERR_NONE;
;;;546        return (0);                                            /* No tasks waiting on queue                */
;;;547    }
000380  e8bd81f0          POP      {r4-r8,pc}
                  |L1.900|
000384  b91d              CBNZ     r5,|L1.910|
000386  2004              MOVS     r0,#4                 ;514
000388  7020              STRB     r0,[r4,#0]            ;514
00038a  2000              MOVS     r0,#0                 ;515
00038c  e7f8              B        |L1.896|
                  |L1.910|
00038e  7828              LDRB     r0,[r5,#0]            ;518
000390  2802              CMP      r0,#2                 ;518
000392  d003              BEQ      |L1.924|
000394  2001              MOVS     r0,#1                 ;519
000396  7020              STRB     r0,[r4,#0]            ;519
000398  2000              MOVS     r0,#0                 ;520
00039a  e7f1              B        |L1.896|
                  |L1.924|
00039c  f7fffffe          BL       OS_CPU_SR_Save
0003a0  4680              MOV      r8,r0                 ;522
0003a2  7aa8              LDRB     r0,[r5,#0xa]          ;523
0003a4  b320              CBZ      r0,|L1.1008|
0003a6  2600              MOVS     r6,#0                 ;524
0003a8  b17f              CBZ      r7,|L1.970|
0003aa  2f01              CMP      r7,#1                 ;525
0003ac  d10c              BNE      |L1.968|
0003ae  e007              B        |L1.960|
                  |L1.944|
0003b0  2302              MOVS     r3,#2                 ;528
0003b2  2204              MOVS     r2,#4                 ;528
0003b4  2100              MOVS     r1,#0                 ;528
0003b6  4628              MOV      r0,r5                 ;528
0003b8  f7fffffe          BL       OS_EventTaskRdy
0003bc  1c70              ADDS     r0,r6,#1              ;529
0003be  b2c6              UXTB     r6,r0                 ;529
                  |L1.960|
0003c0  7aa8              LDRB     r0,[r5,#0xa]          ;527
0003c2  2800              CMP      r0,#0                 ;527
0003c4  d1f4              BNE      |L1.944|
0003c6  e009              B        |L1.988|
                  |L1.968|
0003c8  bf00              NOP                            ;533
                  |L1.970|
0003ca  2302              MOVS     r3,#2                 ;535
0003cc  2204              MOVS     r2,#4                 ;535
0003ce  2100              MOVS     r1,#0                 ;535
0003d0  4628              MOV      r0,r5                 ;535
0003d2  f7fffffe          BL       OS_EventTaskRdy
0003d6  1c70              ADDS     r0,r6,#1              ;536
0003d8  b2c6              UXTB     r6,r0                 ;536
0003da  bf00              NOP                            ;537
                  |L1.988|
0003dc  bf00              NOP                            ;531
0003de  4640              MOV      r0,r8                 ;539
0003e0  f7fffffe          BL       OS_CPU_SR_Restore
0003e4  f7fffffe          BL       OS_Sched
0003e8  200e              MOVS     r0,#0xe               ;541
0003ea  7020              STRB     r0,[r4,#0]            ;541
0003ec  4630              MOV      r0,r6                 ;542
0003ee  e7c7              B        |L1.896|
                  |L1.1008|
0003f0  4640              MOV      r0,r8                 ;544
0003f2  f7fffffe          BL       OS_CPU_SR_Restore
0003f6  2000              MOVS     r0,#0                 ;545
0003f8  7020              STRB     r0,[r4,#0]            ;545
0003fa  bf00              NOP                            ;546
0003fc  e7c0              B        |L1.896|
;;;548    #endif
                          ENDP

                  OSQPost PROC
;;;570    #if OS_Q_POST_EN > 0
;;;571    INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
0003fe  e92d41f0          PUSH     {r4-r8,lr}
;;;572    {
000402  4605              MOV      r5,r0
000404  460e              MOV      r6,r1
;;;573        OS_Q      *pq;
;;;574    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;575        OS_CPU_SR  cpu_sr = 0;
000406  2700              MOVS     r7,#0
;;;576    #endif
;;;577    
;;;578    
;;;579    
;;;580    #if OS_ARG_CHK_EN > 0
;;;581        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
000408  b915              CBNZ     r5,|L1.1040|
;;;582            return (OS_ERR_PEVENT_NULL);
00040a  2004              MOVS     r0,#4
                  |L1.1036|
;;;583        }
;;;584    #endif
;;;585        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
;;;586            return (OS_ERR_EVENT_TYPE);
;;;587        }
;;;588        OS_ENTER_CRITICAL();
;;;589        if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
;;;590                                                           /* Ready highest priority task waiting on event */
;;;591            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;592            OS_EXIT_CRITICAL();
;;;593            OS_Sched();                                    /* Find highest priority task ready to run      */
;;;594            return (OS_ERR_NONE);
;;;595        }
;;;596        pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
;;;597        if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
;;;598            OS_EXIT_CRITICAL();
;;;599            return (OS_ERR_Q_FULL);
;;;600        }
;;;601        *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
;;;602        pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
;;;603        if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
;;;604            pq->OSQIn = pq->OSQStart;
;;;605        }
;;;606        OS_EXIT_CRITICAL();
;;;607        return (OS_ERR_NONE);
;;;608    }
00040c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1040|
000410  7828              LDRB     r0,[r5,#0]            ;585
000412  2802              CMP      r0,#2                 ;585
000414  d001              BEQ      |L1.1050|
000416  2001              MOVS     r0,#1                 ;586
000418  e7f8              B        |L1.1036|
                  |L1.1050|
00041a  f7fffffe          BL       OS_CPU_SR_Save
00041e  4607              MOV      r7,r0                 ;588
000420  7aa8              LDRB     r0,[r5,#0xa]          ;589
000422  b160              CBZ      r0,|L1.1086|
000424  2300              MOVS     r3,#0                 ;591
000426  2204              MOVS     r2,#4                 ;591
000428  4631              MOV      r1,r6                 ;591
00042a  4628              MOV      r0,r5                 ;591
00042c  f7fffffe          BL       OS_EventTaskRdy
000430  4638              MOV      r0,r7                 ;592
000432  f7fffffe          BL       OS_CPU_SR_Restore
000436  f7fffffe          BL       OS_Sched
00043a  2000              MOVS     r0,#0                 ;594
00043c  e7e6              B        |L1.1036|
                  |L1.1086|
00043e  686c              LDR      r4,[r5,#4]            ;596
000440  8ae0              LDRH     r0,[r4,#0x16]         ;597
000442  8aa1              LDRH     r1,[r4,#0x14]         ;597
000444  4288              CMP      r0,r1                 ;597
000446  db04              BLT      |L1.1106|
000448  4638              MOV      r0,r7                 ;598
00044a  f7fffffe          BL       OS_CPU_SR_Restore
00044e  201e              MOVS     r0,#0x1e              ;599
000450  e7dc              B        |L1.1036|
                  |L1.1106|
000452  68e1              LDR      r1,[r4,#0xc]          ;601
000454  1d08              ADDS     r0,r1,#4              ;601
000456  60e0              STR      r0,[r4,#0xc]          ;601
000458  600e              STR      r6,[r1,#0]            ;601
00045a  8ae0              LDRH     r0,[r4,#0x16]         ;602
00045c  1c40              ADDS     r0,r0,#1              ;602
00045e  82e0              STRH     r0,[r4,#0x16]         ;602
000460  e9d41002          LDRD     r1,r0,[r4,#8]         ;603
000464  4288              CMP      r0,r1                 ;603
000466  d101              BNE      |L1.1132|
000468  6860              LDR      r0,[r4,#4]            ;604
00046a  60e0              STR      r0,[r4,#0xc]          ;604
                  |L1.1132|
00046c  4638              MOV      r0,r7                 ;606
00046e  f7fffffe          BL       OS_CPU_SR_Restore
000472  e009              B        |L1.1160|
                  |L1.1140|
                          DCD      OSIntNesting
                  |L1.1144|
                          DCD      OSEventFreeList
                  |L1.1148|
                          DCD      OSQFreeList
                  |L1.1152|
                          DCD      OSLockNesting
                  |L1.1156|
                          DCD      OSTCBCur
                  |L1.1160|
000488  2000              MOVS     r0,#0                 ;607
00048a  e7bf              B        |L1.1036|
;;;609    #endif
                          ENDP

                  OSQPostFront PROC
;;;632    #if OS_Q_POST_FRONT_EN > 0
;;;633    INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
00048c  e92d41f0          PUSH     {r4-r8,lr}
;;;634    {
000490  4605              MOV      r5,r0
000492  460e              MOV      r6,r1
;;;635        OS_Q      *pq;
;;;636    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;637        OS_CPU_SR  cpu_sr = 0;
000494  2700              MOVS     r7,#0
;;;638    #endif
;;;639    
;;;640    
;;;641    
;;;642    #if OS_ARG_CHK_EN > 0
;;;643        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000496  b915              CBNZ     r5,|L1.1182|
;;;644            return (OS_ERR_PEVENT_NULL);
000498  2004              MOVS     r0,#4
                  |L1.1178|
;;;645        }
;;;646    #endif
;;;647        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;648            return (OS_ERR_EVENT_TYPE);
;;;649        }
;;;650        OS_ENTER_CRITICAL();
;;;651        if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
;;;652                                                          /* Ready highest priority task waiting on event  */
;;;653            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;654            OS_EXIT_CRITICAL();
;;;655            OS_Sched();                                   /* Find highest priority task ready to run       */
;;;656            return (OS_ERR_NONE);
;;;657        }
;;;658        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;659        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;660            OS_EXIT_CRITICAL();
;;;661            return (OS_ERR_Q_FULL);
;;;662        }
;;;663        if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
;;;664            pq->OSQOut = pq->OSQEnd;
;;;665        }
;;;666        pq->OSQOut--;
;;;667        *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
;;;668        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;669        OS_EXIT_CRITICAL();
;;;670        return (OS_ERR_NONE);
;;;671    }
00049a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1182|
00049e  7828              LDRB     r0,[r5,#0]            ;647
0004a0  2802              CMP      r0,#2                 ;647
0004a2  d001              BEQ      |L1.1192|
0004a4  2001              MOVS     r0,#1                 ;648
0004a6  e7f8              B        |L1.1178|
                  |L1.1192|
0004a8  f7fffffe          BL       OS_CPU_SR_Save
0004ac  4607              MOV      r7,r0                 ;650
0004ae  7aa8              LDRB     r0,[r5,#0xa]          ;651
0004b0  b160              CBZ      r0,|L1.1228|
0004b2  2300              MOVS     r3,#0                 ;653
0004b4  2204              MOVS     r2,#4                 ;653
0004b6  4631              MOV      r1,r6                 ;653
0004b8  4628              MOV      r0,r5                 ;653
0004ba  f7fffffe          BL       OS_EventTaskRdy
0004be  4638              MOV      r0,r7                 ;654
0004c0  f7fffffe          BL       OS_CPU_SR_Restore
0004c4  f7fffffe          BL       OS_Sched
0004c8  2000              MOVS     r0,#0                 ;656
0004ca  e7e6              B        |L1.1178|
                  |L1.1228|
0004cc  686c              LDR      r4,[r5,#4]            ;658
0004ce  8ae0              LDRH     r0,[r4,#0x16]         ;659
0004d0  8aa1              LDRH     r1,[r4,#0x14]         ;659
0004d2  4288              CMP      r0,r1                 ;659
0004d4  db04              BLT      |L1.1248|
0004d6  4638              MOV      r0,r7                 ;660
0004d8  f7fffffe          BL       OS_CPU_SR_Restore
0004dc  201e              MOVS     r0,#0x1e              ;661
0004de  e7dc              B        |L1.1178|
                  |L1.1248|
0004e0  6861              LDR      r1,[r4,#4]            ;663
0004e2  6920              LDR      r0,[r4,#0x10]         ;663
0004e4  4288              CMP      r0,r1                 ;663
0004e6  d101              BNE      |L1.1260|
0004e8  68a0              LDR      r0,[r4,#8]            ;664
0004ea  6120              STR      r0,[r4,#0x10]         ;664
                  |L1.1260|
0004ec  6920              LDR      r0,[r4,#0x10]         ;666
0004ee  1f00              SUBS     r0,r0,#4              ;666
0004f0  6120              STR      r0,[r4,#0x10]         ;666
0004f2  6920              LDR      r0,[r4,#0x10]         ;667
0004f4  6006              STR      r6,[r0,#0]            ;667
0004f6  8ae0              LDRH     r0,[r4,#0x16]         ;668
0004f8  1c40              ADDS     r0,r0,#1              ;668
0004fa  82e0              STRH     r0,[r4,#0x16]         ;668
0004fc  4638              MOV      r0,r7                 ;669
0004fe  f7fffffe          BL       OS_CPU_SR_Restore
000502  2000              MOVS     r0,#0                 ;670
000504  e7c9              B        |L1.1178|
;;;672    #endif
                          ENDP

                  OSQPostOpt PROC
;;;703    #if OS_Q_POST_OPT_EN > 0
;;;704    INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
000506  e92d41f0          PUSH     {r4-r8,lr}
;;;705    {
00050a  4605              MOV      r5,r0
00050c  460f              MOV      r7,r1
00050e  4616              MOV      r6,r2
;;;706        OS_Q      *pq;
;;;707    #if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
;;;708        OS_CPU_SR  cpu_sr = 0;
000510  f04f0800          MOV      r8,#0
;;;709    #endif
;;;710    
;;;711    
;;;712    
;;;713    #if OS_ARG_CHK_EN > 0
;;;714        if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
000514  b915              CBNZ     r5,|L1.1308|
;;;715            return (OS_ERR_PEVENT_NULL);
000516  2004              MOVS     r0,#4
                  |L1.1304|
;;;716        }
;;;717    #endif
;;;718        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
;;;719            return (OS_ERR_EVENT_TYPE);
;;;720        }
;;;721        OS_ENTER_CRITICAL();
;;;722        if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
;;;723            if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
;;;724                while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
;;;725                    (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;726                }
;;;727            } else {                                      /* No,  Post to HPT waiting on queue             */
;;;728                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
;;;729            }
;;;730            OS_EXIT_CRITICAL();
;;;731            if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
;;;732                OS_Sched();                               /* Find highest priority task ready to run       */
;;;733            }
;;;734            return (OS_ERR_NONE);
;;;735        }
;;;736        pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
;;;737        if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
;;;738            OS_EXIT_CRITICAL();
;;;739            return (OS_ERR_Q_FULL);
;;;740        }
;;;741        if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
;;;742            if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
;;;743                pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
;;;744            }
;;;745            pq->OSQOut--;
;;;746            *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
;;;747        } else {                                          /* No,  Post as FIFO                             */
;;;748            *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
;;;749            if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
;;;750                pq->OSQIn = pq->OSQStart;
;;;751            }
;;;752        }
;;;753        pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
;;;754        OS_EXIT_CRITICAL();
;;;755        return (OS_ERR_NONE);
;;;756    }
000518  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1308|
00051c  7828              LDRB     r0,[r5,#0]            ;718
00051e  2802              CMP      r0,#2                 ;718
000520  d001              BEQ      |L1.1318|
000522  2001              MOVS     r0,#1                 ;719
000524  e7f8              B        |L1.1304|
                  |L1.1318|
000526  f7fffffe          BL       OS_CPU_SR_Save
00052a  4680              MOV      r8,r0                 ;721
00052c  7aa8              LDRB     r0,[r5,#0xa]          ;722
00052e  b1e8              CBZ      r0,|L1.1388|
000530  f0160f01          TST      r6,#1                 ;723
000534  d00a              BEQ      |L1.1356|
000536  e005              B        |L1.1348|
                  |L1.1336|
000538  2300              MOVS     r3,#0                 ;725
00053a  2204              MOVS     r2,#4                 ;725
00053c  4639              MOV      r1,r7                 ;725
00053e  4628              MOV      r0,r5                 ;725
000540  f7fffffe          BL       OS_EventTaskRdy
                  |L1.1348|
000544  7aa8              LDRB     r0,[r5,#0xa]          ;724
000546  2800              CMP      r0,#0                 ;724
000548  d1f6              BNE      |L1.1336|
00054a  e005              B        |L1.1368|
                  |L1.1356|
00054c  2300              MOVS     r3,#0                 ;728
00054e  2204              MOVS     r2,#4                 ;728
000550  4639              MOV      r1,r7                 ;728
000552  4628              MOV      r0,r5                 ;728
000554  f7fffffe          BL       OS_EventTaskRdy
                  |L1.1368|
000558  4640              MOV      r0,r8                 ;730
00055a  f7fffffe          BL       OS_CPU_SR_Restore
00055e  f0160f04          TST      r6,#4                 ;731
000562  d101              BNE      |L1.1384|
000564  f7fffffe          BL       OS_Sched
                  |L1.1384|
000568  2000              MOVS     r0,#0                 ;734
00056a  e7d5              B        |L1.1304|
                  |L1.1388|
00056c  686c              LDR      r4,[r5,#4]            ;736
00056e  8ae0              LDRH     r0,[r4,#0x16]         ;737
000570  8aa1              LDRH     r1,[r4,#0x14]         ;737
000572  4288              CMP      r0,r1                 ;737
000574  db04              BLT      |L1.1408|
000576  4640              MOV      r0,r8                 ;738
000578  f7fffffe          BL       OS_CPU_SR_Restore
00057c  201e              MOVS     r0,#0x1e              ;739
00057e  e7cb              B        |L1.1304|
                  |L1.1408|
000580  f0160f02          TST      r6,#2                 ;741
000584  d00b              BEQ      |L1.1438|
000586  6861              LDR      r1,[r4,#4]            ;742
000588  6920              LDR      r0,[r4,#0x10]         ;742
00058a  4288              CMP      r0,r1                 ;742
00058c  d101              BNE      |L1.1426|
00058e  68a0              LDR      r0,[r4,#8]            ;743
000590  6120              STR      r0,[r4,#0x10]         ;743
                  |L1.1426|
000592  6920              LDR      r0,[r4,#0x10]         ;745
000594  1f00              SUBS     r0,r0,#4              ;745
000596  6120              STR      r0,[r4,#0x10]         ;745
000598  6920              LDR      r0,[r4,#0x10]         ;746
00059a  6007              STR      r7,[r0,#0]            ;746
00059c  e009              B        |L1.1458|
                  |L1.1438|
00059e  68e1              LDR      r1,[r4,#0xc]          ;748
0005a0  1d08              ADDS     r0,r1,#4              ;748
0005a2  60e0              STR      r0,[r4,#0xc]          ;748
0005a4  600f              STR      r7,[r1,#0]            ;748
0005a6  e9d41002          LDRD     r1,r0,[r4,#8]         ;749
0005aa  4288              CMP      r0,r1                 ;749
0005ac  d101              BNE      |L1.1458|
0005ae  6860              LDR      r0,[r4,#4]            ;750
0005b0  60e0              STR      r0,[r4,#0xc]          ;750
                  |L1.1458|
0005b2  8ae0              LDRH     r0,[r4,#0x16]         ;753
0005b4  1c40              ADDS     r0,r0,#1              ;753
0005b6  82e0              STRH     r0,[r4,#0x16]         ;753
0005b8  4640              MOV      r0,r8                 ;754
0005ba  f7fffffe          BL       OS_CPU_SR_Restore
0005be  2000              MOVS     r0,#0                 ;755
0005c0  e7aa              B        |L1.1304|
;;;757    #endif
                          ENDP

                  OSQQuery PROC
;;;777    #if OS_Q_QUERY_EN > 0
;;;778    INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
0005c2  e92d47f0          PUSH     {r4-r10,lr}
;;;779    {
0005c6  4605              MOV      r5,r0
0005c8  460c              MOV      r4,r1
;;;780        OS_Q      *pq;
;;;781        INT8U      i;
;;;782    #if OS_LOWEST_PRIO <= 63
;;;783        INT8U     *psrc;
;;;784        INT8U     *pdest;
;;;785    #else
;;;786        INT16U    *psrc;
;;;787        INT16U    *pdest;
;;;788    #endif
;;;789    #if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
;;;790        OS_CPU_SR  cpu_sr = 0;
0005ca  f04f0a00          MOV      r10,#0
;;;791    #endif
;;;792    
;;;793    
;;;794    
;;;795    #if OS_ARG_CHK_EN > 0
;;;796        if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
0005ce  b915              CBNZ     r5,|L1.1494|
;;;797            return (OS_ERR_PEVENT_NULL);
0005d0  2004              MOVS     r0,#4
                  |L1.1490|
;;;798        }
;;;799        if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
;;;800            return (OS_ERR_PDATA_NULL);
;;;801        }
;;;802    #endif
;;;803        if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
;;;804            return (OS_ERR_EVENT_TYPE);
;;;805        }
;;;806        OS_ENTER_CRITICAL();
;;;807        p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
;;;808        psrc                 = &pevent->OSEventTbl[0];
;;;809        pdest                = &p_q_data->OSEventTbl[0];
;;;810        for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
;;;811            *pdest++ = *psrc++;
;;;812        }
;;;813        pq = (OS_Q *)pevent->OSEventPtr;
;;;814        if (pq->OSQEntries > 0) {
;;;815            p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
;;;816        } else {
;;;817            p_q_data->OSMsg = (void *)0;
;;;818        }
;;;819        p_q_data->OSNMsgs = pq->OSQEntries;
;;;820        p_q_data->OSQSize = pq->OSQSize;
;;;821        OS_EXIT_CRITICAL();
;;;822        return (OS_ERR_NONE);
;;;823    }
0005d2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1494|
0005d6  b90c              CBNZ     r4,|L1.1500|
0005d8  2009              MOVS     r0,#9                 ;800
0005da  e7fa              B        |L1.1490|
                  |L1.1500|
0005dc  7828              LDRB     r0,[r5,#0]            ;803
0005de  2802              CMP      r0,#2                 ;803
0005e0  d001              BEQ      |L1.1510|
0005e2  2001              MOVS     r0,#1                 ;804
0005e4  e7f5              B        |L1.1490|
                  |L1.1510|
0005e6  f7fffffe          BL       OS_CPU_SR_Save
0005ea  4682              MOV      r10,r0                ;806
0005ec  7aa8              LDRB     r0,[r5,#0xa]          ;807
0005ee  7320              STRB     r0,[r4,#0xc]          ;807
0005f0  f105080b          ADD      r8,r5,#0xb            ;808
0005f4  f1040908          ADD      r9,r4,#8              ;809
0005f8  2700              MOVS     r7,#0                 ;810
0005fa  e005              B        |L1.1544|
                  |L1.1532|
0005fc  f8180b01          LDRB     r0,[r8],#1            ;811
000600  f8090b01          STRB     r0,[r9],#1            ;811
000604  1c78              ADDS     r0,r7,#1              ;810
000606  b2c7              UXTB     r7,r0                 ;810
                  |L1.1544|
000608  2f04              CMP      r7,#4                 ;810
00060a  dbf7              BLT      |L1.1532|
00060c  686e              LDR      r6,[r5,#4]            ;813
00060e  8af0              LDRH     r0,[r6,#0x16]         ;814
000610  2800              CMP      r0,#0                 ;814
000612  dd03              BLE      |L1.1564|
000614  6930              LDR      r0,[r6,#0x10]         ;815
000616  6800              LDR      r0,[r0,#0]            ;815
000618  6020              STR      r0,[r4,#0]            ;815
00061a  e001              B        |L1.1568|
                  |L1.1564|
00061c  2000              MOVS     r0,#0                 ;817
00061e  6020              STR      r0,[r4,#0]            ;817
                  |L1.1568|
000620  8af0              LDRH     r0,[r6,#0x16]         ;819
000622  80a0              STRH     r0,[r4,#4]            ;819
000624  8ab0              LDRH     r0,[r6,#0x14]         ;820
000626  80e0              STRH     r0,[r4,#6]            ;820
000628  4650              MOV      r0,r10                ;821
00062a  f7fffffe          BL       OS_CPU_SR_Restore
00062e  2000              MOVS     r0,#0                 ;822
000630  e7cf              B        |L1.1490|
;;;824    #endif                                                 /* OS_Q_QUERY_EN                                */
                          ENDP

                  OS_QInit PROC
;;;841    
;;;842    void  OS_QInit (void)
000632  b570              PUSH     {r4-r6,lr}
;;;843    {
;;;844    #if OS_MAX_QS == 1
;;;845        OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
;;;846        OSQFreeList->OSQPtr = (OS_Q *)0;
;;;847    #endif
;;;848    
;;;849    #if OS_MAX_QS >= 2
;;;850        INT16U  i;
;;;851        OS_Q   *pq1;
;;;852        OS_Q   *pq2;
;;;853    
;;;854    
;;;855    
;;;856        OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
000634  2160              MOVS     r1,#0x60
000636  480a              LDR      r0,|L1.1632|
000638  f7fffffe          BL       OS_MemClr
;;;857        pq1 = &OSQTbl[0];
00063c  4c08              LDR      r4,|L1.1632|
;;;858        pq2 = &OSQTbl[1];
00063e  f1040618          ADD      r6,r4,#0x18
;;;859        for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
000642  2500              MOVS     r5,#0
000644  e004              B        |L1.1616|
                  |L1.1606|
;;;860            pq1->OSQPtr = pq2;
000646  6026              STR      r6,[r4,#0]
;;;861            pq1++;
000648  3418              ADDS     r4,r4,#0x18
;;;862            pq2++;
00064a  3618              ADDS     r6,r6,#0x18
00064c  1c68              ADDS     r0,r5,#1              ;859
00064e  b285              UXTH     r5,r0                 ;859
                  |L1.1616|
000650  2d03              CMP      r5,#3                 ;859
000652  dbf8              BLT      |L1.1606|
;;;863        }
;;;864        pq1->OSQPtr = (OS_Q *)0;
000654  2000              MOVS     r0,#0
000656  6020              STR      r0,[r4,#0]
;;;865        OSQFreeList = &OSQTbl[0];
000658  4801              LDR      r0,|L1.1632|
00065a  4902              LDR      r1,|L1.1636|
00065c  6008              STR      r0,[r1,#0]  ; OSQFreeList
;;;866    #endif
;;;867    }
00065e  bd70              POP      {r4-r6,pc}
;;;868    #endif                                               /* OS_Q_EN                                        */
                          ENDP

                  |L1.1632|
                          DCD      OSQTbl
                  |L1.1636|
                          DCD      OSQFreeList
