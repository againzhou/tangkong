; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--debug -c --asm --interleave -o.\exe\stm32f10x_usart.o --depend=.\exe\stm32f10x_usart.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Source\APP -I..\Source\APP\MC -I..\Source\BSP -I..\Source\FS\FF007 -I..\Source\OS\uCOS-II\Ports\ARM-Cortex-M3\Generic\RealView -I..\Source\OS\uCOS-II\Source -I..\Source\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Source\Libraries\CMSIS\Core\CM3 -IC:\Keil\ARM\INC -IC:\Keil\ARM\INC\ST\STM32F10x -DSTM32F10X_MD -DHARDWARE_VER=1 --omf_browse=.\exe\stm32f10x_usart.crf ..\Source\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_usart.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;119      */
;;;120    void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;121    {
000002  4604              MOV      r4,r0
;;;122      /* Check the parameters */
;;;123      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;124    
;;;125      if (USARTx == USART1)
000004  48e3              LDR      r0,|L1.916|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L1.30|
;;;126      {
;;;127        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0388              LSLS     r0,r1,#14
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;128        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f4080          MOV      r0,#0x4000
000018  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001c  e032              B        |L1.132|
                  |L1.30|
;;;129      }
;;;130      else if (USARTx == USART2)
00001e  48de              LDR      r0,|L1.920|
000020  4284              CMP      r4,r0
000022  d109              BNE      |L1.56|
;;;131      {
;;;132        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000024  2101              MOVS     r1,#1
000026  0448              LSLS     r0,r1,#17
000028  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;133        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
00002c  2100              MOVS     r1,#0
00002e  f44f3000          MOV      r0,#0x20000
000032  f7fffffe          BL       RCC_APB1PeriphResetCmd
000036  e025              B        |L1.132|
                  |L1.56|
;;;134      }
;;;135      else if (USARTx == USART3)
000038  48d8              LDR      r0,|L1.924|
00003a  4284              CMP      r4,r0
00003c  d109              BNE      |L1.82|
;;;136      {
;;;137        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
00003e  2101              MOVS     r1,#1
000040  0488              LSLS     r0,r1,#18
000042  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;138        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000046  2100              MOVS     r1,#0
000048  f44f2080          MOV      r0,#0x40000
00004c  f7fffffe          BL       RCC_APB1PeriphResetCmd
000050  e018              B        |L1.132|
                  |L1.82|
;;;139      }    
;;;140      else if (USARTx == UART4)
000052  48d3              LDR      r0,|L1.928|
000054  4284              CMP      r4,r0
000056  d109              BNE      |L1.108|
;;;141      {
;;;142        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000058  2101              MOVS     r1,#1
00005a  04c8              LSLS     r0,r1,#19
00005c  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;143        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
000060  2100              MOVS     r1,#0
000062  f44f2000          MOV      r0,#0x80000
000066  f7fffffe          BL       RCC_APB1PeriphResetCmd
00006a  e00b              B        |L1.132|
                  |L1.108|
;;;144      }    
;;;145      else
;;;146      {
;;;147        if (USARTx == UART5)
00006c  48cd              LDR      r0,|L1.932|
00006e  4284              CMP      r4,r0
000070  d108              BNE      |L1.132|
;;;148        { 
;;;149          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000072  2101              MOVS     r1,#1
000074  0508              LSLS     r0,r1,#20
000076  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;150          RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
00007a  2100              MOVS     r1,#0
00007c  f44f1080          MOV      r0,#0x100000
000080  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L1.132|
;;;151        }
;;;152      }
;;;153    }
000084  bd10              POP      {r4,pc}
;;;154    
                          ENDP

                  USART_Init PROC
;;;164      */
;;;165    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000086  e92d47f0          PUSH     {r4-r10,lr}
;;;166    {
00008a  b086              SUB      sp,sp,#0x18
00008c  4605              MOV      r5,r0
00008e  460e              MOV      r6,r1
;;;167      uint32_t tmpreg = 0x00, apbclock = 0x00;
000090  2400              MOVS     r4,#0
000092  46a2              MOV      r10,r4
;;;168      uint32_t integerdivider = 0x00;
000094  bf00              NOP      
;;;169      uint32_t fractionaldivider = 0x00;
000096  bf00              NOP      
;;;170      uint32_t usartxbase = 0;
000098  2700              MOVS     r7,#0
;;;171      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;172      /* Check the parameters */
;;;173      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;174      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;175      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;176      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;177      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;178      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;179      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;180      /* The hardware flow control is available only for USART1, USART2 and USART3 */
;;;181      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
00009a  89b0              LDRH     r0,[r6,#0xc]
00009c  b100              CBZ      r0,|L1.160|
;;;182      {
;;;183        assert_param(IS_USART_123_PERIPH(USARTx));
00009e  bf00              NOP      
                  |L1.160|
;;;184      }
;;;185    
;;;186      usartxbase = (uint32_t)USARTx;
0000a0  462f              MOV      r7,r5
;;;187    
;;;188    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;189      tmpreg = USARTx->CR2;
0000a2  8a2c              LDRH     r4,[r5,#0x10]
;;;190      /* Clear STOP[13:12] bits */
;;;191      tmpreg &= CR2_STOP_CLEAR_Mask;
0000a4  f64c70ff          MOV      r0,#0xcfff
0000a8  4004              ANDS     r4,r4,r0
;;;192      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
;;;193      /* Set STOP[13:12] bits according to USART_StopBits value */
;;;194      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
0000aa  88f0              LDRH     r0,[r6,#6]
0000ac  4304              ORRS     r4,r4,r0
;;;195      
;;;196      /* Write to USART CR2 */
;;;197      USARTx->CR2 = (uint16_t)tmpreg;
0000ae  822c              STRH     r4,[r5,#0x10]
;;;198    
;;;199    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;200      tmpreg = USARTx->CR1;
0000b0  89ac              LDRH     r4,[r5,#0xc]
;;;201      /* Clear M, PCE, PS, TE and RE bits */
;;;202      tmpreg &= CR1_CLEAR_Mask;
0000b2  f64e10f3          MOV      r0,#0xe9f3
0000b6  4004              ANDS     r4,r4,r0
;;;203      /* Configure the USART Word Length, Parity and mode ----------------------- */
;;;204      /* Set the M bits according to USART_WordLength value */
;;;205      /* Set PCE and PS bits according to USART_Parity value */
;;;206      /* Set TE and RE bits according to USART_Mode value */
;;;207      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
0000b8  88b0              LDRH     r0,[r6,#4]
0000ba  8931              LDRH     r1,[r6,#8]
0000bc  4308              ORRS     r0,r0,r1
0000be  8971              LDRH     r1,[r6,#0xa]
0000c0  4308              ORRS     r0,r0,r1
0000c2  4304              ORRS     r4,r4,r0
;;;208                USART_InitStruct->USART_Mode;
;;;209      /* Write to USART CR1 */
;;;210      USARTx->CR1 = (uint16_t)tmpreg;
0000c4  81ac              STRH     r4,[r5,#0xc]
;;;211    
;;;212    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;213      tmpreg = USARTx->CR3;
0000c6  8aac              LDRH     r4,[r5,#0x14]
;;;214      /* Clear CTSE and RTSE bits */
;;;215      tmpreg &= CR3_CLEAR_Mask;
0000c8  f64f40ff          MOV      r0,#0xfcff
0000cc  4004              ANDS     r4,r4,r0
;;;216      /* Configure the USART HFC -------------------------------------------------*/
;;;217      /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;218      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
0000ce  89b0              LDRH     r0,[r6,#0xc]
0000d0  4304              ORRS     r4,r4,r0
;;;219      /* Write to USART CR3 */
;;;220      USARTx->CR3 = (uint16_t)tmpreg;
0000d2  82ac              STRH     r4,[r5,#0x14]
;;;221    
;;;222    /*---------------------------- USART BRR Configuration -----------------------*/
;;;223      /* Configure the USART Baud Rate -------------------------------------------*/
;;;224      RCC_GetClocksFreq(&RCC_ClocksStatus);
0000d4  a801              ADD      r0,sp,#4
0000d6  f7fffffe          BL       RCC_GetClocksFreq
;;;225      if (usartxbase == USART1_BASE)
0000da  48ae              LDR      r0,|L1.916|
0000dc  4287              CMP      r7,r0
0000de  d102              BNE      |L1.230|
;;;226      {
;;;227        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
0000e0  f8dda010          LDR      r10,[sp,#0x10]
0000e4  e001              B        |L1.234|
                  |L1.230|
;;;228      }
;;;229      else
;;;230      {
;;;231        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
0000e6  f8dda00c          LDR      r10,[sp,#0xc]
                  |L1.234|
;;;232      }
;;;233      /* Determine the integer part */
;;;234      integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
0000ea  eb0a00ca          ADD      r0,r10,r10,LSL #3
0000ee  eb00100a          ADD      r0,r0,r10,LSL #4
0000f2  6831              LDR      r1,[r6,#0]
0000f4  0089              LSLS     r1,r1,#2
0000f6  fbb0f8f1          UDIV     r8,r0,r1
;;;235      tmpreg = (integerdivider / 0x64) << 0x04;
0000fa  2064              MOVS     r0,#0x64
0000fc  fbb8f0f0          UDIV     r0,r8,r0
000100  0104              LSLS     r4,r0,#4
;;;236      /* Determine the fractional part */
;;;237      fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
000102  0920              LSRS     r0,r4,#4
000104  2164              MOVS     r1,#0x64
000106  fb018910          MLS      r9,r1,r0,r8
;;;238      tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((uint8_t)0x0F);
00010a  2032              MOVS     r0,#0x32
00010c  eb001009          ADD      r0,r0,r9,LSL #4
000110  fbb0f0f1          UDIV     r0,r0,r1
000114  f000000f          AND      r0,r0,#0xf
000118  4304              ORRS     r4,r4,r0
;;;239      /* Write to USART BRR */
;;;240      USARTx->BRR = (uint16_t)tmpreg;
00011a  812c              STRH     r4,[r5,#8]
;;;241    }
00011c  b006              ADD      sp,sp,#0x18
00011e  e8bd87f0          POP      {r4-r10,pc}
;;;242    
                          ENDP

                  USART_StructInit PROC
;;;248      */
;;;249    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000122  f44f5116          MOV      r1,#0x2580
;;;250    {
;;;251      /* USART_InitStruct members default value */
;;;252      USART_InitStruct->USART_BaudRate = 9600;
000126  6001              STR      r1,[r0,#0]
;;;253      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000128  2100              MOVS     r1,#0
00012a  8081              STRH     r1,[r0,#4]
;;;254      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00012c  80c1              STRH     r1,[r0,#6]
;;;255      USART_InitStruct->USART_Parity = USART_Parity_No ;
00012e  8101              STRH     r1,[r0,#8]
;;;256      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000130  210c              MOVS     r1,#0xc
000132  8141              STRH     r1,[r0,#0xa]
;;;257      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000134  2100              MOVS     r1,#0
000136  8181              STRH     r1,[r0,#0xc]
;;;258    }
000138  4770              BX       lr
;;;259    
                          ENDP

                  USART_ClockInit PROC
;;;269      */
;;;270    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
00013a  b510              PUSH     {r4,lr}
;;;271    {
00013c  4602              MOV      r2,r0
;;;272      uint32_t tmpreg = 0x00;
00013e  2000              MOVS     r0,#0
;;;273      /* Check the parameters */
;;;274      assert_param(IS_USART_123_PERIPH(USARTx));
;;;275      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;276      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;277      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;278      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;279      
;;;280    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;281      tmpreg = USARTx->CR2;
000140  8a10              LDRH     r0,[r2,#0x10]
;;;282      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;283      tmpreg &= CR2_CLOCK_CLEAR_Mask;
000142  f24f03ff          MOV      r3,#0xf0ff
000146  4018              ANDS     r0,r0,r3
;;;284      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;285      /* Set CLKEN bit according to USART_Clock value */
;;;286      /* Set CPOL bit according to USART_CPOL value */
;;;287      /* Set CPHA bit according to USART_CPHA value */
;;;288      /* Set LBCL bit according to USART_LastBit value */
;;;289      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
000148  880b              LDRH     r3,[r1,#0]
00014a  884c              LDRH     r4,[r1,#2]
00014c  4323              ORRS     r3,r3,r4
00014e  888c              LDRH     r4,[r1,#4]
000150  4323              ORRS     r3,r3,r4
000152  88cc              LDRH     r4,[r1,#6]
000154  4323              ORRS     r3,r3,r4
000156  4318              ORRS     r0,r0,r3
;;;290                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;291      /* Write to USART CR2 */
;;;292      USARTx->CR2 = (uint16_t)tmpreg;
000158  8210              STRH     r0,[r2,#0x10]
;;;293    }
00015a  bd10              POP      {r4,pc}
;;;294    
                          ENDP

                  USART_ClockStructInit PROC
;;;300      */
;;;301    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
00015c  2100              MOVS     r1,#0
;;;302    {
;;;303      /* USART_ClockInitStruct members default value */
;;;304      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
00015e  8001              STRH     r1,[r0,#0]
;;;305      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000160  8041              STRH     r1,[r0,#2]
;;;306      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000162  8081              STRH     r1,[r0,#4]
;;;307      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000164  80c1              STRH     r1,[r0,#6]
;;;308    }
000166  4770              BX       lr
;;;309    
                          ENDP

                  USART_Cmd PROC
;;;318      */
;;;319    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000168  b121              CBZ      r1,|L1.372|
;;;320    {
;;;321      /* Check the parameters */
;;;322      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;323      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;324      
;;;325      if (NewState != DISABLE)
;;;326      {
;;;327        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;328        USARTx->CR1 |= CR1_UE_Set;
00016a  8982              LDRH     r2,[r0,#0xc]
00016c  f4425200          ORR      r2,r2,#0x2000
000170  8182              STRH     r2,[r0,#0xc]
000172  e004              B        |L1.382|
                  |L1.372|
;;;329      }
;;;330      else
;;;331      {
;;;332        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;333        USARTx->CR1 &= CR1_UE_Reset;
000174  8982              LDRH     r2,[r0,#0xc]
000176  f64d73ff          MOV      r3,#0xdfff
00017a  401a              ANDS     r2,r2,r3
00017c  8182              STRH     r2,[r0,#0xc]
                  |L1.382|
;;;334      }
;;;335    }
00017e  4770              BX       lr
;;;336    
                          ENDP

                  USART_ITConfig PROC
;;;355      */
;;;356    void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000180  b5f0              PUSH     {r4-r7,lr}
;;;357    {
000182  4603              MOV      r3,r0
;;;358      uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
000184  2400              MOVS     r4,#0
000186  2600              MOVS     r6,#0
000188  2500              MOVS     r5,#0
;;;359      uint32_t usartxbase = 0x00;
00018a  2000              MOVS     r0,#0
;;;360      /* Check the parameters */
;;;361      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;362      assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;363      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;364      /* The CTS interrupt is not available for UART4 and UART5 */
;;;365      if (USART_IT == USART_IT_CTS)
00018c  f5a16710          SUB      r7,r1,#0x900
000190  3f6a              SUBS     r7,r7,#0x6a
000192  d100              BNE      |L1.406|
;;;366      {
;;;367        assert_param(IS_USART_123_PERIPH(USARTx));
000194  bf00              NOP      
                  |L1.406|
;;;368      }   
;;;369      
;;;370      usartxbase = (uint32_t)USARTx;
000196  4618              MOV      r0,r3
;;;371    
;;;372      /* Get the USART register index */
;;;373      usartreg = (((uint8_t)USART_IT) >> 0x05);
000198  f3c11442          UBFX     r4,r1,#5,#3
;;;374    
;;;375      /* Get the interrupt position */
;;;376      itpos = USART_IT & IT_Mask;
00019c  f001061f          AND      r6,r1,#0x1f
;;;377      itmask = (((uint32_t)0x01) << itpos);
0001a0  2701              MOVS     r7,#1
0001a2  fa07f506          LSL      r5,r7,r6
;;;378        
;;;379      if (usartreg == 0x01) /* The IT is in CR1 register */
0001a6  2c01              CMP      r4,#1
0001a8  d101              BNE      |L1.430|
;;;380      {
;;;381        usartxbase += 0x0C;
0001aa  300c              ADDS     r0,r0,#0xc
0001ac  e004              B        |L1.440|
                  |L1.430|
;;;382      }
;;;383      else if (usartreg == 0x02) /* The IT is in CR2 register */
0001ae  2c02              CMP      r4,#2
0001b0  d101              BNE      |L1.438|
;;;384      {
;;;385        usartxbase += 0x10;
0001b2  3010              ADDS     r0,r0,#0x10
0001b4  e000              B        |L1.440|
                  |L1.438|
;;;386      }
;;;387      else /* The IT is in CR3 register */
;;;388      {
;;;389        usartxbase += 0x14; 
0001b6  3014              ADDS     r0,r0,#0x14
                  |L1.440|
;;;390      }
;;;391      if (NewState != DISABLE)
0001b8  b11a              CBZ      r2,|L1.450|
;;;392      {
;;;393        *(__IO uint32_t*)usartxbase  |= itmask;
0001ba  6807              LDR      r7,[r0,#0]
0001bc  432f              ORRS     r7,r7,r5
0001be  6007              STR      r7,[r0,#0]
0001c0  e002              B        |L1.456|
                  |L1.450|
;;;394      }
;;;395      else
;;;396      {
;;;397        *(__IO uint32_t*)usartxbase &= ~itmask;
0001c2  6807              LDR      r7,[r0,#0]
0001c4  43af              BICS     r7,r7,r5
0001c6  6007              STR      r7,[r0,#0]
                  |L1.456|
;;;398      }
;;;399    }
0001c8  bdf0              POP      {r4-r7,pc}
;;;400    
                          ENDP

                  USART_DMACmd PROC
;;;414      */
;;;415    void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
0001ca  b510              PUSH     {r4,lr}
;;;416    {
;;;417      /* Check the parameters */
;;;418      assert_param(IS_USART_1234_PERIPH(USARTx));
;;;419      assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;420      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;421      if (NewState != DISABLE)
0001cc  b11a              CBZ      r2,|L1.470|
;;;422      {
;;;423        /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;424           DMAR bits in the USART CR3 register */
;;;425        USARTx->CR3 |= USART_DMAReq;
0001ce  8a83              LDRH     r3,[r0,#0x14]
0001d0  430b              ORRS     r3,r3,r1
0001d2  8283              STRH     r3,[r0,#0x14]
0001d4  e004              B        |L1.480|
                  |L1.470|
;;;426      }
;;;427      else
;;;428      {
;;;429        /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;430           DMAR bits in the USART CR3 register */
;;;431        USARTx->CR3 &= (uint16_t)~USART_DMAReq;
0001d6  8a83              LDRH     r3,[r0,#0x14]
0001d8  43cc              MVNS     r4,r1
0001da  b2a4              UXTH     r4,r4
0001dc  4023              ANDS     r3,r3,r4
0001de  8283              STRH     r3,[r0,#0x14]
                  |L1.480|
;;;432      }
;;;433    }
0001e0  bd10              POP      {r4,pc}
;;;434    
                          ENDP

                  USART_SetAddress PROC
;;;442      */
;;;443    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
0001e2  8a02              LDRH     r2,[r0,#0x10]
;;;444    {
;;;445      /* Check the parameters */
;;;446      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;447      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;448        
;;;449      /* Clear the USART address */
;;;450      USARTx->CR2 &= CR2_Address_Mask;
0001e4  f64f73f0          MOV      r3,#0xfff0
0001e8  401a              ANDS     r2,r2,r3
0001ea  8202              STRH     r2,[r0,#0x10]
;;;451      /* Set the USART address node */
;;;452      USARTx->CR2 |= USART_Address;
0001ec  8a02              LDRH     r2,[r0,#0x10]
0001ee  430a              ORRS     r2,r2,r1
0001f0  8202              STRH     r2,[r0,#0x10]
;;;453    }
0001f2  4770              BX       lr
;;;454    
                          ENDP

                  USART_WakeUpConfig PROC
;;;465      */
;;;466    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
0001f4  8982              LDRH     r2,[r0,#0xc]
;;;467    {
;;;468      /* Check the parameters */
;;;469      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;470      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;471      
;;;472      USARTx->CR1 &= CR1_WAKE_Mask;
0001f6  f24f73ff          MOV      r3,#0xf7ff
0001fa  401a              ANDS     r2,r2,r3
0001fc  8182              STRH     r2,[r0,#0xc]
;;;473      USARTx->CR1 |= USART_WakeUp;
0001fe  8982              LDRH     r2,[r0,#0xc]
000200  430a              ORRS     r2,r2,r1
000202  8182              STRH     r2,[r0,#0xc]
;;;474    }
000204  4770              BX       lr
;;;475    
                          ENDP

                  USART_ReceiverWakeUpCmd PROC
;;;484      */
;;;485    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000206  b121              CBZ      r1,|L1.530|
;;;486    {
;;;487      /* Check the parameters */
;;;488      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;489      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;490      
;;;491      if (NewState != DISABLE)
;;;492      {
;;;493        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;494        USARTx->CR1 |= CR1_RWU_Set;
000208  8982              LDRH     r2,[r0,#0xc]
00020a  f0420202          ORR      r2,r2,#2
00020e  8182              STRH     r2,[r0,#0xc]
000210  e004              B        |L1.540|
                  |L1.530|
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;499        USARTx->CR1 &= CR1_RWU_Reset;
000212  8982              LDRH     r2,[r0,#0xc]
000214  f64f73fd          MOV      r3,#0xfffd
000218  401a              ANDS     r2,r2,r3
00021a  8182              STRH     r2,[r0,#0xc]
                  |L1.540|
;;;500      }
;;;501    }
00021c  4770              BX       lr
;;;502    
                          ENDP

                  USART_LINBreakDetectLengthConfig PROC
;;;513      */
;;;514    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
00021e  8a02              LDRH     r2,[r0,#0x10]
;;;515    {
;;;516      /* Check the parameters */
;;;517      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;518      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;519      
;;;520      USARTx->CR2 &= CR2_LBDL_Mask;
000220  f64f73df          MOV      r3,#0xffdf
000224  401a              ANDS     r2,r2,r3
000226  8202              STRH     r2,[r0,#0x10]
;;;521      USARTx->CR2 |= USART_LINBreakDetectLength;  
000228  8a02              LDRH     r2,[r0,#0x10]
00022a  430a              ORRS     r2,r2,r1
00022c  8202              STRH     r2,[r0,#0x10]
;;;522    }
00022e  4770              BX       lr
;;;523    
                          ENDP

                  USART_LINCmd PROC
;;;532      */
;;;533    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000230  b121              CBZ      r1,|L1.572|
;;;534    {
;;;535      /* Check the parameters */
;;;536      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;537      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;538      
;;;539      if (NewState != DISABLE)
;;;540      {
;;;541        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;542        USARTx->CR2 |= CR2_LINEN_Set;
000232  8a02              LDRH     r2,[r0,#0x10]
000234  f4424280          ORR      r2,r2,#0x4000
000238  8202              STRH     r2,[r0,#0x10]
00023a  e004              B        |L1.582|
                  |L1.572|
;;;543      }
;;;544      else
;;;545      {
;;;546        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;547        USARTx->CR2 &= CR2_LINEN_Reset;
00023c  8a02              LDRH     r2,[r0,#0x10]
00023e  f64b73ff          MOV      r3,#0xbfff
000242  401a              ANDS     r2,r2,r3
000244  8202              STRH     r2,[r0,#0x10]
                  |L1.582|
;;;548      }
;;;549    }
000246  4770              BX       lr
;;;550    
                          ENDP

                  USART_SendData PROC
;;;558      */
;;;559    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000248  f3c10208          UBFX     r2,r1,#0,#9
;;;560    {
;;;561      /* Check the parameters */
;;;562      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;563      assert_param(IS_USART_DATA(Data)); 
;;;564        
;;;565      /* Transmit Data */
;;;566      USARTx->DR = (Data & (uint16_t)0x01FF);
00024c  8082              STRH     r2,[r0,#4]
;;;567    }
00024e  4770              BX       lr
;;;568    
                          ENDP

                  USART_ReceiveData PROC
;;;575      */
;;;576    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000250  4601              MOV      r1,r0
;;;577    {
;;;578      /* Check the parameters */
;;;579      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;580      
;;;581      /* Receive Data */
;;;582      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000252  8888              LDRH     r0,[r1,#4]
000254  f3c00008          UBFX     r0,r0,#0,#9
;;;583    }
000258  4770              BX       lr
;;;584    
                          ENDP

                  USART_SendBreak PROC
;;;591      */
;;;592    void USART_SendBreak(USART_TypeDef* USARTx)
00025a  8981              LDRH     r1,[r0,#0xc]
;;;593    {
;;;594      /* Check the parameters */
;;;595      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;596      
;;;597      /* Send break characters */
;;;598      USARTx->CR1 |= CR1_SBK_Set;
00025c  f0410101          ORR      r1,r1,#1
000260  8181              STRH     r1,[r0,#0xc]
;;;599    }
000262  4770              BX       lr
;;;600    
                          ENDP

                  USART_SetGuardTime PROC
;;;607      */
;;;608    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000264  8b02              LDRH     r2,[r0,#0x18]
;;;609    {    
;;;610      /* Check the parameters */
;;;611      assert_param(IS_USART_123_PERIPH(USARTx));
;;;612      
;;;613      /* Clear the USART Guard time */
;;;614      USARTx->GTPR &= GTPR_LSB_Mask;
000266  b2d2              UXTB     r2,r2
000268  8302              STRH     r2,[r0,#0x18]
;;;615      /* Set the USART guard time */
;;;616      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
00026a  8b02              LDRH     r2,[r0,#0x18]
00026c  ea422201          ORR      r2,r2,r1,LSL #8
000270  8302              STRH     r2,[r0,#0x18]
;;;617    }
000272  4770              BX       lr
;;;618    
                          ENDP

                  USART_SetPrescaler PROC
;;;627      */
;;;628    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000274  8b02              LDRH     r2,[r0,#0x18]
;;;629    { 
;;;630      /* Check the parameters */
;;;631      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;632      
;;;633      /* Clear the USART prescaler */
;;;634      USARTx->GTPR &= GTPR_MSB_Mask;
000276  f402427f          AND      r2,r2,#0xff00
00027a  8302              STRH     r2,[r0,#0x18]
;;;635      /* Set the USART prescaler */
;;;636      USARTx->GTPR |= USART_Prescaler;
00027c  8b02              LDRH     r2,[r0,#0x18]
00027e  430a              ORRS     r2,r2,r1
000280  8302              STRH     r2,[r0,#0x18]
;;;637    }
000282  4770              BX       lr
;;;638    
                          ENDP

                  USART_SmartCardCmd PROC
;;;646      */
;;;647    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000284  b121              CBZ      r1,|L1.656|
;;;648    {
;;;649      /* Check the parameters */
;;;650      assert_param(IS_USART_123_PERIPH(USARTx));
;;;651      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;652      if (NewState != DISABLE)
;;;653      {
;;;654        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;655        USARTx->CR3 |= CR3_SCEN_Set;
000286  8a82              LDRH     r2,[r0,#0x14]
000288  f0420220          ORR      r2,r2,#0x20
00028c  8282              STRH     r2,[r0,#0x14]
00028e  e004              B        |L1.666|
                  |L1.656|
;;;656      }
;;;657      else
;;;658      {
;;;659        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;660        USARTx->CR3 &= CR3_SCEN_Reset;
000290  8a82              LDRH     r2,[r0,#0x14]
000292  f64f73df          MOV      r3,#0xffdf
000296  401a              ANDS     r2,r2,r3
000298  8282              STRH     r2,[r0,#0x14]
                  |L1.666|
;;;661      }
;;;662    }
00029a  4770              BX       lr
;;;663    
                          ENDP

                  USART_SmartCardNACKCmd PROC
;;;671      */
;;;672    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
00029c  b121              CBZ      r1,|L1.680|
;;;673    {
;;;674      /* Check the parameters */
;;;675      assert_param(IS_USART_123_PERIPH(USARTx));  
;;;676      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;677      if (NewState != DISABLE)
;;;678      {
;;;679        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;680        USARTx->CR3 |= CR3_NACK_Set;
00029e  8a82              LDRH     r2,[r0,#0x14]
0002a0  f0420210          ORR      r2,r2,#0x10
0002a4  8282              STRH     r2,[r0,#0x14]
0002a6  e004              B        |L1.690|
                  |L1.680|
;;;681      }
;;;682      else
;;;683      {
;;;684        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;685        USARTx->CR3 &= CR3_NACK_Reset;
0002a8  8a82              LDRH     r2,[r0,#0x14]
0002aa  f64f73ef          MOV      r3,#0xffef
0002ae  401a              ANDS     r2,r2,r3
0002b0  8282              STRH     r2,[r0,#0x14]
                  |L1.690|
;;;686      }
;;;687    }
0002b2  4770              BX       lr
;;;688    
                          ENDP

                  USART_HalfDuplexCmd PROC
;;;697      */
;;;698    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002b4  b121              CBZ      r1,|L1.704|
;;;699    {
;;;700      /* Check the parameters */
;;;701      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;702      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;703      
;;;704      if (NewState != DISABLE)
;;;705      {
;;;706        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;707        USARTx->CR3 |= CR3_HDSEL_Set;
0002b6  8a82              LDRH     r2,[r0,#0x14]
0002b8  f0420208          ORR      r2,r2,#8
0002bc  8282              STRH     r2,[r0,#0x14]
0002be  e004              B        |L1.714|
                  |L1.704|
;;;708      }
;;;709      else
;;;710      {
;;;711        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;712        USARTx->CR3 &= CR3_HDSEL_Reset;
0002c0  8a82              LDRH     r2,[r0,#0x14]
0002c2  f64f73f7          MOV      r3,#0xfff7
0002c6  401a              ANDS     r2,r2,r3
0002c8  8282              STRH     r2,[r0,#0x14]
                  |L1.714|
;;;713      }
;;;714    }
0002ca  4770              BX       lr
;;;715    
                          ENDP

                  USART_IrDAConfig PROC
;;;726      */
;;;727    void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
0002cc  8a82              LDRH     r2,[r0,#0x14]
;;;728    {
;;;729      /* Check the parameters */
;;;730      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;731      assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;732        
;;;733      USARTx->CR3 &= CR3_IRLP_Mask;
0002ce  f64f73fb          MOV      r3,#0xfffb
0002d2  401a              ANDS     r2,r2,r3
0002d4  8282              STRH     r2,[r0,#0x14]
;;;734      USARTx->CR3 |= USART_IrDAMode;
0002d6  8a82              LDRH     r2,[r0,#0x14]
0002d8  430a              ORRS     r2,r2,r1
0002da  8282              STRH     r2,[r0,#0x14]
;;;735    }
0002dc  4770              BX       lr
;;;736    
                          ENDP

                  USART_IrDACmd PROC
;;;745      */
;;;746    void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
0002de  b121              CBZ      r1,|L1.746|
;;;747    {
;;;748      /* Check the parameters */
;;;749      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;750      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;751        
;;;752      if (NewState != DISABLE)
;;;753      {
;;;754        /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;755        USARTx->CR3 |= CR3_IREN_Set;
0002e0  8a82              LDRH     r2,[r0,#0x14]
0002e2  f0420202          ORR      r2,r2,#2
0002e6  8282              STRH     r2,[r0,#0x14]
0002e8  e004              B        |L1.756|
                  |L1.746|
;;;756      }
;;;757      else
;;;758      {
;;;759        /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;760        USARTx->CR3 &= CR3_IREN_Reset;
0002ea  8a82              LDRH     r2,[r0,#0x14]
0002ec  f64f73fd          MOV      r3,#0xfffd
0002f0  401a              ANDS     r2,r2,r3
0002f2  8282              STRH     r2,[r0,#0x14]
                  |L1.756|
;;;761      }
;;;762    }
0002f4  4770              BX       lr
;;;763    
                          ENDP

                  USART_GetFlagStatus PROC
;;;782      */
;;;783    FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
0002f6  4602              MOV      r2,r0
;;;784    {
;;;785      FlagStatus bitstatus = RESET;
0002f8  2000              MOVS     r0,#0
;;;786      /* Check the parameters */
;;;787      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;788      assert_param(IS_USART_FLAG(USART_FLAG));
;;;789      /* The CTS flag is not available for UART4 and UART5 */
;;;790      if (USART_FLAG == USART_FLAG_CTS)
0002fa  f5b17f00          CMP      r1,#0x200
0002fe  d100              BNE      |L1.770|
;;;791      {
;;;792        assert_param(IS_USART_123_PERIPH(USARTx));
000300  bf00              NOP      
                  |L1.770|
;;;793      }  
;;;794      
;;;795      if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
000302  8813              LDRH     r3,[r2,#0]
000304  420b              TST      r3,r1
000306  d001              BEQ      |L1.780|
;;;796      {
;;;797        bitstatus = SET;
000308  2001              MOVS     r0,#1
00030a  e000              B        |L1.782|
                  |L1.780|
;;;798      }
;;;799      else
;;;800      {
;;;801        bitstatus = RESET;
00030c  2000              MOVS     r0,#0
                  |L1.782|
;;;802      }
;;;803      return bitstatus;
;;;804    }
00030e  4770              BX       lr
;;;805    
                          ENDP

                  USART_ClearFlag PROC
;;;831      */
;;;832    void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000310  f4017200          AND      r2,r1,#0x200
;;;833    {
;;;834      /* Check the parameters */
;;;835      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;836      assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;837      /* The CTS flag is not available for UART4 and UART5 */
;;;838      if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
000314  f5b27f00          CMP      r2,#0x200
000318  d100              BNE      |L1.796|
;;;839      {
;;;840        assert_param(IS_USART_123_PERIPH(USARTx));
00031a  bf00              NOP      
                  |L1.796|
;;;841      } 
;;;842       
;;;843      USARTx->SR = (uint16_t)~USART_FLAG;
00031c  43ca              MVNS     r2,r1
00031e  8002              STRH     r2,[r0,#0]
;;;844    }
000320  4770              BX       lr
;;;845    
                          ENDP

                  USART_GetITStatus PROC
;;;864      */
;;;865    ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000322  b570              PUSH     {r4-r6,lr}
;;;866    {
000324  4602              MOV      r2,r0
;;;867      uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
000326  2400              MOVS     r4,#0
000328  2300              MOVS     r3,#0
00032a  2500              MOVS     r5,#0
;;;868      ITStatus bitstatus = RESET;
00032c  2000              MOVS     r0,#0
;;;869      /* Check the parameters */
;;;870      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;871      assert_param(IS_USART_GET_IT(USART_IT));
;;;872      /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;873      if (USART_IT == USART_IT_CTS)
00032e  f5a16610          SUB      r6,r1,#0x900
000332  3e6a              SUBS     r6,r6,#0x6a
000334  d100              BNE      |L1.824|
;;;874      {
;;;875        assert_param(IS_USART_123_PERIPH(USARTx));
000336  bf00              NOP      
                  |L1.824|
;;;876      }   
;;;877      
;;;878      /* Get the USART register index */
;;;879      usartreg = (((uint8_t)USART_IT) >> 0x05);
000338  f3c11542          UBFX     r5,r1,#5,#3
;;;880      /* Get the interrupt position */
;;;881      itmask = USART_IT & IT_Mask;
00033c  f001031f          AND      r3,r1,#0x1f
;;;882      itmask = (uint32_t)0x01 << itmask;
000340  2601              MOVS     r6,#1
000342  fa06f303          LSL      r3,r6,r3
;;;883      
;;;884      if (usartreg == 0x01) /* The IT  is in CR1 register */
000346  2d01              CMP      r5,#1
000348  d102              BNE      |L1.848|
;;;885      {
;;;886        itmask &= USARTx->CR1;
00034a  8996              LDRH     r6,[r2,#0xc]
00034c  4033              ANDS     r3,r3,r6
00034e  e006              B        |L1.862|
                  |L1.848|
;;;887      }
;;;888      else if (usartreg == 0x02) /* The IT  is in CR2 register */
000350  2d02              CMP      r5,#2
000352  d102              BNE      |L1.858|
;;;889      {
;;;890        itmask &= USARTx->CR2;
000354  8a16              LDRH     r6,[r2,#0x10]
000356  4033              ANDS     r3,r3,r6
000358  e001              B        |L1.862|
                  |L1.858|
;;;891      }
;;;892      else /* The IT  is in CR3 register */
;;;893      {
;;;894        itmask &= USARTx->CR3;
00035a  8a96              LDRH     r6,[r2,#0x14]
00035c  4033              ANDS     r3,r3,r6
                  |L1.862|
;;;895      }
;;;896      
;;;897      bitpos = USART_IT >> 0x08;
00035e  120c              ASRS     r4,r1,#8
;;;898      bitpos = (uint32_t)0x01 << bitpos;
000360  2601              MOVS     r6,#1
000362  fa06f404          LSL      r4,r6,r4
;;;899      bitpos &= USARTx->SR;
000366  8816              LDRH     r6,[r2,#0]
000368  4034              ANDS     r4,r4,r6
;;;900      if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
00036a  b113              CBZ      r3,|L1.882|
00036c  b10c              CBZ      r4,|L1.882|
;;;901      {
;;;902        bitstatus = SET;
00036e  2001              MOVS     r0,#1
000370  e000              B        |L1.884|
                  |L1.882|
;;;903      }
;;;904      else
;;;905      {
;;;906        bitstatus = RESET;
000372  2000              MOVS     r0,#0
                  |L1.884|
;;;907      }
;;;908      
;;;909      return bitstatus;  
;;;910    }
000374  bd70              POP      {r4-r6,pc}
;;;911    
                          ENDP

                  USART_ClearITPendingBit PROC
;;;938      */
;;;939    void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000376  b510              PUSH     {r4,lr}
;;;940    {
;;;941      uint16_t bitpos = 0x00, itmask = 0x00;
000378  2200              MOVS     r2,#0
00037a  2300              MOVS     r3,#0
;;;942      /* Check the parameters */
;;;943      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;944      assert_param(IS_USART_CLEAR_IT(USART_IT));
;;;945      /* The CTS interrupt is not available for UART4 and UART5 */
;;;946      if (USART_IT == USART_IT_CTS)
00037c  f5a16410          SUB      r4,r1,#0x900
000380  3c6a              SUBS     r4,r4,#0x6a
000382  d100              BNE      |L1.902|
;;;947      {
;;;948        assert_param(IS_USART_123_PERIPH(USARTx));
000384  bf00              NOP      
                  |L1.902|
;;;949      }   
;;;950      
;;;951      bitpos = USART_IT >> 0x08;
000386  120a              ASRS     r2,r1,#8
;;;952      itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000388  2401              MOVS     r4,#1
00038a  4094              LSLS     r4,r4,r2
00038c  b2a3              UXTH     r3,r4
;;;953      USARTx->SR = (uint16_t)~itmask;
00038e  43dc              MVNS     r4,r3
000390  8004              STRH     r4,[r0,#0]
;;;954    }
000392  bd10              POP      {r4,pc}
;;;955    /**
                          ENDP

                  |L1.916|
                          DCD      0x40013800
                  |L1.920|
                          DCD      0x40004400
                  |L1.924|
                          DCD      0x40004800
                  |L1.928|
                          DCD      0x40004c00
                  |L1.932|
                          DCD      0x40005000
