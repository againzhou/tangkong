
/// ----------------------------------------------------------------------------
/// File Name          : mc_base.h
/// Description        : 闭环电机的命令控制部分
///
///     D   --  表示 D轴, 即针背方向, 单位为1/400圈
///             (毛巾绣时指向线迹终点方向, 链式绣时指向线迹起点方向)
///     DM  --  表示 D轴电机轴, 单位为编码器精度, 即1/1600圈
///     H   --  表示 H轴, 即环梭孔方向, 单位为1/400圈
///             (找原点或穿线点时, H轴与D轴重合; 刺绣时, H轴相对D轴偏转-1/8r)
///     HM  --  表示 H轴电机轴, 单位为编码器精度, 即1/1600圈
///             (a针位HM与H轴原点重合, b~f针位不重合)
///     M   --  表示被控电机轴, 根据上下机头板确定 D或 H, 用于目标控制.
///
///     R   --  表示圈数, 单位为"圈"
///     V   --  表示D 或H 轴方向, 单位为"1/400圈", 通讯命令即按此单.
///     E   --  表示DM或HM轴方向, 单位为编码器分辨率, 即"1/1600圈".
///
///     闭环电机有两种控制方式: 开环方式 和 闭环方式
///     对于D轴, 有以下动作:  
///         1 找原点        (开环)  即找机械原点, 找到后M和T轴变量清零      
///         2 转到某方向    (闭环)  闭环控制, 一般绣作时使用
///         3 找穿线点      (混合)  由1和2组合完成, 两个动作方向最好相反
///     对于H轴, 相对复杂, 所有环轴联动的动作需要闭环控制, 有以下动作:
///         1 找原点        (混合)  找机械原点后, 然后找针位原点. 设置为非偏移状态
///         2 找穿线点      (混合)  找机械原点后, 然后找针位穿线点. 设置为非偏移状态
///         3 偏移动作      (闭环)  负方向转45°. 设置为偏移状态 (偏移状态才能刺绣)
///         4 打环动作      (闭环)  H1 和 H2, 更新T轴变量, 并根据T轴变量计算M轴变量
///         5 晃环动作      (开环)  正负半个齿左右晃动
///         6 换色动作      (开环)  只是更新当前针位 和 M轴变量, T轴变量不更新
/// ----------------------------------------------------------------------------

/// History:

/// y10/m01/d17     v0.02   chenyong    modify
/// 从模块mcc分离出此模块

/// y10/m11/d08     v0.01   chenyong    setup



#ifdef  PC924

#ifndef  MCB_H
#define  MCB_H

/// EXTERNS --------------------------------------------------------------------
#ifdef   MCB_MODULE
    #define  MCB_EXT                /// 不定义为 "外部", 本模块内
#else
    #define  MCB_EXT  extern        /// 定义为 "外部"
#endif


//#include  <ucos_ii.h>               /// OS核的头文件
#include  <bsp.h>

//  #ifndef  CFG_H      /// 没有统一配置

/// USER DEFINED CONSTANTS ------------------------------------------------------------------------------

/// 定义电机方向, 电机脉冲方向与编码器方向相同, 
/// 并且都与数据方向相同(数据正向为电机逆时针，DH轴为顺时针)
#define     MCB_DIR_DEC         BSP_MOT_DIR_CW
#define     MCB_DIR_INC         BSP_MOT_DIR_CCW

/// 闭环电机转动一圈需要的脉冲数
#define     MCB_N_P_PR          1600
/// 目前只支持脉冲数与编码器相同
#if BSP_ENC_N_T_PR != MCB_N_P_PR
    #error  "N_Encoder != N_Clock!"
#endif

#define     MCB_P_DIV_E         (MCB_N_P_PR / BSP_ENC_N_T_PR)   /// 脉冲数 / 编码器数
#define     MCB_E_DIV_P         (BSP_ENC_N_T_PR / MCB_N_P_PR)   /// 编码器数 / 脉冲数

#define     MCB_POLE_PAIRS      50                              /// 电机极对数


/// Exported types -------------------------------------------------------------

/// Global variables -----------------------------------------------------------

#ifdef  MC_IS_OBSERVE
MCB_EXT  s16    MC_OBS_OrgMaxE[BSP_DEVICE_ID_N];        /// 零位时编码器的最大值, 观察调试用
MCB_EXT  s16    MC_OBS_OrgMinE[BSP_DEVICE_ID_N];        /// 零位时编码器的最小值, 观察调试用
#endif

MCB_EXT  bool   MCB_OrgIs0[BSP_DEVICE_ID_N];            /// 零位时计数器是否已经被设置为0

MCB_EXT  s32    MCB_PulseR[BSP_DEVICE_ID_N];            /// 电机脉冲(电角度)圈数
MCB_EXT  u16    MCB_PulseE[BSP_DEVICE_ID_N];            /// 电机脉冲(电角度)对应的编码器的值


/// FUNCTION PROTOTYPES ---------------------------------------------------------------------------------

void        MCB_OrgIRQ          (BSP_ID_TypeDef id);



#endif

#endif
